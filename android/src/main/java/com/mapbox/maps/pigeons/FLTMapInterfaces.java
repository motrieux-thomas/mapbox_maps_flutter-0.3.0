// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class FLTMapInterfaces {

  public enum GlyphsRasterizationMode {
    NO_GLYPHS_RASTERIZED_LOCALLY(0),
    IDEOGRAPHS_RASTERIZED_LOCALLY(1),
    ALL_GLYPHS_RASTERIZED_LOCALLY(2);

    private int index;
    private GlyphsRasterizationMode(final int index) {
      this.index = index;
    }
  }

  public enum ContextMode {
    UNIQUE(0),
    SHARED(1);

    private int index;
    private ContextMode(final int index) {
      this.index = index;
    }
  }

  public enum ConstrainMode {
    NONE(0),
    HEIGHT_ONLY(1),
    WIDTH_AND_HEIGHT(2);

    private int index;
    private ConstrainMode(final int index) {
      this.index = index;
    }
  }

  public enum ViewportMode {
    DEFAULT(0),
    FLIPPED_Y(1);

    private int index;
    private ViewportMode(final int index) {
      this.index = index;
    }
  }

  public enum NorthOrientation {
    UPWARDS(0),
    RIGHTWARDS(1),
    DOWNWARDS(2),
    LEFTWARDS(3);

    private int index;
    private NorthOrientation(final int index) {
      this.index = index;
    }
  }

  public enum MapDebugOptionsData {
    TILE_BORDERS(0),
    PARSE_STATUS(1),
    TIMESTAMPS(2),
    COLLISION(3),
    OVERDRAW(4),
    STENCIL_CLIP(5),
    DEPTH_BUFFER(6),
    RENDER_CACHE(7),
    MODEL_BOUNDS(8),
    TERRAIN_WIREFRAME(9);

    private int index;
    private MapDebugOptionsData(final int index) {
      this.index = index;
    }
  }

  public enum ViewAnnotationAnchor {
    TOP(0),
    LEFT(1),
    BOTTOM(2),
    RIGHT(3),
    TOP_LEFT(4),
    BOTTOM_RIGHT(5),
    TOP_RIGHT(6),
    BOTTOM_LEFT(7),
    CENTER(8);

    private int index;
    private ViewAnnotationAnchor(final int index) {
      this.index = index;
    }
  }

  public enum Type {
    SCREEN_BOX(0),
    SCREEN_COORDINATE(1),
    LIST(2);

    private int index;
    private Type(final int index) {
      this.index = index;
    }
  }

  public enum StylePackErrorType {
    CANCELED(0),
    DOES_NOT_EXIST(1),
    DISK_FULL(2),
    OTHER(3);

    private int index;
    private StylePackErrorType(final int index) {
      this.index = index;
    }
  }

  public enum ResponseErrorReason {
    NOT_FOUND(0),
    SERVER(1),
    CONNECTION(2),
    RATE_LIMIT(3),
    OTHER(4);

    private int index;
    private ResponseErrorReason(final int index) {
      this.index = index;
    }
  }

  public enum OfflineRegionDownloadState {
    INACTIVE(0),
    ACTIVE(1);

    private int index;
    private OfflineRegionDownloadState(final int index) {
      this.index = index;
    }
  }

  public enum TileStoreUsageMode {
    DISABLED(0),
    READ_ONLY(1),
    READ_AND_UPDATE(2);

    private int index;
    private TileStoreUsageMode(final int index) {
      this.index = index;
    }
  }

  public enum StylePropertyValueKind {
    UNDEFINED(0),
    CONSTANT(1),
    EXPRESSION(2),
    TRANSITION(3);

    private int index;
    private StylePropertyValueKind(final int index) {
      this.index = index;
    }
  }

  public enum HttpMethod {
    GET(0),
    HEAD(1),
    POST(2);

    private int index;
    private HttpMethod(final int index) {
      this.index = index;
    }
  }

  public enum NetworkRestriction {
    NONE(0),
    DISALLOW_EXPENSIVE(1),
    DISALLOW_ALL(2);

    private int index;
    private NetworkRestriction(final int index) {
      this.index = index;
    }
  }

  public enum HttpRequestErrorType {
    CONNECTION_ERROR(0),
    SSLERROR(1),
    REQUEST_CANCELLED(2),
    REQUEST_TIMED_OUT(3),
    RANGE_ERROR(4),
    OTHER_ERROR(5);

    private int index;
    private HttpRequestErrorType(final int index) {
      this.index = index;
    }
  }

  public enum DownloadErrorCode {
    FILE_SYSTEM_ERROR(0),
    NETWORK_ERROR(1);

    private int index;
    private DownloadErrorCode(final int index) {
      this.index = index;
    }
  }

  public enum DownloadState {
    PENDING(0),
    DOWNLOADING(1),
    FAILED(2),
    FINISHED(3);

    private int index;
    private DownloadState(final int index) {
      this.index = index;
    }
  }

  public enum TileDataDomain {
    MAPS(0),
    NAVIGATION(1),
    SEARCH(2),
    ADAS(3);

    private int index;
    private TileDataDomain(final int index) {
      this.index = index;
    }
  }

  public enum TileRegionErrorType {
    CANCELED(0),
    DOES_NOT_EXIST(1),
    TILESET_DESCRIPTOR(2),
    DISK_FULL(3),
    OTHER(4),
    TILE_COUNT_EXCEEDED(5);

    private int index;
    private TileRegionErrorType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MbxEdgeInsets {
    private @NonNull Double top;
    public @NonNull Double getTop() { return top; }
    public void setTop(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"top\" is null.");
      }
      this.top = setterArg;
    }

    private @NonNull Double left;
    public @NonNull Double getLeft() { return left; }
    public void setLeft(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"left\" is null.");
      }
      this.left = setterArg;
    }

    private @NonNull Double bottom;
    public @NonNull Double getBottom() { return bottom; }
    public void setBottom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bottom\" is null.");
      }
      this.bottom = setterArg;
    }

    private @NonNull Double right;
    public @NonNull Double getRight() { return right; }
    public void setRight(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"right\" is null.");
      }
      this.right = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private MbxEdgeInsets() {}
    public static final class Builder {
      private @Nullable Double top;
      public @NonNull Builder setTop(@NonNull Double setterArg) {
        this.top = setterArg;
        return this;
      }
      private @Nullable Double left;
      public @NonNull Builder setLeft(@NonNull Double setterArg) {
        this.left = setterArg;
        return this;
      }
      private @Nullable Double bottom;
      public @NonNull Builder setBottom(@NonNull Double setterArg) {
        this.bottom = setterArg;
        return this;
      }
      private @Nullable Double right;
      public @NonNull Builder setRight(@NonNull Double setterArg) {
        this.right = setterArg;
        return this;
      }
      public @NonNull MbxEdgeInsets build() {
        MbxEdgeInsets pigeonReturn = new MbxEdgeInsets();
        pigeonReturn.setTop(top);
        pigeonReturn.setLeft(left);
        pigeonReturn.setBottom(bottom);
        pigeonReturn.setRight(right);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("top", top);
      toMapResult.put("left", left);
      toMapResult.put("bottom", bottom);
      toMapResult.put("right", right);
      return toMapResult;
    }
    static @NonNull MbxEdgeInsets fromMap(@NonNull Map<String, Object> map) {
      MbxEdgeInsets pigeonResult = new MbxEdgeInsets();
      Object top = map.get("top");
      pigeonResult.setTop((Double)top);
      Object left = map.get("left");
      pigeonResult.setLeft((Double)left);
      Object bottom = map.get("bottom");
      pigeonResult.setBottom((Double)bottom);
      Object right = map.get("right");
      pigeonResult.setRight((Double)right);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CameraOptions {
    private @Nullable Map<String, Object> center;
    public @Nullable Map<String, Object> getCenter() { return center; }
    public void setCenter(@Nullable Map<String, Object> setterArg) {
      this.center = setterArg;
    }

    private @Nullable MbxEdgeInsets padding;
    public @Nullable MbxEdgeInsets getPadding() { return padding; }
    public void setPadding(@Nullable MbxEdgeInsets setterArg) {
      this.padding = setterArg;
    }

    private @Nullable ScreenCoordinate anchor;
    public @Nullable ScreenCoordinate getAnchor() { return anchor; }
    public void setAnchor(@Nullable ScreenCoordinate setterArg) {
      this.anchor = setterArg;
    }

    private @Nullable Double zoom;
    public @Nullable Double getZoom() { return zoom; }
    public void setZoom(@Nullable Double setterArg) {
      this.zoom = setterArg;
    }

    private @Nullable Double bearing;
    public @Nullable Double getBearing() { return bearing; }
    public void setBearing(@Nullable Double setterArg) {
      this.bearing = setterArg;
    }

    private @Nullable Double pitch;
    public @Nullable Double getPitch() { return pitch; }
    public void setPitch(@Nullable Double setterArg) {
      this.pitch = setterArg;
    }

    public static final class Builder {
      private @Nullable Map<String, Object> center;
      public @NonNull Builder setCenter(@Nullable Map<String, Object> setterArg) {
        this.center = setterArg;
        return this;
      }
      private @Nullable MbxEdgeInsets padding;
      public @NonNull Builder setPadding(@Nullable MbxEdgeInsets setterArg) {
        this.padding = setterArg;
        return this;
      }
      private @Nullable ScreenCoordinate anchor;
      public @NonNull Builder setAnchor(@Nullable ScreenCoordinate setterArg) {
        this.anchor = setterArg;
        return this;
      }
      private @Nullable Double zoom;
      public @NonNull Builder setZoom(@Nullable Double setterArg) {
        this.zoom = setterArg;
        return this;
      }
      private @Nullable Double bearing;
      public @NonNull Builder setBearing(@Nullable Double setterArg) {
        this.bearing = setterArg;
        return this;
      }
      private @Nullable Double pitch;
      public @NonNull Builder setPitch(@Nullable Double setterArg) {
        this.pitch = setterArg;
        return this;
      }
      public @NonNull CameraOptions build() {
        CameraOptions pigeonReturn = new CameraOptions();
        pigeonReturn.setCenter(center);
        pigeonReturn.setPadding(padding);
        pigeonReturn.setAnchor(anchor);
        pigeonReturn.setZoom(zoom);
        pigeonReturn.setBearing(bearing);
        pigeonReturn.setPitch(pitch);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("center", center);
      toMapResult.put("padding", (padding == null) ? null : padding.toMap());
      toMapResult.put("anchor", (anchor == null) ? null : anchor.toMap());
      toMapResult.put("zoom", zoom);
      toMapResult.put("bearing", bearing);
      toMapResult.put("pitch", pitch);
      return toMapResult;
    }
    static @NonNull CameraOptions fromMap(@NonNull Map<String, Object> map) {
      CameraOptions pigeonResult = new CameraOptions();
      Object center = map.get("center");
      pigeonResult.setCenter((Map<String, Object>)center);
      Object padding = map.get("padding");
      pigeonResult.setPadding((padding == null) ? null : MbxEdgeInsets.fromMap((Map)padding));
      Object anchor = map.get("anchor");
      pigeonResult.setAnchor((anchor == null) ? null : ScreenCoordinate.fromMap((Map)anchor));
      Object zoom = map.get("zoom");
      pigeonResult.setZoom((Double)zoom);
      Object bearing = map.get("bearing");
      pigeonResult.setBearing((Double)bearing);
      Object pitch = map.get("pitch");
      pigeonResult.setPitch((Double)pitch);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CameraState {
    private @NonNull Map<String, Object> center;
    public @NonNull Map<String, Object> getCenter() { return center; }
    public void setCenter(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"center\" is null.");
      }
      this.center = setterArg;
    }

    private @NonNull MbxEdgeInsets padding;
    public @NonNull MbxEdgeInsets getPadding() { return padding; }
    public void setPadding(@NonNull MbxEdgeInsets setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"padding\" is null.");
      }
      this.padding = setterArg;
    }

    private @NonNull Double zoom;
    public @NonNull Double getZoom() { return zoom; }
    public void setZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zoom\" is null.");
      }
      this.zoom = setterArg;
    }

    private @NonNull Double bearing;
    public @NonNull Double getBearing() { return bearing; }
    public void setBearing(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bearing\" is null.");
      }
      this.bearing = setterArg;
    }

    private @NonNull Double pitch;
    public @NonNull Double getPitch() { return pitch; }
    public void setPitch(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"pitch\" is null.");
      }
      this.pitch = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private CameraState() {}
    public static final class Builder {
      private @Nullable Map<String, Object> center;
      public @NonNull Builder setCenter(@NonNull Map<String, Object> setterArg) {
        this.center = setterArg;
        return this;
      }
      private @Nullable MbxEdgeInsets padding;
      public @NonNull Builder setPadding(@NonNull MbxEdgeInsets setterArg) {
        this.padding = setterArg;
        return this;
      }
      private @Nullable Double zoom;
      public @NonNull Builder setZoom(@NonNull Double setterArg) {
        this.zoom = setterArg;
        return this;
      }
      private @Nullable Double bearing;
      public @NonNull Builder setBearing(@NonNull Double setterArg) {
        this.bearing = setterArg;
        return this;
      }
      private @Nullable Double pitch;
      public @NonNull Builder setPitch(@NonNull Double setterArg) {
        this.pitch = setterArg;
        return this;
      }
      public @NonNull CameraState build() {
        CameraState pigeonReturn = new CameraState();
        pigeonReturn.setCenter(center);
        pigeonReturn.setPadding(padding);
        pigeonReturn.setZoom(zoom);
        pigeonReturn.setBearing(bearing);
        pigeonReturn.setPitch(pitch);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("center", center);
      toMapResult.put("padding", (padding == null) ? null : padding.toMap());
      toMapResult.put("zoom", zoom);
      toMapResult.put("bearing", bearing);
      toMapResult.put("pitch", pitch);
      return toMapResult;
    }
    static @NonNull CameraState fromMap(@NonNull Map<String, Object> map) {
      CameraState pigeonResult = new CameraState();
      Object center = map.get("center");
      pigeonResult.setCenter((Map<String, Object>)center);
      Object padding = map.get("padding");
      pigeonResult.setPadding((padding == null) ? null : MbxEdgeInsets.fromMap((Map)padding));
      Object zoom = map.get("zoom");
      pigeonResult.setZoom((Double)zoom);
      Object bearing = map.get("bearing");
      pigeonResult.setBearing((Double)bearing);
      Object pitch = map.get("pitch");
      pigeonResult.setPitch((Double)pitch);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CameraBoundsOptions {
    private @Nullable CoordinateBounds bounds;
    public @Nullable CoordinateBounds getBounds() { return bounds; }
    public void setBounds(@Nullable CoordinateBounds setterArg) {
      this.bounds = setterArg;
    }

    private @Nullable Double maxZoom;
    public @Nullable Double getMaxZoom() { return maxZoom; }
    public void setMaxZoom(@Nullable Double setterArg) {
      this.maxZoom = setterArg;
    }

    private @Nullable Double minZoom;
    public @Nullable Double getMinZoom() { return minZoom; }
    public void setMinZoom(@Nullable Double setterArg) {
      this.minZoom = setterArg;
    }

    private @Nullable Double maxPitch;
    public @Nullable Double getMaxPitch() { return maxPitch; }
    public void setMaxPitch(@Nullable Double setterArg) {
      this.maxPitch = setterArg;
    }

    private @Nullable Double minPitch;
    public @Nullable Double getMinPitch() { return minPitch; }
    public void setMinPitch(@Nullable Double setterArg) {
      this.minPitch = setterArg;
    }

    public static final class Builder {
      private @Nullable CoordinateBounds bounds;
      public @NonNull Builder setBounds(@Nullable CoordinateBounds setterArg) {
        this.bounds = setterArg;
        return this;
      }
      private @Nullable Double maxZoom;
      public @NonNull Builder setMaxZoom(@Nullable Double setterArg) {
        this.maxZoom = setterArg;
        return this;
      }
      private @Nullable Double minZoom;
      public @NonNull Builder setMinZoom(@Nullable Double setterArg) {
        this.minZoom = setterArg;
        return this;
      }
      private @Nullable Double maxPitch;
      public @NonNull Builder setMaxPitch(@Nullable Double setterArg) {
        this.maxPitch = setterArg;
        return this;
      }
      private @Nullable Double minPitch;
      public @NonNull Builder setMinPitch(@Nullable Double setterArg) {
        this.minPitch = setterArg;
        return this;
      }
      public @NonNull CameraBoundsOptions build() {
        CameraBoundsOptions pigeonReturn = new CameraBoundsOptions();
        pigeonReturn.setBounds(bounds);
        pigeonReturn.setMaxZoom(maxZoom);
        pigeonReturn.setMinZoom(minZoom);
        pigeonReturn.setMaxPitch(maxPitch);
        pigeonReturn.setMinPitch(minPitch);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("bounds", (bounds == null) ? null : bounds.toMap());
      toMapResult.put("maxZoom", maxZoom);
      toMapResult.put("minZoom", minZoom);
      toMapResult.put("maxPitch", maxPitch);
      toMapResult.put("minPitch", minPitch);
      return toMapResult;
    }
    static @NonNull CameraBoundsOptions fromMap(@NonNull Map<String, Object> map) {
      CameraBoundsOptions pigeonResult = new CameraBoundsOptions();
      Object bounds = map.get("bounds");
      pigeonResult.setBounds((bounds == null) ? null : CoordinateBounds.fromMap((Map)bounds));
      Object maxZoom = map.get("maxZoom");
      pigeonResult.setMaxZoom((Double)maxZoom);
      Object minZoom = map.get("minZoom");
      pigeonResult.setMinZoom((Double)minZoom);
      Object maxPitch = map.get("maxPitch");
      pigeonResult.setMaxPitch((Double)maxPitch);
      Object minPitch = map.get("minPitch");
      pigeonResult.setMinPitch((Double)minPitch);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CameraBounds {
    private @NonNull CoordinateBounds bounds;
    public @NonNull CoordinateBounds getBounds() { return bounds; }
    public void setBounds(@NonNull CoordinateBounds setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bounds\" is null.");
      }
      this.bounds = setterArg;
    }

    private @NonNull Double maxZoom;
    public @NonNull Double getMaxZoom() { return maxZoom; }
    public void setMaxZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxZoom\" is null.");
      }
      this.maxZoom = setterArg;
    }

    private @NonNull Double minZoom;
    public @NonNull Double getMinZoom() { return minZoom; }
    public void setMinZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"minZoom\" is null.");
      }
      this.minZoom = setterArg;
    }

    private @NonNull Double maxPitch;
    public @NonNull Double getMaxPitch() { return maxPitch; }
    public void setMaxPitch(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxPitch\" is null.");
      }
      this.maxPitch = setterArg;
    }

    private @NonNull Double minPitch;
    public @NonNull Double getMinPitch() { return minPitch; }
    public void setMinPitch(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"minPitch\" is null.");
      }
      this.minPitch = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private CameraBounds() {}
    public static final class Builder {
      private @Nullable CoordinateBounds bounds;
      public @NonNull Builder setBounds(@NonNull CoordinateBounds setterArg) {
        this.bounds = setterArg;
        return this;
      }
      private @Nullable Double maxZoom;
      public @NonNull Builder setMaxZoom(@NonNull Double setterArg) {
        this.maxZoom = setterArg;
        return this;
      }
      private @Nullable Double minZoom;
      public @NonNull Builder setMinZoom(@NonNull Double setterArg) {
        this.minZoom = setterArg;
        return this;
      }
      private @Nullable Double maxPitch;
      public @NonNull Builder setMaxPitch(@NonNull Double setterArg) {
        this.maxPitch = setterArg;
        return this;
      }
      private @Nullable Double minPitch;
      public @NonNull Builder setMinPitch(@NonNull Double setterArg) {
        this.minPitch = setterArg;
        return this;
      }
      public @NonNull CameraBounds build() {
        CameraBounds pigeonReturn = new CameraBounds();
        pigeonReturn.setBounds(bounds);
        pigeonReturn.setMaxZoom(maxZoom);
        pigeonReturn.setMinZoom(minZoom);
        pigeonReturn.setMaxPitch(maxPitch);
        pigeonReturn.setMinPitch(minPitch);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("bounds", (bounds == null) ? null : bounds.toMap());
      toMapResult.put("maxZoom", maxZoom);
      toMapResult.put("minZoom", minZoom);
      toMapResult.put("maxPitch", maxPitch);
      toMapResult.put("minPitch", minPitch);
      return toMapResult;
    }
    static @NonNull CameraBounds fromMap(@NonNull Map<String, Object> map) {
      CameraBounds pigeonResult = new CameraBounds();
      Object bounds = map.get("bounds");
      pigeonResult.setBounds((bounds == null) ? null : CoordinateBounds.fromMap((Map)bounds));
      Object maxZoom = map.get("maxZoom");
      pigeonResult.setMaxZoom((Double)maxZoom);
      Object minZoom = map.get("minZoom");
      pigeonResult.setMinZoom((Double)minZoom);
      Object maxPitch = map.get("maxPitch");
      pigeonResult.setMaxPitch((Double)maxPitch);
      Object minPitch = map.get("minPitch");
      pigeonResult.setMinPitch((Double)minPitch);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MapAnimationOptions {
    private @Nullable Long duration;
    public @Nullable Long getDuration() { return duration; }
    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    private @Nullable Long startDelay;
    public @Nullable Long getStartDelay() { return startDelay; }
    public void setStartDelay(@Nullable Long setterArg) {
      this.startDelay = setterArg;
    }

    public static final class Builder {
      private @Nullable Long duration;
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }
      private @Nullable Long startDelay;
      public @NonNull Builder setStartDelay(@Nullable Long setterArg) {
        this.startDelay = setterArg;
        return this;
      }
      public @NonNull MapAnimationOptions build() {
        MapAnimationOptions pigeonReturn = new MapAnimationOptions();
        pigeonReturn.setDuration(duration);
        pigeonReturn.setStartDelay(startDelay);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("duration", duration);
      toMapResult.put("startDelay", startDelay);
      return toMapResult;
    }
    static @NonNull MapAnimationOptions fromMap(@NonNull Map<String, Object> map) {
      MapAnimationOptions pigeonResult = new MapAnimationOptions();
      Object duration = map.get("duration");
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration));
      Object startDelay = map.get("startDelay");
      pigeonResult.setStartDelay((startDelay == null) ? null : ((startDelay instanceof Integer) ? (Integer)startDelay : (Long)startDelay));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CoordinateBounds {
    private @NonNull Map<String, Object> southwest;
    public @NonNull Map<String, Object> getSouthwest() { return southwest; }
    public void setSouthwest(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"southwest\" is null.");
      }
      this.southwest = setterArg;
    }

    private @NonNull Map<String, Object> northeast;
    public @NonNull Map<String, Object> getNortheast() { return northeast; }
    public void setNortheast(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"northeast\" is null.");
      }
      this.northeast = setterArg;
    }

    private @NonNull Boolean infiniteBounds;
    public @NonNull Boolean getInfiniteBounds() { return infiniteBounds; }
    public void setInfiniteBounds(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"infiniteBounds\" is null.");
      }
      this.infiniteBounds = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private CoordinateBounds() {}
    public static final class Builder {
      private @Nullable Map<String, Object> southwest;
      public @NonNull Builder setSouthwest(@NonNull Map<String, Object> setterArg) {
        this.southwest = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> northeast;
      public @NonNull Builder setNortheast(@NonNull Map<String, Object> setterArg) {
        this.northeast = setterArg;
        return this;
      }
      private @Nullable Boolean infiniteBounds;
      public @NonNull Builder setInfiniteBounds(@NonNull Boolean setterArg) {
        this.infiniteBounds = setterArg;
        return this;
      }
      public @NonNull CoordinateBounds build() {
        CoordinateBounds pigeonReturn = new CoordinateBounds();
        pigeonReturn.setSouthwest(southwest);
        pigeonReturn.setNortheast(northeast);
        pigeonReturn.setInfiniteBounds(infiniteBounds);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("southwest", southwest);
      toMapResult.put("northeast", northeast);
      toMapResult.put("infiniteBounds", infiniteBounds);
      return toMapResult;
    }
    static @NonNull CoordinateBounds fromMap(@NonNull Map<String, Object> map) {
      CoordinateBounds pigeonResult = new CoordinateBounds();
      Object southwest = map.get("southwest");
      pigeonResult.setSouthwest((Map<String, Object>)southwest);
      Object northeast = map.get("northeast");
      pigeonResult.setNortheast((Map<String, Object>)northeast);
      Object infiniteBounds = map.get("infiniteBounds");
      pigeonResult.setInfiniteBounds((Boolean)infiniteBounds);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MapDebugOptions {
    private @NonNull MapDebugOptionsData data;
    public @NonNull MapDebugOptionsData getData() { return data; }
    public void setData(@NonNull MapDebugOptionsData setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private MapDebugOptions() {}
    public static final class Builder {
      private @Nullable MapDebugOptionsData data;
      public @NonNull Builder setData(@NonNull MapDebugOptionsData setterArg) {
        this.data = setterArg;
        return this;
      }
      public @NonNull MapDebugOptions build() {
        MapDebugOptions pigeonReturn = new MapDebugOptions();
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("data", data == null ? null : data.index);
      return toMapResult;
    }
    static @NonNull MapDebugOptions fromMap(@NonNull Map<String, Object> map) {
      MapDebugOptions pigeonResult = new MapDebugOptions();
      Object data = map.get("data");
      pigeonResult.setData(data == null ? null : MapDebugOptionsData.values()[(int)data]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GlyphsRasterizationOptions {
    private @NonNull GlyphsRasterizationMode rasterizationMode;
    public @NonNull GlyphsRasterizationMode getRasterizationMode() { return rasterizationMode; }
    public void setRasterizationMode(@NonNull GlyphsRasterizationMode setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"rasterizationMode\" is null.");
      }
      this.rasterizationMode = setterArg;
    }

    private @Nullable String fontFamily;
    public @Nullable String getFontFamily() { return fontFamily; }
    public void setFontFamily(@Nullable String setterArg) {
      this.fontFamily = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private GlyphsRasterizationOptions() {}
    public static final class Builder {
      private @Nullable GlyphsRasterizationMode rasterizationMode;
      public @NonNull Builder setRasterizationMode(@NonNull GlyphsRasterizationMode setterArg) {
        this.rasterizationMode = setterArg;
        return this;
      }
      private @Nullable String fontFamily;
      public @NonNull Builder setFontFamily(@Nullable String setterArg) {
        this.fontFamily = setterArg;
        return this;
      }
      public @NonNull GlyphsRasterizationOptions build() {
        GlyphsRasterizationOptions pigeonReturn = new GlyphsRasterizationOptions();
        pigeonReturn.setRasterizationMode(rasterizationMode);
        pigeonReturn.setFontFamily(fontFamily);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("rasterizationMode", rasterizationMode == null ? null : rasterizationMode.index);
      toMapResult.put("fontFamily", fontFamily);
      return toMapResult;
    }
    static @NonNull GlyphsRasterizationOptions fromMap(@NonNull Map<String, Object> map) {
      GlyphsRasterizationOptions pigeonResult = new GlyphsRasterizationOptions();
      Object rasterizationMode = map.get("rasterizationMode");
      pigeonResult.setRasterizationMode(rasterizationMode == null ? null : GlyphsRasterizationMode.values()[(int)rasterizationMode]);
      Object fontFamily = map.get("fontFamily");
      pigeonResult.setFontFamily((String)fontFamily);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MapMemoryBudgetInMegabytes {
    private @NonNull Long size;
    public @NonNull Long getSize() { return size; }
    public void setSize(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"size\" is null.");
      }
      this.size = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private MapMemoryBudgetInMegabytes() {}
    public static final class Builder {
      private @Nullable Long size;
      public @NonNull Builder setSize(@NonNull Long setterArg) {
        this.size = setterArg;
        return this;
      }
      public @NonNull MapMemoryBudgetInMegabytes build() {
        MapMemoryBudgetInMegabytes pigeonReturn = new MapMemoryBudgetInMegabytes();
        pigeonReturn.setSize(size);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("size", size);
      return toMapResult;
    }
    static @NonNull MapMemoryBudgetInMegabytes fromMap(@NonNull Map<String, Object> map) {
      MapMemoryBudgetInMegabytes pigeonResult = new MapMemoryBudgetInMegabytes();
      Object size = map.get("size");
      pigeonResult.setSize((size == null) ? null : ((size instanceof Integer) ? (Integer)size : (Long)size));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MapMemoryBudgetInTiles {
    private @NonNull Long size;
    public @NonNull Long getSize() { return size; }
    public void setSize(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"size\" is null.");
      }
      this.size = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private MapMemoryBudgetInTiles() {}
    public static final class Builder {
      private @Nullable Long size;
      public @NonNull Builder setSize(@NonNull Long setterArg) {
        this.size = setterArg;
        return this;
      }
      public @NonNull MapMemoryBudgetInTiles build() {
        MapMemoryBudgetInTiles pigeonReturn = new MapMemoryBudgetInTiles();
        pigeonReturn.setSize(size);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("size", size);
      return toMapResult;
    }
    static @NonNull MapMemoryBudgetInTiles fromMap(@NonNull Map<String, Object> map) {
      MapMemoryBudgetInTiles pigeonResult = new MapMemoryBudgetInTiles();
      Object size = map.get("size");
      pigeonResult.setSize((size == null) ? null : ((size instanceof Integer) ? (Integer)size : (Long)size));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MapOptions {
    private @Nullable ContextMode contextMode;
    public @Nullable ContextMode getContextMode() { return contextMode; }
    public void setContextMode(@Nullable ContextMode setterArg) {
      this.contextMode = setterArg;
    }

    private @Nullable ConstrainMode constrainMode;
    public @Nullable ConstrainMode getConstrainMode() { return constrainMode; }
    public void setConstrainMode(@Nullable ConstrainMode setterArg) {
      this.constrainMode = setterArg;
    }

    private @Nullable ViewportMode viewportMode;
    public @Nullable ViewportMode getViewportMode() { return viewportMode; }
    public void setViewportMode(@Nullable ViewportMode setterArg) {
      this.viewportMode = setterArg;
    }

    private @Nullable NorthOrientation orientation;
    public @Nullable NorthOrientation getOrientation() { return orientation; }
    public void setOrientation(@Nullable NorthOrientation setterArg) {
      this.orientation = setterArg;
    }

    private @Nullable Boolean crossSourceCollisions;
    public @Nullable Boolean getCrossSourceCollisions() { return crossSourceCollisions; }
    public void setCrossSourceCollisions(@Nullable Boolean setterArg) {
      this.crossSourceCollisions = setterArg;
    }

    private @Nullable Boolean optimizeForTerrain;
    public @Nullable Boolean getOptimizeForTerrain() { return optimizeForTerrain; }
    public void setOptimizeForTerrain(@Nullable Boolean setterArg) {
      this.optimizeForTerrain = setterArg;
    }

    private @Nullable Size size;
    public @Nullable Size getSize() { return size; }
    public void setSize(@Nullable Size setterArg) {
      this.size = setterArg;
    }

    private @NonNull Double pixelRatio;
    public @NonNull Double getPixelRatio() { return pixelRatio; }
    public void setPixelRatio(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"pixelRatio\" is null.");
      }
      this.pixelRatio = setterArg;
    }

    private @Nullable GlyphsRasterizationOptions glyphsRasterizationOptions;
    public @Nullable GlyphsRasterizationOptions getGlyphsRasterizationOptions() { return glyphsRasterizationOptions; }
    public void setGlyphsRasterizationOptions(@Nullable GlyphsRasterizationOptions setterArg) {
      this.glyphsRasterizationOptions = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private MapOptions() {}
    public static final class Builder {
      private @Nullable ContextMode contextMode;
      public @NonNull Builder setContextMode(@Nullable ContextMode setterArg) {
        this.contextMode = setterArg;
        return this;
      }
      private @Nullable ConstrainMode constrainMode;
      public @NonNull Builder setConstrainMode(@Nullable ConstrainMode setterArg) {
        this.constrainMode = setterArg;
        return this;
      }
      private @Nullable ViewportMode viewportMode;
      public @NonNull Builder setViewportMode(@Nullable ViewportMode setterArg) {
        this.viewportMode = setterArg;
        return this;
      }
      private @Nullable NorthOrientation orientation;
      public @NonNull Builder setOrientation(@Nullable NorthOrientation setterArg) {
        this.orientation = setterArg;
        return this;
      }
      private @Nullable Boolean crossSourceCollisions;
      public @NonNull Builder setCrossSourceCollisions(@Nullable Boolean setterArg) {
        this.crossSourceCollisions = setterArg;
        return this;
      }
      private @Nullable Boolean optimizeForTerrain;
      public @NonNull Builder setOptimizeForTerrain(@Nullable Boolean setterArg) {
        this.optimizeForTerrain = setterArg;
        return this;
      }
      private @Nullable Size size;
      public @NonNull Builder setSize(@Nullable Size setterArg) {
        this.size = setterArg;
        return this;
      }
      private @Nullable Double pixelRatio;
      public @NonNull Builder setPixelRatio(@NonNull Double setterArg) {
        this.pixelRatio = setterArg;
        return this;
      }
      private @Nullable GlyphsRasterizationOptions glyphsRasterizationOptions;
      public @NonNull Builder setGlyphsRasterizationOptions(@Nullable GlyphsRasterizationOptions setterArg) {
        this.glyphsRasterizationOptions = setterArg;
        return this;
      }
      public @NonNull MapOptions build() {
        MapOptions pigeonReturn = new MapOptions();
        pigeonReturn.setContextMode(contextMode);
        pigeonReturn.setConstrainMode(constrainMode);
        pigeonReturn.setViewportMode(viewportMode);
        pigeonReturn.setOrientation(orientation);
        pigeonReturn.setCrossSourceCollisions(crossSourceCollisions);
        pigeonReturn.setOptimizeForTerrain(optimizeForTerrain);
        pigeonReturn.setSize(size);
        pigeonReturn.setPixelRatio(pixelRatio);
        pigeonReturn.setGlyphsRasterizationOptions(glyphsRasterizationOptions);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("contextMode", contextMode == null ? null : contextMode.index);
      toMapResult.put("constrainMode", constrainMode == null ? null : constrainMode.index);
      toMapResult.put("viewportMode", viewportMode == null ? null : viewportMode.index);
      toMapResult.put("orientation", orientation == null ? null : orientation.index);
      toMapResult.put("crossSourceCollisions", crossSourceCollisions);
      toMapResult.put("optimizeForTerrain", optimizeForTerrain);
      toMapResult.put("size", (size == null) ? null : size.toMap());
      toMapResult.put("pixelRatio", pixelRatio);
      toMapResult.put("glyphsRasterizationOptions", (glyphsRasterizationOptions == null) ? null : glyphsRasterizationOptions.toMap());
      return toMapResult;
    }
    static @NonNull MapOptions fromMap(@NonNull Map<String, Object> map) {
      MapOptions pigeonResult = new MapOptions();
      Object contextMode = map.get("contextMode");
      pigeonResult.setContextMode(contextMode == null ? null : ContextMode.values()[(int)contextMode]);
      Object constrainMode = map.get("constrainMode");
      pigeonResult.setConstrainMode(constrainMode == null ? null : ConstrainMode.values()[(int)constrainMode]);
      Object viewportMode = map.get("viewportMode");
      pigeonResult.setViewportMode(viewportMode == null ? null : ViewportMode.values()[(int)viewportMode]);
      Object orientation = map.get("orientation");
      pigeonResult.setOrientation(orientation == null ? null : NorthOrientation.values()[(int)orientation]);
      Object crossSourceCollisions = map.get("crossSourceCollisions");
      pigeonResult.setCrossSourceCollisions((Boolean)crossSourceCollisions);
      Object optimizeForTerrain = map.get("optimizeForTerrain");
      pigeonResult.setOptimizeForTerrain((Boolean)optimizeForTerrain);
      Object size = map.get("size");
      pigeonResult.setSize((size == null) ? null : Size.fromMap((Map)size));
      Object pixelRatio = map.get("pixelRatio");
      pigeonResult.setPixelRatio((Double)pixelRatio);
      Object glyphsRasterizationOptions = map.get("glyphsRasterizationOptions");
      pigeonResult.setGlyphsRasterizationOptions((glyphsRasterizationOptions == null) ? null : GlyphsRasterizationOptions.fromMap((Map)glyphsRasterizationOptions));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ScreenCoordinate {
    private @NonNull Double x;
    public @NonNull Double getX() { return x; }
    public void setX(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"x\" is null.");
      }
      this.x = setterArg;
    }

    private @NonNull Double y;
    public @NonNull Double getY() { return y; }
    public void setY(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"y\" is null.");
      }
      this.y = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ScreenCoordinate() {}
    public static final class Builder {
      private @Nullable Double x;
      public @NonNull Builder setX(@NonNull Double setterArg) {
        this.x = setterArg;
        return this;
      }
      private @Nullable Double y;
      public @NonNull Builder setY(@NonNull Double setterArg) {
        this.y = setterArg;
        return this;
      }
      public @NonNull ScreenCoordinate build() {
        ScreenCoordinate pigeonReturn = new ScreenCoordinate();
        pigeonReturn.setX(x);
        pigeonReturn.setY(y);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("x", x);
      toMapResult.put("y", y);
      return toMapResult;
    }
    static @NonNull ScreenCoordinate fromMap(@NonNull Map<String, Object> map) {
      ScreenCoordinate pigeonResult = new ScreenCoordinate();
      Object x = map.get("x");
      pigeonResult.setX((Double)x);
      Object y = map.get("y");
      pigeonResult.setY((Double)y);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ScreenBox {
    private @NonNull ScreenCoordinate min;
    public @NonNull ScreenCoordinate getMin() { return min; }
    public void setMin(@NonNull ScreenCoordinate setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"min\" is null.");
      }
      this.min = setterArg;
    }

    private @NonNull ScreenCoordinate max;
    public @NonNull ScreenCoordinate getMax() { return max; }
    public void setMax(@NonNull ScreenCoordinate setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"max\" is null.");
      }
      this.max = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ScreenBox() {}
    public static final class Builder {
      private @Nullable ScreenCoordinate min;
      public @NonNull Builder setMin(@NonNull ScreenCoordinate setterArg) {
        this.min = setterArg;
        return this;
      }
      private @Nullable ScreenCoordinate max;
      public @NonNull Builder setMax(@NonNull ScreenCoordinate setterArg) {
        this.max = setterArg;
        return this;
      }
      public @NonNull ScreenBox build() {
        ScreenBox pigeonReturn = new ScreenBox();
        pigeonReturn.setMin(min);
        pigeonReturn.setMax(max);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("min", (min == null) ? null : min.toMap());
      toMapResult.put("max", (max == null) ? null : max.toMap());
      return toMapResult;
    }
    static @NonNull ScreenBox fromMap(@NonNull Map<String, Object> map) {
      ScreenBox pigeonResult = new ScreenBox();
      Object min = map.get("min");
      pigeonResult.setMin((min == null) ? null : ScreenCoordinate.fromMap((Map)min));
      Object max = map.get("max");
      pigeonResult.setMax((max == null) ? null : ScreenCoordinate.fromMap((Map)max));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CoordinateBoundsZoom {
    private @NonNull CoordinateBounds bounds;
    public @NonNull CoordinateBounds getBounds() { return bounds; }
    public void setBounds(@NonNull CoordinateBounds setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bounds\" is null.");
      }
      this.bounds = setterArg;
    }

    private @NonNull Double zoom;
    public @NonNull Double getZoom() { return zoom; }
    public void setZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zoom\" is null.");
      }
      this.zoom = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private CoordinateBoundsZoom() {}
    public static final class Builder {
      private @Nullable CoordinateBounds bounds;
      public @NonNull Builder setBounds(@NonNull CoordinateBounds setterArg) {
        this.bounds = setterArg;
        return this;
      }
      private @Nullable Double zoom;
      public @NonNull Builder setZoom(@NonNull Double setterArg) {
        this.zoom = setterArg;
        return this;
      }
      public @NonNull CoordinateBoundsZoom build() {
        CoordinateBoundsZoom pigeonReturn = new CoordinateBoundsZoom();
        pigeonReturn.setBounds(bounds);
        pigeonReturn.setZoom(zoom);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("bounds", (bounds == null) ? null : bounds.toMap());
      toMapResult.put("zoom", zoom);
      return toMapResult;
    }
    static @NonNull CoordinateBoundsZoom fromMap(@NonNull Map<String, Object> map) {
      CoordinateBoundsZoom pigeonResult = new CoordinateBoundsZoom();
      Object bounds = map.get("bounds");
      pigeonResult.setBounds((bounds == null) ? null : CoordinateBounds.fromMap((Map)bounds));
      Object zoom = map.get("zoom");
      pigeonResult.setZoom((Double)zoom);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Size {
    private @NonNull Double width;
    public @NonNull Double getWidth() { return width; }
    public void setWidth(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Double height;
    public @NonNull Double getHeight() { return height; }
    public void setHeight(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private Size() {}
    public static final class Builder {
      private @Nullable Double width;
      public @NonNull Builder setWidth(@NonNull Double setterArg) {
        this.width = setterArg;
        return this;
      }
      private @Nullable Double height;
      public @NonNull Builder setHeight(@NonNull Double setterArg) {
        this.height = setterArg;
        return this;
      }
      public @NonNull Size build() {
        Size pigeonReturn = new Size();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("width", width);
      toMapResult.put("height", height);
      return toMapResult;
    }
    static @NonNull Size fromMap(@NonNull Map<String, Object> map) {
      Size pigeonResult = new Size();
      Object width = map.get("width");
      pigeonResult.setWidth((Double)width);
      Object height = map.get("height");
      pigeonResult.setHeight((Double)height);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RenderedQueryOptions {
    private @Nullable List<String> layerIds;
    public @Nullable List<String> getLayerIds() { return layerIds; }
    public void setLayerIds(@Nullable List<String> setterArg) {
      this.layerIds = setterArg;
    }

    private @Nullable String filter;
    public @Nullable String getFilter() { return filter; }
    public void setFilter(@Nullable String setterArg) {
      this.filter = setterArg;
    }

    public static final class Builder {
      private @Nullable List<String> layerIds;
      public @NonNull Builder setLayerIds(@Nullable List<String> setterArg) {
        this.layerIds = setterArg;
        return this;
      }
      private @Nullable String filter;
      public @NonNull Builder setFilter(@Nullable String setterArg) {
        this.filter = setterArg;
        return this;
      }
      public @NonNull RenderedQueryOptions build() {
        RenderedQueryOptions pigeonReturn = new RenderedQueryOptions();
        pigeonReturn.setLayerIds(layerIds);
        pigeonReturn.setFilter(filter);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("layerIds", layerIds);
      toMapResult.put("filter", filter);
      return toMapResult;
    }
    static @NonNull RenderedQueryOptions fromMap(@NonNull Map<String, Object> map) {
      RenderedQueryOptions pigeonResult = new RenderedQueryOptions();
      Object layerIds = map.get("layerIds");
      pigeonResult.setLayerIds((List<String>)layerIds);
      Object filter = map.get("filter");
      pigeonResult.setFilter((String)filter);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SourceQueryOptions {
    private @Nullable List<String> sourceLayerIds;
    public @Nullable List<String> getSourceLayerIds() { return sourceLayerIds; }
    public void setSourceLayerIds(@Nullable List<String> setterArg) {
      this.sourceLayerIds = setterArg;
    }

    private @NonNull String filter;
    public @NonNull String getFilter() { return filter; }
    public void setFilter(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filter\" is null.");
      }
      this.filter = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SourceQueryOptions() {}
    public static final class Builder {
      private @Nullable List<String> sourceLayerIds;
      public @NonNull Builder setSourceLayerIds(@Nullable List<String> setterArg) {
        this.sourceLayerIds = setterArg;
        return this;
      }
      private @Nullable String filter;
      public @NonNull Builder setFilter(@NonNull String setterArg) {
        this.filter = setterArg;
        return this;
      }
      public @NonNull SourceQueryOptions build() {
        SourceQueryOptions pigeonReturn = new SourceQueryOptions();
        pigeonReturn.setSourceLayerIds(sourceLayerIds);
        pigeonReturn.setFilter(filter);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sourceLayerIds", sourceLayerIds);
      toMapResult.put("filter", filter);
      return toMapResult;
    }
    static @NonNull SourceQueryOptions fromMap(@NonNull Map<String, Object> map) {
      SourceQueryOptions pigeonResult = new SourceQueryOptions();
      Object sourceLayerIds = map.get("sourceLayerIds");
      pigeonResult.setSourceLayerIds((List<String>)sourceLayerIds);
      Object filter = map.get("filter");
      pigeonResult.setFilter((String)filter);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class FeatureExtensionValue {
    private @Nullable String value;
    public @Nullable String getValue() { return value; }
    public void setValue(@Nullable String setterArg) {
      this.value = setterArg;
    }

    private @Nullable List<Map<String, Object>> featureCollection;
    public @Nullable List<Map<String, Object>> getFeatureCollection() { return featureCollection; }
    public void setFeatureCollection(@Nullable List<Map<String, Object>> setterArg) {
      this.featureCollection = setterArg;
    }

    public static final class Builder {
      private @Nullable String value;
      public @NonNull Builder setValue(@Nullable String setterArg) {
        this.value = setterArg;
        return this;
      }
      private @Nullable List<Map<String, Object>> featureCollection;
      public @NonNull Builder setFeatureCollection(@Nullable List<Map<String, Object>> setterArg) {
        this.featureCollection = setterArg;
        return this;
      }
      public @NonNull FeatureExtensionValue build() {
        FeatureExtensionValue pigeonReturn = new FeatureExtensionValue();
        pigeonReturn.setValue(value);
        pigeonReturn.setFeatureCollection(featureCollection);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("featureCollection", featureCollection);
      return toMapResult;
    }
    static @NonNull FeatureExtensionValue fromMap(@NonNull Map<String, Object> map) {
      FeatureExtensionValue pigeonResult = new FeatureExtensionValue();
      Object value = map.get("value");
      pigeonResult.setValue((String)value);
      Object featureCollection = map.get("featureCollection");
      pigeonResult.setFeatureCollection((List<Map<String, Object>>)featureCollection);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LayerPosition {
    private @Nullable String above;
    public @Nullable String getAbove() { return above; }
    public void setAbove(@Nullable String setterArg) {
      this.above = setterArg;
    }

    private @Nullable String below;
    public @Nullable String getBelow() { return below; }
    public void setBelow(@Nullable String setterArg) {
      this.below = setterArg;
    }

    private @Nullable Long at;
    public @Nullable Long getAt() { return at; }
    public void setAt(@Nullable Long setterArg) {
      this.at = setterArg;
    }

    public static final class Builder {
      private @Nullable String above;
      public @NonNull Builder setAbove(@Nullable String setterArg) {
        this.above = setterArg;
        return this;
      }
      private @Nullable String below;
      public @NonNull Builder setBelow(@Nullable String setterArg) {
        this.below = setterArg;
        return this;
      }
      private @Nullable Long at;
      public @NonNull Builder setAt(@Nullable Long setterArg) {
        this.at = setterArg;
        return this;
      }
      public @NonNull LayerPosition build() {
        LayerPosition pigeonReturn = new LayerPosition();
        pigeonReturn.setAbove(above);
        pigeonReturn.setBelow(below);
        pigeonReturn.setAt(at);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("above", above);
      toMapResult.put("below", below);
      toMapResult.put("at", at);
      return toMapResult;
    }
    static @NonNull LayerPosition fromMap(@NonNull Map<String, Object> map) {
      LayerPosition pigeonResult = new LayerPosition();
      Object above = map.get("above");
      pigeonResult.setAbove((String)above);
      Object below = map.get("below");
      pigeonResult.setBelow((String)below);
      Object at = map.get("at");
      pigeonResult.setAt((at == null) ? null : ((at instanceof Integer) ? (Integer)at : (Long)at));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QueriedFeature {
    private @NonNull Map<String, Object> feature;
    public @NonNull Map<String, Object> getFeature() { return feature; }
    public void setFeature(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"feature\" is null.");
      }
      this.feature = setterArg;
    }

    private @NonNull String source;
    public @NonNull String getSource() { return source; }
    public void setSource(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"source\" is null.");
      }
      this.source = setterArg;
    }

    private @Nullable String sourceLayer;
    public @Nullable String getSourceLayer() { return sourceLayer; }
    public void setSourceLayer(@Nullable String setterArg) {
      this.sourceLayer = setterArg;
    }

    private @NonNull String state;
    public @NonNull String getState() { return state; }
    public void setState(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private QueriedFeature() {}
    public static final class Builder {
      private @Nullable Map<String, Object> feature;
      public @NonNull Builder setFeature(@NonNull Map<String, Object> setterArg) {
        this.feature = setterArg;
        return this;
      }
      private @Nullable String source;
      public @NonNull Builder setSource(@NonNull String setterArg) {
        this.source = setterArg;
        return this;
      }
      private @Nullable String sourceLayer;
      public @NonNull Builder setSourceLayer(@Nullable String setterArg) {
        this.sourceLayer = setterArg;
        return this;
      }
      private @Nullable String state;
      public @NonNull Builder setState(@NonNull String setterArg) {
        this.state = setterArg;
        return this;
      }
      public @NonNull QueriedFeature build() {
        QueriedFeature pigeonReturn = new QueriedFeature();
        pigeonReturn.setFeature(feature);
        pigeonReturn.setSource(source);
        pigeonReturn.setSourceLayer(sourceLayer);
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("feature", feature);
      toMapResult.put("source", source);
      toMapResult.put("sourceLayer", sourceLayer);
      toMapResult.put("state", state);
      return toMapResult;
    }
    static @NonNull QueriedFeature fromMap(@NonNull Map<String, Object> map) {
      QueriedFeature pigeonResult = new QueriedFeature();
      Object feature = map.get("feature");
      pigeonResult.setFeature((Map<String, Object>)feature);
      Object source = map.get("source");
      pigeonResult.setSource((String)source);
      Object sourceLayer = map.get("sourceLayer");
      pigeonResult.setSourceLayer((String)sourceLayer);
      Object state = map.get("state");
      pigeonResult.setState((String)state);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RenderedQueryGeometry {
    private @NonNull String value;
    public @NonNull String getValue() { return value; }
    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    private @NonNull Type type;
    public @NonNull Type getType() { return type; }
    public void setType(@NonNull Type setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private RenderedQueryGeometry() {}
    public static final class Builder {
      private @Nullable String value;
      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }
      private @Nullable Type type;
      public @NonNull Builder setType(@NonNull Type setterArg) {
        this.type = setterArg;
        return this;
      }
      public @NonNull RenderedQueryGeometry build() {
        RenderedQueryGeometry pigeonReturn = new RenderedQueryGeometry();
        pigeonReturn.setValue(value);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("type", type == null ? null : type.index);
      return toMapResult;
    }
    static @NonNull RenderedQueryGeometry fromMap(@NonNull Map<String, Object> map) {
      RenderedQueryGeometry pigeonResult = new RenderedQueryGeometry();
      Object value = map.get("value");
      pigeonResult.setValue((String)value);
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : Type.values()[(int)type]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OfflineRegionGeometryDefinition {
    private @NonNull String styleURL;
    public @NonNull String getStyleURL() { return styleURL; }
    public void setStyleURL(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"styleURL\" is null.");
      }
      this.styleURL = setterArg;
    }

    private @NonNull Map<String, Object> geometry;
    public @NonNull Map<String, Object> getGeometry() { return geometry; }
    public void setGeometry(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"geometry\" is null.");
      }
      this.geometry = setterArg;
    }

    private @NonNull Double minZoom;
    public @NonNull Double getMinZoom() { return minZoom; }
    public void setMinZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"minZoom\" is null.");
      }
      this.minZoom = setterArg;
    }

    private @NonNull Double maxZoom;
    public @NonNull Double getMaxZoom() { return maxZoom; }
    public void setMaxZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxZoom\" is null.");
      }
      this.maxZoom = setterArg;
    }

    private @NonNull Double pixelRatio;
    public @NonNull Double getPixelRatio() { return pixelRatio; }
    public void setPixelRatio(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"pixelRatio\" is null.");
      }
      this.pixelRatio = setterArg;
    }

    private @NonNull GlyphsRasterizationMode glyphsRasterizationMode;
    public @NonNull GlyphsRasterizationMode getGlyphsRasterizationMode() { return glyphsRasterizationMode; }
    public void setGlyphsRasterizationMode(@NonNull GlyphsRasterizationMode setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"glyphsRasterizationMode\" is null.");
      }
      this.glyphsRasterizationMode = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private OfflineRegionGeometryDefinition() {}
    public static final class Builder {
      private @Nullable String styleURL;
      public @NonNull Builder setStyleURL(@NonNull String setterArg) {
        this.styleURL = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> geometry;
      public @NonNull Builder setGeometry(@NonNull Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }
      private @Nullable Double minZoom;
      public @NonNull Builder setMinZoom(@NonNull Double setterArg) {
        this.minZoom = setterArg;
        return this;
      }
      private @Nullable Double maxZoom;
      public @NonNull Builder setMaxZoom(@NonNull Double setterArg) {
        this.maxZoom = setterArg;
        return this;
      }
      private @Nullable Double pixelRatio;
      public @NonNull Builder setPixelRatio(@NonNull Double setterArg) {
        this.pixelRatio = setterArg;
        return this;
      }
      private @Nullable GlyphsRasterizationMode glyphsRasterizationMode;
      public @NonNull Builder setGlyphsRasterizationMode(@NonNull GlyphsRasterizationMode setterArg) {
        this.glyphsRasterizationMode = setterArg;
        return this;
      }
      public @NonNull OfflineRegionGeometryDefinition build() {
        OfflineRegionGeometryDefinition pigeonReturn = new OfflineRegionGeometryDefinition();
        pigeonReturn.setStyleURL(styleURL);
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setMinZoom(minZoom);
        pigeonReturn.setMaxZoom(maxZoom);
        pigeonReturn.setPixelRatio(pixelRatio);
        pigeonReturn.setGlyphsRasterizationMode(glyphsRasterizationMode);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("styleURL", styleURL);
      toMapResult.put("geometry", geometry);
      toMapResult.put("minZoom", minZoom);
      toMapResult.put("maxZoom", maxZoom);
      toMapResult.put("pixelRatio", pixelRatio);
      toMapResult.put("glyphsRasterizationMode", glyphsRasterizationMode == null ? null : glyphsRasterizationMode.index);
      return toMapResult;
    }
    static @NonNull OfflineRegionGeometryDefinition fromMap(@NonNull Map<String, Object> map) {
      OfflineRegionGeometryDefinition pigeonResult = new OfflineRegionGeometryDefinition();
      Object styleURL = map.get("styleURL");
      pigeonResult.setStyleURL((String)styleURL);
      Object geometry = map.get("geometry");
      pigeonResult.setGeometry((Map<String, Object>)geometry);
      Object minZoom = map.get("minZoom");
      pigeonResult.setMinZoom((Double)minZoom);
      Object maxZoom = map.get("maxZoom");
      pigeonResult.setMaxZoom((Double)maxZoom);
      Object pixelRatio = map.get("pixelRatio");
      pigeonResult.setPixelRatio((Double)pixelRatio);
      Object glyphsRasterizationMode = map.get("glyphsRasterizationMode");
      pigeonResult.setGlyphsRasterizationMode(glyphsRasterizationMode == null ? null : GlyphsRasterizationMode.values()[(int)glyphsRasterizationMode]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OfflineRegionTilePyramidDefinition {
    private @NonNull String styleURL;
    public @NonNull String getStyleURL() { return styleURL; }
    public void setStyleURL(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"styleURL\" is null.");
      }
      this.styleURL = setterArg;
    }

    private @NonNull CoordinateBounds bounds;
    public @NonNull CoordinateBounds getBounds() { return bounds; }
    public void setBounds(@NonNull CoordinateBounds setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bounds\" is null.");
      }
      this.bounds = setterArg;
    }

    private @NonNull Double minZoom;
    public @NonNull Double getMinZoom() { return minZoom; }
    public void setMinZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"minZoom\" is null.");
      }
      this.minZoom = setterArg;
    }

    private @NonNull Double maxZoom;
    public @NonNull Double getMaxZoom() { return maxZoom; }
    public void setMaxZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxZoom\" is null.");
      }
      this.maxZoom = setterArg;
    }

    private @NonNull Double pixelRatio;
    public @NonNull Double getPixelRatio() { return pixelRatio; }
    public void setPixelRatio(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"pixelRatio\" is null.");
      }
      this.pixelRatio = setterArg;
    }

    private @NonNull GlyphsRasterizationMode glyphsRasterizationMode;
    public @NonNull GlyphsRasterizationMode getGlyphsRasterizationMode() { return glyphsRasterizationMode; }
    public void setGlyphsRasterizationMode(@NonNull GlyphsRasterizationMode setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"glyphsRasterizationMode\" is null.");
      }
      this.glyphsRasterizationMode = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private OfflineRegionTilePyramidDefinition() {}
    public static final class Builder {
      private @Nullable String styleURL;
      public @NonNull Builder setStyleURL(@NonNull String setterArg) {
        this.styleURL = setterArg;
        return this;
      }
      private @Nullable CoordinateBounds bounds;
      public @NonNull Builder setBounds(@NonNull CoordinateBounds setterArg) {
        this.bounds = setterArg;
        return this;
      }
      private @Nullable Double minZoom;
      public @NonNull Builder setMinZoom(@NonNull Double setterArg) {
        this.minZoom = setterArg;
        return this;
      }
      private @Nullable Double maxZoom;
      public @NonNull Builder setMaxZoom(@NonNull Double setterArg) {
        this.maxZoom = setterArg;
        return this;
      }
      private @Nullable Double pixelRatio;
      public @NonNull Builder setPixelRatio(@NonNull Double setterArg) {
        this.pixelRatio = setterArg;
        return this;
      }
      private @Nullable GlyphsRasterizationMode glyphsRasterizationMode;
      public @NonNull Builder setGlyphsRasterizationMode(@NonNull GlyphsRasterizationMode setterArg) {
        this.glyphsRasterizationMode = setterArg;
        return this;
      }
      public @NonNull OfflineRegionTilePyramidDefinition build() {
        OfflineRegionTilePyramidDefinition pigeonReturn = new OfflineRegionTilePyramidDefinition();
        pigeonReturn.setStyleURL(styleURL);
        pigeonReturn.setBounds(bounds);
        pigeonReturn.setMinZoom(minZoom);
        pigeonReturn.setMaxZoom(maxZoom);
        pigeonReturn.setPixelRatio(pixelRatio);
        pigeonReturn.setGlyphsRasterizationMode(glyphsRasterizationMode);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("styleURL", styleURL);
      toMapResult.put("bounds", (bounds == null) ? null : bounds.toMap());
      toMapResult.put("minZoom", minZoom);
      toMapResult.put("maxZoom", maxZoom);
      toMapResult.put("pixelRatio", pixelRatio);
      toMapResult.put("glyphsRasterizationMode", glyphsRasterizationMode == null ? null : glyphsRasterizationMode.index);
      return toMapResult;
    }
    static @NonNull OfflineRegionTilePyramidDefinition fromMap(@NonNull Map<String, Object> map) {
      OfflineRegionTilePyramidDefinition pigeonResult = new OfflineRegionTilePyramidDefinition();
      Object styleURL = map.get("styleURL");
      pigeonResult.setStyleURL((String)styleURL);
      Object bounds = map.get("bounds");
      pigeonResult.setBounds((bounds == null) ? null : CoordinateBounds.fromMap((Map)bounds));
      Object minZoom = map.get("minZoom");
      pigeonResult.setMinZoom((Double)minZoom);
      Object maxZoom = map.get("maxZoom");
      pigeonResult.setMaxZoom((Double)maxZoom);
      Object pixelRatio = map.get("pixelRatio");
      pigeonResult.setPixelRatio((Double)pixelRatio);
      Object glyphsRasterizationMode = map.get("glyphsRasterizationMode");
      pigeonResult.setGlyphsRasterizationMode(glyphsRasterizationMode == null ? null : GlyphsRasterizationMode.values()[(int)glyphsRasterizationMode]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ProjectedMeters {
    private @NonNull Double northing;
    public @NonNull Double getNorthing() { return northing; }
    public void setNorthing(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"northing\" is null.");
      }
      this.northing = setterArg;
    }

    private @NonNull Double easting;
    public @NonNull Double getEasting() { return easting; }
    public void setEasting(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"easting\" is null.");
      }
      this.easting = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ProjectedMeters() {}
    public static final class Builder {
      private @Nullable Double northing;
      public @NonNull Builder setNorthing(@NonNull Double setterArg) {
        this.northing = setterArg;
        return this;
      }
      private @Nullable Double easting;
      public @NonNull Builder setEasting(@NonNull Double setterArg) {
        this.easting = setterArg;
        return this;
      }
      public @NonNull ProjectedMeters build() {
        ProjectedMeters pigeonReturn = new ProjectedMeters();
        pigeonReturn.setNorthing(northing);
        pigeonReturn.setEasting(easting);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("northing", northing);
      toMapResult.put("easting", easting);
      return toMapResult;
    }
    static @NonNull ProjectedMeters fromMap(@NonNull Map<String, Object> map) {
      ProjectedMeters pigeonResult = new ProjectedMeters();
      Object northing = map.get("northing");
      pigeonResult.setNorthing((Double)northing);
      Object easting = map.get("easting");
      pigeonResult.setEasting((Double)easting);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MercatorCoordinate {
    private @NonNull Double x;
    public @NonNull Double getX() { return x; }
    public void setX(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"x\" is null.");
      }
      this.x = setterArg;
    }

    private @NonNull Double y;
    public @NonNull Double getY() { return y; }
    public void setY(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"y\" is null.");
      }
      this.y = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private MercatorCoordinate() {}
    public static final class Builder {
      private @Nullable Double x;
      public @NonNull Builder setX(@NonNull Double setterArg) {
        this.x = setterArg;
        return this;
      }
      private @Nullable Double y;
      public @NonNull Builder setY(@NonNull Double setterArg) {
        this.y = setterArg;
        return this;
      }
      public @NonNull MercatorCoordinate build() {
        MercatorCoordinate pigeonReturn = new MercatorCoordinate();
        pigeonReturn.setX(x);
        pigeonReturn.setY(y);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("x", x);
      toMapResult.put("y", y);
      return toMapResult;
    }
    static @NonNull MercatorCoordinate fromMap(@NonNull Map<String, Object> map) {
      MercatorCoordinate pigeonResult = new MercatorCoordinate();
      Object x = map.get("x");
      pigeonResult.setX((Double)x);
      Object y = map.get("y");
      pigeonResult.setY((Double)y);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ResourceOptions {
    private @NonNull String accessToken;
    public @NonNull String getAccessToken() { return accessToken; }
    public void setAccessToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accessToken\" is null.");
      }
      this.accessToken = setterArg;
    }

    private @Nullable String baseURL;
    public @Nullable String getBaseURL() { return baseURL; }
    public void setBaseURL(@Nullable String setterArg) {
      this.baseURL = setterArg;
    }

    private @Nullable String dataPath;
    public @Nullable String getDataPath() { return dataPath; }
    public void setDataPath(@Nullable String setterArg) {
      this.dataPath = setterArg;
    }

    private @Nullable String assetPath;
    public @Nullable String getAssetPath() { return assetPath; }
    public void setAssetPath(@Nullable String setterArg) {
      this.assetPath = setterArg;
    }

    private @Nullable TileStoreUsageMode tileStoreUsageMode;
    public @Nullable TileStoreUsageMode getTileStoreUsageMode() { return tileStoreUsageMode; }
    public void setTileStoreUsageMode(@Nullable TileStoreUsageMode setterArg) {
      this.tileStoreUsageMode = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ResourceOptions() {}
    public static final class Builder {
      private @Nullable String accessToken;
      public @NonNull Builder setAccessToken(@NonNull String setterArg) {
        this.accessToken = setterArg;
        return this;
      }
      private @Nullable String baseURL;
      public @NonNull Builder setBaseURL(@Nullable String setterArg) {
        this.baseURL = setterArg;
        return this;
      }
      private @Nullable String dataPath;
      public @NonNull Builder setDataPath(@Nullable String setterArg) {
        this.dataPath = setterArg;
        return this;
      }
      private @Nullable String assetPath;
      public @NonNull Builder setAssetPath(@Nullable String setterArg) {
        this.assetPath = setterArg;
        return this;
      }
      private @Nullable TileStoreUsageMode tileStoreUsageMode;
      public @NonNull Builder setTileStoreUsageMode(@Nullable TileStoreUsageMode setterArg) {
        this.tileStoreUsageMode = setterArg;
        return this;
      }
      public @NonNull ResourceOptions build() {
        ResourceOptions pigeonReturn = new ResourceOptions();
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setBaseURL(baseURL);
        pigeonReturn.setDataPath(dataPath);
        pigeonReturn.setAssetPath(assetPath);
        pigeonReturn.setTileStoreUsageMode(tileStoreUsageMode);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("accessToken", accessToken);
      toMapResult.put("baseURL", baseURL);
      toMapResult.put("dataPath", dataPath);
      toMapResult.put("assetPath", assetPath);
      toMapResult.put("tileStoreUsageMode", tileStoreUsageMode == null ? null : tileStoreUsageMode.index);
      return toMapResult;
    }
    static @NonNull ResourceOptions fromMap(@NonNull Map<String, Object> map) {
      ResourceOptions pigeonResult = new ResourceOptions();
      Object accessToken = map.get("accessToken");
      pigeonResult.setAccessToken((String)accessToken);
      Object baseURL = map.get("baseURL");
      pigeonResult.setBaseURL((String)baseURL);
      Object dataPath = map.get("dataPath");
      pigeonResult.setDataPath((String)dataPath);
      Object assetPath = map.get("assetPath");
      pigeonResult.setAssetPath((String)assetPath);
      Object tileStoreUsageMode = map.get("tileStoreUsageMode");
      pigeonResult.setTileStoreUsageMode(tileStoreUsageMode == null ? null : TileStoreUsageMode.values()[(int)tileStoreUsageMode]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StyleObjectInfo {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @NonNull String type;
    public @NonNull String getType() { return type; }
    public void setType(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private StyleObjectInfo() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String type;
      public @NonNull Builder setType(@NonNull String setterArg) {
        this.type = setterArg;
        return this;
      }
      public @NonNull StyleObjectInfo build() {
        StyleObjectInfo pigeonReturn = new StyleObjectInfo();
        pigeonReturn.setId(id);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("type", type);
      return toMapResult;
    }
    static @NonNull StyleObjectInfo fromMap(@NonNull Map<String, Object> map) {
      StyleObjectInfo pigeonResult = new StyleObjectInfo();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MbxImage {
    private @NonNull Long width;
    public @NonNull Long getWidth() { return width; }
    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long height;
    public @NonNull Long getHeight() { return height; }
    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    private @NonNull byte[] data;
    public @NonNull byte[] getData() { return data; }
    public void setData(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private MbxImage() {}
    public static final class Builder {
      private @Nullable Long width;
      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }
      private @Nullable Long height;
      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }
      private @Nullable byte[] data;
      public @NonNull Builder setData(@NonNull byte[] setterArg) {
        this.data = setterArg;
        return this;
      }
      public @NonNull MbxImage build() {
        MbxImage pigeonReturn = new MbxImage();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("width", width);
      toMapResult.put("height", height);
      toMapResult.put("data", data);
      return toMapResult;
    }
    static @NonNull MbxImage fromMap(@NonNull Map<String, Object> map) {
      MbxImage pigeonResult = new MbxImage();
      Object width = map.get("width");
      pigeonResult.setWidth((width == null) ? null : ((width instanceof Integer) ? (Integer)width : (Long)width));
      Object height = map.get("height");
      pigeonResult.setHeight((height == null) ? null : ((height instanceof Integer) ? (Integer)height : (Long)height));
      Object data = map.get("data");
      pigeonResult.setData((byte[])data);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ImageStretches {
    private @NonNull Double first;
    public @NonNull Double getFirst() { return first; }
    public void setFirst(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"first\" is null.");
      }
      this.first = setterArg;
    }

    private @NonNull Double second;
    public @NonNull Double getSecond() { return second; }
    public void setSecond(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"second\" is null.");
      }
      this.second = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ImageStretches() {}
    public static final class Builder {
      private @Nullable Double first;
      public @NonNull Builder setFirst(@NonNull Double setterArg) {
        this.first = setterArg;
        return this;
      }
      private @Nullable Double second;
      public @NonNull Builder setSecond(@NonNull Double setterArg) {
        this.second = setterArg;
        return this;
      }
      public @NonNull ImageStretches build() {
        ImageStretches pigeonReturn = new ImageStretches();
        pigeonReturn.setFirst(first);
        pigeonReturn.setSecond(second);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("first", first);
      toMapResult.put("second", second);
      return toMapResult;
    }
    static @NonNull ImageStretches fromMap(@NonNull Map<String, Object> map) {
      ImageStretches pigeonResult = new ImageStretches();
      Object first = map.get("first");
      pigeonResult.setFirst((Double)first);
      Object second = map.get("second");
      pigeonResult.setSecond((Double)second);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ImageContent {
    private @NonNull Double left;
    public @NonNull Double getLeft() { return left; }
    public void setLeft(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"left\" is null.");
      }
      this.left = setterArg;
    }

    private @NonNull Double top;
    public @NonNull Double getTop() { return top; }
    public void setTop(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"top\" is null.");
      }
      this.top = setterArg;
    }

    private @NonNull Double right;
    public @NonNull Double getRight() { return right; }
    public void setRight(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"right\" is null.");
      }
      this.right = setterArg;
    }

    private @NonNull Double bottom;
    public @NonNull Double getBottom() { return bottom; }
    public void setBottom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bottom\" is null.");
      }
      this.bottom = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ImageContent() {}
    public static final class Builder {
      private @Nullable Double left;
      public @NonNull Builder setLeft(@NonNull Double setterArg) {
        this.left = setterArg;
        return this;
      }
      private @Nullable Double top;
      public @NonNull Builder setTop(@NonNull Double setterArg) {
        this.top = setterArg;
        return this;
      }
      private @Nullable Double right;
      public @NonNull Builder setRight(@NonNull Double setterArg) {
        this.right = setterArg;
        return this;
      }
      private @Nullable Double bottom;
      public @NonNull Builder setBottom(@NonNull Double setterArg) {
        this.bottom = setterArg;
        return this;
      }
      public @NonNull ImageContent build() {
        ImageContent pigeonReturn = new ImageContent();
        pigeonReturn.setLeft(left);
        pigeonReturn.setTop(top);
        pigeonReturn.setRight(right);
        pigeonReturn.setBottom(bottom);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("left", left);
      toMapResult.put("top", top);
      toMapResult.put("right", right);
      toMapResult.put("bottom", bottom);
      return toMapResult;
    }
    static @NonNull ImageContent fromMap(@NonNull Map<String, Object> map) {
      ImageContent pigeonResult = new ImageContent();
      Object left = map.get("left");
      pigeonResult.setLeft((Double)left);
      Object top = map.get("top");
      pigeonResult.setTop((Double)top);
      Object right = map.get("right");
      pigeonResult.setRight((Double)right);
      Object bottom = map.get("bottom");
      pigeonResult.setBottom((Double)bottom);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TransitionOptions {
    private @Nullable Long duration;
    public @Nullable Long getDuration() { return duration; }
    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    private @Nullable Long delay;
    public @Nullable Long getDelay() { return delay; }
    public void setDelay(@Nullable Long setterArg) {
      this.delay = setterArg;
    }

    private @Nullable Boolean enablePlacementTransitions;
    public @Nullable Boolean getEnablePlacementTransitions() { return enablePlacementTransitions; }
    public void setEnablePlacementTransitions(@Nullable Boolean setterArg) {
      this.enablePlacementTransitions = setterArg;
    }

    public static final class Builder {
      private @Nullable Long duration;
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }
      private @Nullable Long delay;
      public @NonNull Builder setDelay(@Nullable Long setterArg) {
        this.delay = setterArg;
        return this;
      }
      private @Nullable Boolean enablePlacementTransitions;
      public @NonNull Builder setEnablePlacementTransitions(@Nullable Boolean setterArg) {
        this.enablePlacementTransitions = setterArg;
        return this;
      }
      public @NonNull TransitionOptions build() {
        TransitionOptions pigeonReturn = new TransitionOptions();
        pigeonReturn.setDuration(duration);
        pigeonReturn.setDelay(delay);
        pigeonReturn.setEnablePlacementTransitions(enablePlacementTransitions);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("duration", duration);
      toMapResult.put("delay", delay);
      toMapResult.put("enablePlacementTransitions", enablePlacementTransitions);
      return toMapResult;
    }
    static @NonNull TransitionOptions fromMap(@NonNull Map<String, Object> map) {
      TransitionOptions pigeonResult = new TransitionOptions();
      Object duration = map.get("duration");
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration));
      Object delay = map.get("delay");
      pigeonResult.setDelay((delay == null) ? null : ((delay instanceof Integer) ? (Integer)delay : (Long)delay));
      Object enablePlacementTransitions = map.get("enablePlacementTransitions");
      pigeonResult.setEnablePlacementTransitions((Boolean)enablePlacementTransitions);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CanonicalTileID {
    private @NonNull Long z;
    public @NonNull Long getZ() { return z; }
    public void setZ(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"z\" is null.");
      }
      this.z = setterArg;
    }

    private @NonNull Long x;
    public @NonNull Long getX() { return x; }
    public void setX(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"x\" is null.");
      }
      this.x = setterArg;
    }

    private @NonNull Long y;
    public @NonNull Long getY() { return y; }
    public void setY(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"y\" is null.");
      }
      this.y = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private CanonicalTileID() {}
    public static final class Builder {
      private @Nullable Long z;
      public @NonNull Builder setZ(@NonNull Long setterArg) {
        this.z = setterArg;
        return this;
      }
      private @Nullable Long x;
      public @NonNull Builder setX(@NonNull Long setterArg) {
        this.x = setterArg;
        return this;
      }
      private @Nullable Long y;
      public @NonNull Builder setY(@NonNull Long setterArg) {
        this.y = setterArg;
        return this;
      }
      public @NonNull CanonicalTileID build() {
        CanonicalTileID pigeonReturn = new CanonicalTileID();
        pigeonReturn.setZ(z);
        pigeonReturn.setX(x);
        pigeonReturn.setY(y);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("z", z);
      toMapResult.put("x", x);
      toMapResult.put("y", y);
      return toMapResult;
    }
    static @NonNull CanonicalTileID fromMap(@NonNull Map<String, Object> map) {
      CanonicalTileID pigeonResult = new CanonicalTileID();
      Object z = map.get("z");
      pigeonResult.setZ((z == null) ? null : ((z instanceof Integer) ? (Integer)z : (Long)z));
      Object x = map.get("x");
      pigeonResult.setX((x == null) ? null : ((x instanceof Integer) ? (Integer)x : (Long)x));
      Object y = map.get("y");
      pigeonResult.setY((y == null) ? null : ((y instanceof Integer) ? (Integer)y : (Long)y));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StylePropertyValue {
    private @NonNull String value;
    public @NonNull String getValue() { return value; }
    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    private @NonNull StylePropertyValueKind kind;
    public @NonNull StylePropertyValueKind getKind() { return kind; }
    public void setKind(@NonNull StylePropertyValueKind setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"kind\" is null.");
      }
      this.kind = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private StylePropertyValue() {}
    public static final class Builder {
      private @Nullable String value;
      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }
      private @Nullable StylePropertyValueKind kind;
      public @NonNull Builder setKind(@NonNull StylePropertyValueKind setterArg) {
        this.kind = setterArg;
        return this;
      }
      public @NonNull StylePropertyValue build() {
        StylePropertyValue pigeonReturn = new StylePropertyValue();
        pigeonReturn.setValue(value);
        pigeonReturn.setKind(kind);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("kind", kind == null ? null : kind.index);
      return toMapResult;
    }
    static @NonNull StylePropertyValue fromMap(@NonNull Map<String, Object> map) {
      StylePropertyValue pigeonResult = new StylePropertyValue();
      Object value = map.get("value");
      pigeonResult.setValue((String)value);
      Object kind = map.get("kind");
      pigeonResult.setKind(kind == null ? null : StylePropertyValueKind.values()[(int)kind]);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class _AnimationManagerCodec extends StandardMessageCodec {
    public static final _AnimationManagerCodec INSTANCE = new _AnimationManagerCodec();
    private _AnimationManagerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CameraOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return MapAnimationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return MbxEdgeInsets.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return ScreenCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return ScreenCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CameraOptions) {
        stream.write(128);
        writeValue(stream, ((CameraOptions) value).toMap());
      } else 
      if (value instanceof MapAnimationOptions) {
        stream.write(129);
        writeValue(stream, ((MapAnimationOptions) value).toMap());
      } else 
      if (value instanceof MbxEdgeInsets) {
        stream.write(130);
        writeValue(stream, ((MbxEdgeInsets) value).toMap());
      } else 
      if (value instanceof ScreenCoordinate) {
        stream.write(131);
        writeValue(stream, ((ScreenCoordinate) value).toMap());
      } else 
      if (value instanceof ScreenCoordinate) {
        stream.write(132);
        writeValue(stream, ((ScreenCoordinate) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface _AnimationManager {
    void easeTo(@NonNull CameraOptions cameraOptions, @Nullable MapAnimationOptions mapAnimationOptions);
    void flyTo(@NonNull CameraOptions cameraOptions, @Nullable MapAnimationOptions mapAnimationOptions);
    void pitchBy(@NonNull Double pitch, @Nullable MapAnimationOptions mapAnimationOptions);
    void scaleBy(@NonNull Double amount, @Nullable ScreenCoordinate screenCoordinate, @Nullable MapAnimationOptions mapAnimationOptions);
    void moveBy(@NonNull ScreenCoordinate screenCoordinate, @Nullable MapAnimationOptions mapAnimationOptions);
    void rotateBy(@NonNull ScreenCoordinate first, @NonNull ScreenCoordinate second, @Nullable MapAnimationOptions mapAnimationOptions);
    void cancelCameraAnimation();

    /** The codec used by _AnimationManager. */
    static MessageCodec<Object> getCodec() {
      return _AnimationManagerCodec.INSTANCE;
    }

    /** Sets up an instance of `_AnimationManager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, _AnimationManager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._AnimationManager.easeTo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CameraOptions cameraOptionsArg = (CameraOptions)args.get(0);
              if (cameraOptionsArg == null) {
                throw new NullPointerException("cameraOptionsArg unexpectedly null.");
              }
              MapAnimationOptions mapAnimationOptionsArg = (MapAnimationOptions)args.get(1);
              api.easeTo(cameraOptionsArg, mapAnimationOptionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._AnimationManager.flyTo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CameraOptions cameraOptionsArg = (CameraOptions)args.get(0);
              if (cameraOptionsArg == null) {
                throw new NullPointerException("cameraOptionsArg unexpectedly null.");
              }
              MapAnimationOptions mapAnimationOptionsArg = (MapAnimationOptions)args.get(1);
              api.flyTo(cameraOptionsArg, mapAnimationOptionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._AnimationManager.pitchBy", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Double pitchArg = (Double)args.get(0);
              if (pitchArg == null) {
                throw new NullPointerException("pitchArg unexpectedly null.");
              }
              MapAnimationOptions mapAnimationOptionsArg = (MapAnimationOptions)args.get(1);
              api.pitchBy(pitchArg, mapAnimationOptionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._AnimationManager.scaleBy", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Double amountArg = (Double)args.get(0);
              if (amountArg == null) {
                throw new NullPointerException("amountArg unexpectedly null.");
              }
              ScreenCoordinate screenCoordinateArg = (ScreenCoordinate)args.get(1);
              MapAnimationOptions mapAnimationOptionsArg = (MapAnimationOptions)args.get(2);
              api.scaleBy(amountArg, screenCoordinateArg, mapAnimationOptionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._AnimationManager.moveBy", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ScreenCoordinate screenCoordinateArg = (ScreenCoordinate)args.get(0);
              if (screenCoordinateArg == null) {
                throw new NullPointerException("screenCoordinateArg unexpectedly null.");
              }
              MapAnimationOptions mapAnimationOptionsArg = (MapAnimationOptions)args.get(1);
              api.moveBy(screenCoordinateArg, mapAnimationOptionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._AnimationManager.rotateBy", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ScreenCoordinate firstArg = (ScreenCoordinate)args.get(0);
              if (firstArg == null) {
                throw new NullPointerException("firstArg unexpectedly null.");
              }
              ScreenCoordinate secondArg = (ScreenCoordinate)args.get(1);
              if (secondArg == null) {
                throw new NullPointerException("secondArg unexpectedly null.");
              }
              MapAnimationOptions mapAnimationOptionsArg = (MapAnimationOptions)args.get(2);
              api.rotateBy(firstArg, secondArg, mapAnimationOptionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._AnimationManager.cancelCameraAnimation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.cancelCameraAnimation();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class _CameraManagerCodec extends StandardMessageCodec {
    public static final _CameraManagerCodec INSTANCE = new _CameraManagerCodec();
    private _CameraManagerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CameraBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CameraBoundsOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return CameraOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return CameraState.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return CanonicalTileID.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return CoordinateBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return CoordinateBoundsZoom.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return FeatureExtensionValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return GlyphsRasterizationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ImageContent.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ImageStretches.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return LayerPosition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return MapAnimationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return MapDebugOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return MapMemoryBudgetInMegabytes.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return MapMemoryBudgetInTiles.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return MapOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return MbxEdgeInsets.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return MbxImage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return MercatorCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return OfflineRegionGeometryDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)149:         
          return OfflineRegionTilePyramidDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)150:         
          return ProjectedMeters.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)151:         
          return QueriedFeature.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)152:         
          return RenderedQueryGeometry.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)153:         
          return RenderedQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)154:         
          return ResourceOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)155:         
          return ScreenBox.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)156:         
          return ScreenCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)157:         
          return Size.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)158:         
          return SourceQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)159:         
          return StyleObjectInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)160:         
          return StylePropertyValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)161:         
          return TransitionOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CameraBounds) {
        stream.write(128);
        writeValue(stream, ((CameraBounds) value).toMap());
      } else 
      if (value instanceof CameraBoundsOptions) {
        stream.write(129);
        writeValue(stream, ((CameraBoundsOptions) value).toMap());
      } else 
      if (value instanceof CameraOptions) {
        stream.write(130);
        writeValue(stream, ((CameraOptions) value).toMap());
      } else 
      if (value instanceof CameraState) {
        stream.write(131);
        writeValue(stream, ((CameraState) value).toMap());
      } else 
      if (value instanceof CanonicalTileID) {
        stream.write(132);
        writeValue(stream, ((CanonicalTileID) value).toMap());
      } else 
      if (value instanceof CoordinateBounds) {
        stream.write(133);
        writeValue(stream, ((CoordinateBounds) value).toMap());
      } else 
      if (value instanceof CoordinateBoundsZoom) {
        stream.write(134);
        writeValue(stream, ((CoordinateBoundsZoom) value).toMap());
      } else 
      if (value instanceof FeatureExtensionValue) {
        stream.write(135);
        writeValue(stream, ((FeatureExtensionValue) value).toMap());
      } else 
      if (value instanceof GlyphsRasterizationOptions) {
        stream.write(136);
        writeValue(stream, ((GlyphsRasterizationOptions) value).toMap());
      } else 
      if (value instanceof ImageContent) {
        stream.write(137);
        writeValue(stream, ((ImageContent) value).toMap());
      } else 
      if (value instanceof ImageStretches) {
        stream.write(138);
        writeValue(stream, ((ImageStretches) value).toMap());
      } else 
      if (value instanceof LayerPosition) {
        stream.write(139);
        writeValue(stream, ((LayerPosition) value).toMap());
      } else 
      if (value instanceof MapAnimationOptions) {
        stream.write(140);
        writeValue(stream, ((MapAnimationOptions) value).toMap());
      } else 
      if (value instanceof MapDebugOptions) {
        stream.write(141);
        writeValue(stream, ((MapDebugOptions) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInMegabytes) {
        stream.write(142);
        writeValue(stream, ((MapMemoryBudgetInMegabytes) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInTiles) {
        stream.write(143);
        writeValue(stream, ((MapMemoryBudgetInTiles) value).toMap());
      } else 
      if (value instanceof MapOptions) {
        stream.write(144);
        writeValue(stream, ((MapOptions) value).toMap());
      } else 
      if (value instanceof MbxEdgeInsets) {
        stream.write(145);
        writeValue(stream, ((MbxEdgeInsets) value).toMap());
      } else 
      if (value instanceof MbxImage) {
        stream.write(146);
        writeValue(stream, ((MbxImage) value).toMap());
      } else 
      if (value instanceof MercatorCoordinate) {
        stream.write(147);
        writeValue(stream, ((MercatorCoordinate) value).toMap());
      } else 
      if (value instanceof OfflineRegionGeometryDefinition) {
        stream.write(148);
        writeValue(stream, ((OfflineRegionGeometryDefinition) value).toMap());
      } else 
      if (value instanceof OfflineRegionTilePyramidDefinition) {
        stream.write(149);
        writeValue(stream, ((OfflineRegionTilePyramidDefinition) value).toMap());
      } else 
      if (value instanceof ProjectedMeters) {
        stream.write(150);
        writeValue(stream, ((ProjectedMeters) value).toMap());
      } else 
      if (value instanceof QueriedFeature) {
        stream.write(151);
        writeValue(stream, ((QueriedFeature) value).toMap());
      } else 
      if (value instanceof RenderedQueryGeometry) {
        stream.write(152);
        writeValue(stream, ((RenderedQueryGeometry) value).toMap());
      } else 
      if (value instanceof RenderedQueryOptions) {
        stream.write(153);
        writeValue(stream, ((RenderedQueryOptions) value).toMap());
      } else 
      if (value instanceof ResourceOptions) {
        stream.write(154);
        writeValue(stream, ((ResourceOptions) value).toMap());
      } else 
      if (value instanceof ScreenBox) {
        stream.write(155);
        writeValue(stream, ((ScreenBox) value).toMap());
      } else 
      if (value instanceof ScreenCoordinate) {
        stream.write(156);
        writeValue(stream, ((ScreenCoordinate) value).toMap());
      } else 
      if (value instanceof Size) {
        stream.write(157);
        writeValue(stream, ((Size) value).toMap());
      } else 
      if (value instanceof SourceQueryOptions) {
        stream.write(158);
        writeValue(stream, ((SourceQueryOptions) value).toMap());
      } else 
      if (value instanceof StyleObjectInfo) {
        stream.write(159);
        writeValue(stream, ((StyleObjectInfo) value).toMap());
      } else 
      if (value instanceof StylePropertyValue) {
        stream.write(160);
        writeValue(stream, ((StylePropertyValue) value).toMap());
      } else 
      if (value instanceof TransitionOptions) {
        stream.write(161);
        writeValue(stream, ((TransitionOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface _CameraManager {
    @NonNull CameraOptions cameraForCoordinateBounds(@NonNull CoordinateBounds bounds, @NonNull MbxEdgeInsets padding, @Nullable Double bearing, @Nullable Double pitch);
    @NonNull CameraOptions cameraForCoordinates(@NonNull List<Map<String, Object>> coordinates, @NonNull MbxEdgeInsets padding, @Nullable Double bearing, @Nullable Double pitch);
    @NonNull CameraOptions cameraForCoordinatesCameraOptions(@NonNull List<Map<String, Object>> coordinates, @NonNull CameraOptions camera, @NonNull ScreenBox box);
    @NonNull CameraOptions cameraForGeometry(@NonNull Map<String, Object> geometry, @NonNull MbxEdgeInsets padding, @Nullable Double bearing, @Nullable Double pitch);
    @NonNull CoordinateBounds coordinateBoundsForCamera(@NonNull CameraOptions camera);
    @NonNull CoordinateBounds coordinateBoundsForCameraUnwrapped(@NonNull CameraOptions camera);
    @NonNull CoordinateBoundsZoom coordinateBoundsZoomForCamera(@NonNull CameraOptions camera);
    @NonNull CoordinateBoundsZoom coordinateBoundsZoomForCameraUnwrapped(@NonNull CameraOptions camera);
    @NonNull ScreenCoordinate pixelForCoordinate(@NonNull Map<String, Object> coordinate);
    @NonNull Map<String, Object> coordinateForPixel(@NonNull ScreenCoordinate pixel);
    @NonNull List<ScreenCoordinate> pixelsForCoordinates(@NonNull List<Map<String, Object>> coordinates);
    @NonNull List<Map<String, Object>> coordinatesForPixels(@NonNull List<ScreenCoordinate> pixels);
    void setCamera(@NonNull CameraOptions cameraOptions);
    @NonNull CameraState getCameraState();
    void setBounds(@NonNull CameraBoundsOptions options);
    @NonNull CameraBounds getBounds();
    void dragStart(@NonNull ScreenCoordinate point);
    @NonNull CameraOptions getDragCameraOptions(@NonNull ScreenCoordinate fromPoint, @NonNull ScreenCoordinate toPoint);
    void dragEnd();

    /** The codec used by _CameraManager. */
    static MessageCodec<Object> getCodec() {
      return _CameraManagerCodec.INSTANCE;
    }

    /** Sets up an instance of `_CameraManager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, _CameraManager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.cameraForCoordinateBounds", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CoordinateBounds boundsArg = (CoordinateBounds)args.get(0);
              if (boundsArg == null) {
                throw new NullPointerException("boundsArg unexpectedly null.");
              }
              MbxEdgeInsets paddingArg = (MbxEdgeInsets)args.get(1);
              if (paddingArg == null) {
                throw new NullPointerException("paddingArg unexpectedly null.");
              }
              Double bearingArg = (Double)args.get(2);
              Double pitchArg = (Double)args.get(3);
              CameraOptions output = api.cameraForCoordinateBounds(boundsArg, paddingArg, bearingArg, pitchArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.cameraForCoordinates", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<Map<String, Object>> coordinatesArg = (List<Map<String, Object>>)args.get(0);
              if (coordinatesArg == null) {
                throw new NullPointerException("coordinatesArg unexpectedly null.");
              }
              MbxEdgeInsets paddingArg = (MbxEdgeInsets)args.get(1);
              if (paddingArg == null) {
                throw new NullPointerException("paddingArg unexpectedly null.");
              }
              Double bearingArg = (Double)args.get(2);
              Double pitchArg = (Double)args.get(3);
              CameraOptions output = api.cameraForCoordinates(coordinatesArg, paddingArg, bearingArg, pitchArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.cameraForCoordinatesCameraOptions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<Map<String, Object>> coordinatesArg = (List<Map<String, Object>>)args.get(0);
              if (coordinatesArg == null) {
                throw new NullPointerException("coordinatesArg unexpectedly null.");
              }
              CameraOptions cameraArg = (CameraOptions)args.get(1);
              if (cameraArg == null) {
                throw new NullPointerException("cameraArg unexpectedly null.");
              }
              ScreenBox boxArg = (ScreenBox)args.get(2);
              if (boxArg == null) {
                throw new NullPointerException("boxArg unexpectedly null.");
              }
              CameraOptions output = api.cameraForCoordinatesCameraOptions(coordinatesArg, cameraArg, boxArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.cameraForGeometry", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Map<String, Object> geometryArg = (Map<String, Object>)args.get(0);
              if (geometryArg == null) {
                throw new NullPointerException("geometryArg unexpectedly null.");
              }
              MbxEdgeInsets paddingArg = (MbxEdgeInsets)args.get(1);
              if (paddingArg == null) {
                throw new NullPointerException("paddingArg unexpectedly null.");
              }
              Double bearingArg = (Double)args.get(2);
              Double pitchArg = (Double)args.get(3);
              CameraOptions output = api.cameraForGeometry(geometryArg, paddingArg, bearingArg, pitchArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.coordinateBoundsForCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CameraOptions cameraArg = (CameraOptions)args.get(0);
              if (cameraArg == null) {
                throw new NullPointerException("cameraArg unexpectedly null.");
              }
              CoordinateBounds output = api.coordinateBoundsForCamera(cameraArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.coordinateBoundsForCameraUnwrapped", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CameraOptions cameraArg = (CameraOptions)args.get(0);
              if (cameraArg == null) {
                throw new NullPointerException("cameraArg unexpectedly null.");
              }
              CoordinateBounds output = api.coordinateBoundsForCameraUnwrapped(cameraArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.coordinateBoundsZoomForCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CameraOptions cameraArg = (CameraOptions)args.get(0);
              if (cameraArg == null) {
                throw new NullPointerException("cameraArg unexpectedly null.");
              }
              CoordinateBoundsZoom output = api.coordinateBoundsZoomForCamera(cameraArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.coordinateBoundsZoomForCameraUnwrapped", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CameraOptions cameraArg = (CameraOptions)args.get(0);
              if (cameraArg == null) {
                throw new NullPointerException("cameraArg unexpectedly null.");
              }
              CoordinateBoundsZoom output = api.coordinateBoundsZoomForCameraUnwrapped(cameraArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.pixelForCoordinate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Map<String, Object> coordinateArg = (Map<String, Object>)args.get(0);
              if (coordinateArg == null) {
                throw new NullPointerException("coordinateArg unexpectedly null.");
              }
              ScreenCoordinate output = api.pixelForCoordinate(coordinateArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.coordinateForPixel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ScreenCoordinate pixelArg = (ScreenCoordinate)args.get(0);
              if (pixelArg == null) {
                throw new NullPointerException("pixelArg unexpectedly null.");
              }
              Map<String, Object> output = api.coordinateForPixel(pixelArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.pixelsForCoordinates", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<Map<String, Object>> coordinatesArg = (List<Map<String, Object>>)args.get(0);
              if (coordinatesArg == null) {
                throw new NullPointerException("coordinatesArg unexpectedly null.");
              }
              List<ScreenCoordinate> output = api.pixelsForCoordinates(coordinatesArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.coordinatesForPixels", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<ScreenCoordinate> pixelsArg = (List<ScreenCoordinate>)args.get(0);
              if (pixelsArg == null) {
                throw new NullPointerException("pixelsArg unexpectedly null.");
              }
              List<Map<String, Object>> output = api.coordinatesForPixels(pixelsArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.setCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CameraOptions cameraOptionsArg = (CameraOptions)args.get(0);
              if (cameraOptionsArg == null) {
                throw new NullPointerException("cameraOptionsArg unexpectedly null.");
              }
              api.setCamera(cameraOptionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.getCameraState", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              CameraState output = api.getCameraState();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.setBounds", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CameraBoundsOptions optionsArg = (CameraBoundsOptions)args.get(0);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              api.setBounds(optionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.getBounds", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              CameraBounds output = api.getBounds();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.dragStart", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ScreenCoordinate pointArg = (ScreenCoordinate)args.get(0);
              if (pointArg == null) {
                throw new NullPointerException("pointArg unexpectedly null.");
              }
              api.dragStart(pointArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.getDragCameraOptions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ScreenCoordinate fromPointArg = (ScreenCoordinate)args.get(0);
              if (fromPointArg == null) {
                throw new NullPointerException("fromPointArg unexpectedly null.");
              }
              ScreenCoordinate toPointArg = (ScreenCoordinate)args.get(1);
              if (toPointArg == null) {
                throw new NullPointerException("toPointArg unexpectedly null.");
              }
              CameraOptions output = api.getDragCameraOptions(fromPointArg, toPointArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._CameraManager.dragEnd", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.dragEnd();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class _MapInterfaceCodec extends StandardMessageCodec {
    public static final _MapInterfaceCodec INSTANCE = new _MapInterfaceCodec();
    private _MapInterfaceCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CameraBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CameraBoundsOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return CameraOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return CameraState.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return CanonicalTileID.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return CoordinateBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return CoordinateBoundsZoom.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return FeatureExtensionValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return GlyphsRasterizationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ImageContent.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ImageStretches.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return LayerPosition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return MapAnimationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return MapDebugOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return MapMemoryBudgetInMegabytes.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return MapMemoryBudgetInTiles.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return MapOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return MbxEdgeInsets.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return MbxImage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return MercatorCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return OfflineRegionGeometryDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)149:         
          return OfflineRegionTilePyramidDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)150:         
          return ProjectedMeters.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)151:         
          return QueriedFeature.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)152:         
          return RenderedQueryGeometry.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)153:         
          return RenderedQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)154:         
          return ResourceOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)155:         
          return ScreenBox.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)156:         
          return ScreenCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)157:         
          return Size.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)158:         
          return SourceQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)159:         
          return StyleObjectInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)160:         
          return StylePropertyValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)161:         
          return TransitionOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CameraBounds) {
        stream.write(128);
        writeValue(stream, ((CameraBounds) value).toMap());
      } else 
      if (value instanceof CameraBoundsOptions) {
        stream.write(129);
        writeValue(stream, ((CameraBoundsOptions) value).toMap());
      } else 
      if (value instanceof CameraOptions) {
        stream.write(130);
        writeValue(stream, ((CameraOptions) value).toMap());
      } else 
      if (value instanceof CameraState) {
        stream.write(131);
        writeValue(stream, ((CameraState) value).toMap());
      } else 
      if (value instanceof CanonicalTileID) {
        stream.write(132);
        writeValue(stream, ((CanonicalTileID) value).toMap());
      } else 
      if (value instanceof CoordinateBounds) {
        stream.write(133);
        writeValue(stream, ((CoordinateBounds) value).toMap());
      } else 
      if (value instanceof CoordinateBoundsZoom) {
        stream.write(134);
        writeValue(stream, ((CoordinateBoundsZoom) value).toMap());
      } else 
      if (value instanceof FeatureExtensionValue) {
        stream.write(135);
        writeValue(stream, ((FeatureExtensionValue) value).toMap());
      } else 
      if (value instanceof GlyphsRasterizationOptions) {
        stream.write(136);
        writeValue(stream, ((GlyphsRasterizationOptions) value).toMap());
      } else 
      if (value instanceof ImageContent) {
        stream.write(137);
        writeValue(stream, ((ImageContent) value).toMap());
      } else 
      if (value instanceof ImageStretches) {
        stream.write(138);
        writeValue(stream, ((ImageStretches) value).toMap());
      } else 
      if (value instanceof LayerPosition) {
        stream.write(139);
        writeValue(stream, ((LayerPosition) value).toMap());
      } else 
      if (value instanceof MapAnimationOptions) {
        stream.write(140);
        writeValue(stream, ((MapAnimationOptions) value).toMap());
      } else 
      if (value instanceof MapDebugOptions) {
        stream.write(141);
        writeValue(stream, ((MapDebugOptions) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInMegabytes) {
        stream.write(142);
        writeValue(stream, ((MapMemoryBudgetInMegabytes) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInTiles) {
        stream.write(143);
        writeValue(stream, ((MapMemoryBudgetInTiles) value).toMap());
      } else 
      if (value instanceof MapOptions) {
        stream.write(144);
        writeValue(stream, ((MapOptions) value).toMap());
      } else 
      if (value instanceof MbxEdgeInsets) {
        stream.write(145);
        writeValue(stream, ((MbxEdgeInsets) value).toMap());
      } else 
      if (value instanceof MbxImage) {
        stream.write(146);
        writeValue(stream, ((MbxImage) value).toMap());
      } else 
      if (value instanceof MercatorCoordinate) {
        stream.write(147);
        writeValue(stream, ((MercatorCoordinate) value).toMap());
      } else 
      if (value instanceof OfflineRegionGeometryDefinition) {
        stream.write(148);
        writeValue(stream, ((OfflineRegionGeometryDefinition) value).toMap());
      } else 
      if (value instanceof OfflineRegionTilePyramidDefinition) {
        stream.write(149);
        writeValue(stream, ((OfflineRegionTilePyramidDefinition) value).toMap());
      } else 
      if (value instanceof ProjectedMeters) {
        stream.write(150);
        writeValue(stream, ((ProjectedMeters) value).toMap());
      } else 
      if (value instanceof QueriedFeature) {
        stream.write(151);
        writeValue(stream, ((QueriedFeature) value).toMap());
      } else 
      if (value instanceof RenderedQueryGeometry) {
        stream.write(152);
        writeValue(stream, ((RenderedQueryGeometry) value).toMap());
      } else 
      if (value instanceof RenderedQueryOptions) {
        stream.write(153);
        writeValue(stream, ((RenderedQueryOptions) value).toMap());
      } else 
      if (value instanceof ResourceOptions) {
        stream.write(154);
        writeValue(stream, ((ResourceOptions) value).toMap());
      } else 
      if (value instanceof ScreenBox) {
        stream.write(155);
        writeValue(stream, ((ScreenBox) value).toMap());
      } else 
      if (value instanceof ScreenCoordinate) {
        stream.write(156);
        writeValue(stream, ((ScreenCoordinate) value).toMap());
      } else 
      if (value instanceof Size) {
        stream.write(157);
        writeValue(stream, ((Size) value).toMap());
      } else 
      if (value instanceof SourceQueryOptions) {
        stream.write(158);
        writeValue(stream, ((SourceQueryOptions) value).toMap());
      } else 
      if (value instanceof StyleObjectInfo) {
        stream.write(159);
        writeValue(stream, ((StyleObjectInfo) value).toMap());
      } else 
      if (value instanceof StylePropertyValue) {
        stream.write(160);
        writeValue(stream, ((StylePropertyValue) value).toMap());
      } else 
      if (value instanceof TransitionOptions) {
        stream.write(161);
        writeValue(stream, ((TransitionOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface _MapInterface {
    void loadStyleURI(@NonNull String styleURI, Result<Void> result);
    void loadStyleJson(@NonNull String styleJson, Result<Void> result);
    void clearData(Result<Void> result);
    void setMemoryBudget(@Nullable MapMemoryBudgetInMegabytes mapMemoryBudgetInMegabytes, @Nullable MapMemoryBudgetInTiles mapMemoryBudgetInTiles);
    @NonNull Size getSize();
    void triggerRepaint();
    void setGestureInProgress(@NonNull Boolean inProgress);
    @NonNull Boolean isGestureInProgress();
    void setUserAnimationInProgress(@NonNull Boolean inProgress);
    @NonNull Boolean isUserAnimationInProgress();
    void setPrefetchZoomDelta(@NonNull Long delta);
    @NonNull Long getPrefetchZoomDelta();
    void setNorthOrientation(@NonNull NorthOrientation orientation);
    void setConstrainMode(@NonNull ConstrainMode mode);
    void setViewportMode(@NonNull ViewportMode mode);
    @NonNull MapOptions getMapOptions();
    @NonNull List<MapDebugOptions> getDebug();
    void setDebug(@NonNull List<MapDebugOptions> debugOptions, @NonNull Boolean value);
    void queryRenderedFeatures(@NonNull RenderedQueryGeometry geometry, @NonNull RenderedQueryOptions options, Result<List<QueriedFeature>> result);
    void querySourceFeatures(@NonNull String sourceId, @NonNull SourceQueryOptions options, Result<List<QueriedFeature>> result);
    void getGeoJsonClusterLeaves(@NonNull String sourceIdentifier, @NonNull Map<String, Object> cluster, @Nullable Long limit, @Nullable Long offset, Result<FeatureExtensionValue> result);
    void getGeoJsonClusterChildren(@NonNull String sourceIdentifier, @NonNull Map<String, Object> cluster, Result<FeatureExtensionValue> result);
    void getGeoJsonClusterExpansionZoom(@NonNull String sourceIdentifier, @NonNull Map<String, Object> cluster, Result<FeatureExtensionValue> result);
    void setFeatureState(@NonNull String sourceId, @Nullable String sourceLayerId, @NonNull String featureId, @NonNull String state);
    void getFeatureState(@NonNull String sourceId, @Nullable String sourceLayerId, @NonNull String featureId, Result<String> result);
    void removeFeatureState(@NonNull String sourceId, @Nullable String sourceLayerId, @NonNull String featureId, @Nullable String stateKey);
    void reduceMemoryUse();
    @NonNull ResourceOptions getResourceOptions();
    @Nullable Double getElevation(@NonNull Map<String, Object> coordinate);

    /** The codec used by _MapInterface. */
    static MessageCodec<Object> getCodec() {
      return _MapInterfaceCodec.INSTANCE;
    }

    /** Sets up an instance of `_MapInterface` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, _MapInterface api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.loadStyleURI", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String styleURIArg = (String)args.get(0);
              if (styleURIArg == null) {
                throw new NullPointerException("styleURIArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.loadStyleURI(styleURIArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.loadStyleJson", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String styleJsonArg = (String)args.get(0);
              if (styleJsonArg == null) {
                throw new NullPointerException("styleJsonArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.loadStyleJson(styleJsonArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.clearData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.clearData(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.setMemoryBudget", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              MapMemoryBudgetInMegabytes mapMemoryBudgetInMegabytesArg = (MapMemoryBudgetInMegabytes)args.get(0);
              MapMemoryBudgetInTiles mapMemoryBudgetInTilesArg = (MapMemoryBudgetInTiles)args.get(1);
              api.setMemoryBudget(mapMemoryBudgetInMegabytesArg, mapMemoryBudgetInTilesArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getSize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Size output = api.getSize();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.triggerRepaint", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.triggerRepaint();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.setGestureInProgress", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean inProgressArg = (Boolean)args.get(0);
              if (inProgressArg == null) {
                throw new NullPointerException("inProgressArg unexpectedly null.");
              }
              api.setGestureInProgress(inProgressArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.isGestureInProgress", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.isGestureInProgress();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.setUserAnimationInProgress", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean inProgressArg = (Boolean)args.get(0);
              if (inProgressArg == null) {
                throw new NullPointerException("inProgressArg unexpectedly null.");
              }
              api.setUserAnimationInProgress(inProgressArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.isUserAnimationInProgress", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.isUserAnimationInProgress();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.setPrefetchZoomDelta", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number deltaArg = (Number)args.get(0);
              if (deltaArg == null) {
                throw new NullPointerException("deltaArg unexpectedly null.");
              }
              api.setPrefetchZoomDelta((deltaArg == null) ? null : deltaArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getPrefetchZoomDelta", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Long output = api.getPrefetchZoomDelta();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.setNorthOrientation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              NorthOrientation orientationArg = args.get(0) == null ? null : NorthOrientation.values()[(int)args.get(0)];
              if (orientationArg == null) {
                throw new NullPointerException("orientationArg unexpectedly null.");
              }
              api.setNorthOrientation(orientationArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.setConstrainMode", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ConstrainMode modeArg = args.get(0) == null ? null : ConstrainMode.values()[(int)args.get(0)];
              if (modeArg == null) {
                throw new NullPointerException("modeArg unexpectedly null.");
              }
              api.setConstrainMode(modeArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.setViewportMode", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ViewportMode modeArg = args.get(0) == null ? null : ViewportMode.values()[(int)args.get(0)];
              if (modeArg == null) {
                throw new NullPointerException("modeArg unexpectedly null.");
              }
              api.setViewportMode(modeArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getMapOptions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              MapOptions output = api.getMapOptions();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getDebug", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              List<MapDebugOptions> output = api.getDebug();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.setDebug", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<MapDebugOptions> debugOptionsArg = (List<MapDebugOptions>)args.get(0);
              if (debugOptionsArg == null) {
                throw new NullPointerException("debugOptionsArg unexpectedly null.");
              }
              Boolean valueArg = (Boolean)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.setDebug(debugOptionsArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.queryRenderedFeatures", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              RenderedQueryGeometry geometryArg = (RenderedQueryGeometry)args.get(0);
              if (geometryArg == null) {
                throw new NullPointerException("geometryArg unexpectedly null.");
              }
              RenderedQueryOptions optionsArg = (RenderedQueryOptions)args.get(1);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              Result<List<QueriedFeature>> resultCallback = new Result<List<QueriedFeature>>() {
                public void success(List<QueriedFeature> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.queryRenderedFeatures(geometryArg, optionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.querySourceFeatures", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              SourceQueryOptions optionsArg = (SourceQueryOptions)args.get(1);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              Result<List<QueriedFeature>> resultCallback = new Result<List<QueriedFeature>>() {
                public void success(List<QueriedFeature> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.querySourceFeatures(sourceIdArg, optionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getGeoJsonClusterLeaves", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdentifierArg = (String)args.get(0);
              if (sourceIdentifierArg == null) {
                throw new NullPointerException("sourceIdentifierArg unexpectedly null.");
              }
              Map<String, Object> clusterArg = (Map<String, Object>)args.get(1);
              if (clusterArg == null) {
                throw new NullPointerException("clusterArg unexpectedly null.");
              }
              Number limitArg = (Number)args.get(2);
              Number offsetArg = (Number)args.get(3);
              Result<FeatureExtensionValue> resultCallback = new Result<FeatureExtensionValue>() {
                public void success(FeatureExtensionValue result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getGeoJsonClusterLeaves(sourceIdentifierArg, clusterArg, (limitArg == null) ? null : limitArg.longValue(), (offsetArg == null) ? null : offsetArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getGeoJsonClusterChildren", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdentifierArg = (String)args.get(0);
              if (sourceIdentifierArg == null) {
                throw new NullPointerException("sourceIdentifierArg unexpectedly null.");
              }
              Map<String, Object> clusterArg = (Map<String, Object>)args.get(1);
              if (clusterArg == null) {
                throw new NullPointerException("clusterArg unexpectedly null.");
              }
              Result<FeatureExtensionValue> resultCallback = new Result<FeatureExtensionValue>() {
                public void success(FeatureExtensionValue result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getGeoJsonClusterChildren(sourceIdentifierArg, clusterArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getGeoJsonClusterExpansionZoom", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdentifierArg = (String)args.get(0);
              if (sourceIdentifierArg == null) {
                throw new NullPointerException("sourceIdentifierArg unexpectedly null.");
              }
              Map<String, Object> clusterArg = (Map<String, Object>)args.get(1);
              if (clusterArg == null) {
                throw new NullPointerException("clusterArg unexpectedly null.");
              }
              Result<FeatureExtensionValue> resultCallback = new Result<FeatureExtensionValue>() {
                public void success(FeatureExtensionValue result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getGeoJsonClusterExpansionZoom(sourceIdentifierArg, clusterArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.setFeatureState", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              String sourceLayerIdArg = (String)args.get(1);
              String featureIdArg = (String)args.get(2);
              if (featureIdArg == null) {
                throw new NullPointerException("featureIdArg unexpectedly null.");
              }
              String stateArg = (String)args.get(3);
              if (stateArg == null) {
                throw new NullPointerException("stateArg unexpectedly null.");
              }
              api.setFeatureState(sourceIdArg, sourceLayerIdArg, featureIdArg, stateArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getFeatureState", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              String sourceLayerIdArg = (String)args.get(1);
              String featureIdArg = (String)args.get(2);
              if (featureIdArg == null) {
                throw new NullPointerException("featureIdArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getFeatureState(sourceIdArg, sourceLayerIdArg, featureIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.removeFeatureState", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              String sourceLayerIdArg = (String)args.get(1);
              String featureIdArg = (String)args.get(2);
              if (featureIdArg == null) {
                throw new NullPointerException("featureIdArg unexpectedly null.");
              }
              String stateKeyArg = (String)args.get(3);
              api.removeFeatureState(sourceIdArg, sourceLayerIdArg, featureIdArg, stateKeyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.reduceMemoryUse", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.reduceMemoryUse();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getResourceOptions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ResourceOptions output = api.getResourceOptions();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon._MapInterface.getElevation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Map<String, Object> coordinateArg = (Map<String, Object>)args.get(0);
              if (coordinateArg == null) {
                throw new NullPointerException("coordinateArg unexpectedly null.");
              }
              Double output = api.getElevation(coordinateArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class OfflineRegionCodec extends StandardMessageCodec {
    public static final OfflineRegionCodec INSTANCE = new OfflineRegionCodec();
    private OfflineRegionCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CoordinateBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return OfflineRegionGeometryDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return OfflineRegionTilePyramidDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CoordinateBounds) {
        stream.write(128);
        writeValue(stream, ((CoordinateBounds) value).toMap());
      } else 
      if (value instanceof OfflineRegionGeometryDefinition) {
        stream.write(129);
        writeValue(stream, ((OfflineRegionGeometryDefinition) value).toMap());
      } else 
      if (value instanceof OfflineRegionTilePyramidDefinition) {
        stream.write(130);
        writeValue(stream, ((OfflineRegionTilePyramidDefinition) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface OfflineRegion {
    @NonNull Long getIdentifier();
    @Nullable OfflineRegionTilePyramidDefinition getTilePyramidDefinition();
    @Nullable OfflineRegionGeometryDefinition getGeometryDefinition();
    @NonNull byte[] getMetadata();
    void setMetadata(@NonNull byte[] metadata, Result<Void> result);
    void setOfflineRegionDownloadState(@NonNull OfflineRegionDownloadState state);
    void invalidate(Result<Void> result);
    void purge(Result<Void> result);

    /** The codec used by OfflineRegion. */
    static MessageCodec<Object> getCodec() {
      return OfflineRegionCodec.INSTANCE;
    }

    /** Sets up an instance of `OfflineRegion` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, OfflineRegion api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineRegion.getIdentifier", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Long output = api.getIdentifier();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineRegion.getTilePyramidDefinition", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              OfflineRegionTilePyramidDefinition output = api.getTilePyramidDefinition();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineRegion.getGeometryDefinition", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              OfflineRegionGeometryDefinition output = api.getGeometryDefinition();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineRegion.getMetadata", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              byte[] output = api.getMetadata();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineRegion.setMetadata", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              byte[] metadataArg = (byte[])args.get(0);
              if (metadataArg == null) {
                throw new NullPointerException("metadataArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setMetadata(metadataArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineRegion.setOfflineRegionDownloadState", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              OfflineRegionDownloadState stateArg = args.get(0) == null ? null : OfflineRegionDownloadState.values()[(int)args.get(0)];
              if (stateArg == null) {
                throw new NullPointerException("stateArg unexpectedly null.");
              }
              api.setOfflineRegionDownloadState(stateArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineRegion.invalidate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.invalidate(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineRegion.purge", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.purge(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class OfflineRegionManagerCodec extends StandardMessageCodec {
    public static final OfflineRegionManagerCodec INSTANCE = new OfflineRegionManagerCodec();
    private OfflineRegionManagerCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface OfflineRegionManager {
    void setOfflineMapboxTileCountLimit(@NonNull Long limit);

    /** The codec used by OfflineRegionManager. */
    static MessageCodec<Object> getCodec() {
      return OfflineRegionManagerCodec.INSTANCE;
    }

    /** Sets up an instance of `OfflineRegionManager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, OfflineRegionManager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineRegionManager.setOfflineMapboxTileCountLimit", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number limitArg = (Number)args.get(0);
              if (limitArg == null) {
                throw new NullPointerException("limitArg unexpectedly null.");
              }
              api.setOfflineMapboxTileCountLimit((limitArg == null) ? null : limitArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ProjectionCodec extends StandardMessageCodec {
    public static final ProjectionCodec INSTANCE = new ProjectionCodec();
    private ProjectionCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CameraBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CameraBoundsOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return CameraOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return CameraState.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return CanonicalTileID.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return CoordinateBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return CoordinateBoundsZoom.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return FeatureExtensionValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return GlyphsRasterizationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ImageContent.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ImageStretches.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return LayerPosition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return MapAnimationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return MapDebugOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return MapMemoryBudgetInMegabytes.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return MapMemoryBudgetInTiles.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return MapOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return MbxEdgeInsets.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return MbxImage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return MercatorCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return OfflineRegionGeometryDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)149:         
          return OfflineRegionTilePyramidDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)150:         
          return ProjectedMeters.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)151:         
          return QueriedFeature.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)152:         
          return RenderedQueryGeometry.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)153:         
          return RenderedQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)154:         
          return ResourceOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)155:         
          return ScreenBox.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)156:         
          return ScreenCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)157:         
          return Size.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)158:         
          return SourceQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)159:         
          return StyleObjectInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)160:         
          return StylePropertyValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)161:         
          return TransitionOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CameraBounds) {
        stream.write(128);
        writeValue(stream, ((CameraBounds) value).toMap());
      } else 
      if (value instanceof CameraBoundsOptions) {
        stream.write(129);
        writeValue(stream, ((CameraBoundsOptions) value).toMap());
      } else 
      if (value instanceof CameraOptions) {
        stream.write(130);
        writeValue(stream, ((CameraOptions) value).toMap());
      } else 
      if (value instanceof CameraState) {
        stream.write(131);
        writeValue(stream, ((CameraState) value).toMap());
      } else 
      if (value instanceof CanonicalTileID) {
        stream.write(132);
        writeValue(stream, ((CanonicalTileID) value).toMap());
      } else 
      if (value instanceof CoordinateBounds) {
        stream.write(133);
        writeValue(stream, ((CoordinateBounds) value).toMap());
      } else 
      if (value instanceof CoordinateBoundsZoom) {
        stream.write(134);
        writeValue(stream, ((CoordinateBoundsZoom) value).toMap());
      } else 
      if (value instanceof FeatureExtensionValue) {
        stream.write(135);
        writeValue(stream, ((FeatureExtensionValue) value).toMap());
      } else 
      if (value instanceof GlyphsRasterizationOptions) {
        stream.write(136);
        writeValue(stream, ((GlyphsRasterizationOptions) value).toMap());
      } else 
      if (value instanceof ImageContent) {
        stream.write(137);
        writeValue(stream, ((ImageContent) value).toMap());
      } else 
      if (value instanceof ImageStretches) {
        stream.write(138);
        writeValue(stream, ((ImageStretches) value).toMap());
      } else 
      if (value instanceof LayerPosition) {
        stream.write(139);
        writeValue(stream, ((LayerPosition) value).toMap());
      } else 
      if (value instanceof MapAnimationOptions) {
        stream.write(140);
        writeValue(stream, ((MapAnimationOptions) value).toMap());
      } else 
      if (value instanceof MapDebugOptions) {
        stream.write(141);
        writeValue(stream, ((MapDebugOptions) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInMegabytes) {
        stream.write(142);
        writeValue(stream, ((MapMemoryBudgetInMegabytes) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInTiles) {
        stream.write(143);
        writeValue(stream, ((MapMemoryBudgetInTiles) value).toMap());
      } else 
      if (value instanceof MapOptions) {
        stream.write(144);
        writeValue(stream, ((MapOptions) value).toMap());
      } else 
      if (value instanceof MbxEdgeInsets) {
        stream.write(145);
        writeValue(stream, ((MbxEdgeInsets) value).toMap());
      } else 
      if (value instanceof MbxImage) {
        stream.write(146);
        writeValue(stream, ((MbxImage) value).toMap());
      } else 
      if (value instanceof MercatorCoordinate) {
        stream.write(147);
        writeValue(stream, ((MercatorCoordinate) value).toMap());
      } else 
      if (value instanceof OfflineRegionGeometryDefinition) {
        stream.write(148);
        writeValue(stream, ((OfflineRegionGeometryDefinition) value).toMap());
      } else 
      if (value instanceof OfflineRegionTilePyramidDefinition) {
        stream.write(149);
        writeValue(stream, ((OfflineRegionTilePyramidDefinition) value).toMap());
      } else 
      if (value instanceof ProjectedMeters) {
        stream.write(150);
        writeValue(stream, ((ProjectedMeters) value).toMap());
      } else 
      if (value instanceof QueriedFeature) {
        stream.write(151);
        writeValue(stream, ((QueriedFeature) value).toMap());
      } else 
      if (value instanceof RenderedQueryGeometry) {
        stream.write(152);
        writeValue(stream, ((RenderedQueryGeometry) value).toMap());
      } else 
      if (value instanceof RenderedQueryOptions) {
        stream.write(153);
        writeValue(stream, ((RenderedQueryOptions) value).toMap());
      } else 
      if (value instanceof ResourceOptions) {
        stream.write(154);
        writeValue(stream, ((ResourceOptions) value).toMap());
      } else 
      if (value instanceof ScreenBox) {
        stream.write(155);
        writeValue(stream, ((ScreenBox) value).toMap());
      } else 
      if (value instanceof ScreenCoordinate) {
        stream.write(156);
        writeValue(stream, ((ScreenCoordinate) value).toMap());
      } else 
      if (value instanceof Size) {
        stream.write(157);
        writeValue(stream, ((Size) value).toMap());
      } else 
      if (value instanceof SourceQueryOptions) {
        stream.write(158);
        writeValue(stream, ((SourceQueryOptions) value).toMap());
      } else 
      if (value instanceof StyleObjectInfo) {
        stream.write(159);
        writeValue(stream, ((StyleObjectInfo) value).toMap());
      } else 
      if (value instanceof StylePropertyValue) {
        stream.write(160);
        writeValue(stream, ((StylePropertyValue) value).toMap());
      } else 
      if (value instanceof TransitionOptions) {
        stream.write(161);
        writeValue(stream, ((TransitionOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Projection {
    @NonNull Double getMetersPerPixelAtLatitude(@NonNull Double latitude, @NonNull Double zoom);
    @NonNull ProjectedMeters projectedMetersForCoordinate(@NonNull Map<String, Object> coordinate);
    @NonNull Map<String, Object> coordinateForProjectedMeters(@NonNull ProjectedMeters projectedMeters);
    @NonNull MercatorCoordinate project(@NonNull Map<String, Object> coordinate, @NonNull Double zoomScale);
    @NonNull Map<String, Object> unproject(@NonNull MercatorCoordinate coordinate, @NonNull Double zoomScale);

    /** The codec used by Projection. */
    static MessageCodec<Object> getCodec() {
      return ProjectionCodec.INSTANCE;
    }

    /** Sets up an instance of `Projection` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Projection api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Projection.getMetersPerPixelAtLatitude", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Double latitudeArg = (Double)args.get(0);
              if (latitudeArg == null) {
                throw new NullPointerException("latitudeArg unexpectedly null.");
              }
              Double zoomArg = (Double)args.get(1);
              if (zoomArg == null) {
                throw new NullPointerException("zoomArg unexpectedly null.");
              }
              Double output = api.getMetersPerPixelAtLatitude(latitudeArg, zoomArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Projection.projectedMetersForCoordinate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Map<String, Object> coordinateArg = (Map<String, Object>)args.get(0);
              if (coordinateArg == null) {
                throw new NullPointerException("coordinateArg unexpectedly null.");
              }
              ProjectedMeters output = api.projectedMetersForCoordinate(coordinateArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Projection.coordinateForProjectedMeters", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ProjectedMeters projectedMetersArg = (ProjectedMeters)args.get(0);
              if (projectedMetersArg == null) {
                throw new NullPointerException("projectedMetersArg unexpectedly null.");
              }
              Map<String, Object> output = api.coordinateForProjectedMeters(projectedMetersArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Projection.project", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Map<String, Object> coordinateArg = (Map<String, Object>)args.get(0);
              if (coordinateArg == null) {
                throw new NullPointerException("coordinateArg unexpectedly null.");
              }
              Double zoomScaleArg = (Double)args.get(1);
              if (zoomScaleArg == null) {
                throw new NullPointerException("zoomScaleArg unexpectedly null.");
              }
              MercatorCoordinate output = api.project(coordinateArg, zoomScaleArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Projection.unproject", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              MercatorCoordinate coordinateArg = (MercatorCoordinate)args.get(0);
              if (coordinateArg == null) {
                throw new NullPointerException("coordinateArg unexpectedly null.");
              }
              Double zoomScaleArg = (Double)args.get(1);
              if (zoomScaleArg == null) {
                throw new NullPointerException("zoomScaleArg unexpectedly null.");
              }
              Map<String, Object> output = api.unproject(coordinateArg, zoomScaleArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class SettingsCodec extends StandardMessageCodec {
    public static final SettingsCodec INSTANCE = new SettingsCodec();
    private SettingsCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Settings {
    void set(@NonNull String key, @NonNull String value);
    @NonNull String get(@NonNull String key);

    /** The codec used by Settings. */
    static MessageCodec<Object> getCodec() {
      return SettingsCodec.INSTANCE;
    }

    /** Sets up an instance of `Settings` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Settings api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Settings.set", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              String valueArg = (String)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.set(keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Settings.get", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              String output = api.get(keyArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class MapSnapshotCodec extends StandardMessageCodec {
    public static final MapSnapshotCodec INSTANCE = new MapSnapshotCodec();
    private MapSnapshotCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CameraBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CameraBoundsOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return CameraOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return CameraState.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return CanonicalTileID.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return CoordinateBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return CoordinateBoundsZoom.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return FeatureExtensionValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return GlyphsRasterizationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ImageContent.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ImageStretches.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return LayerPosition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return MapAnimationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return MapDebugOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return MapMemoryBudgetInMegabytes.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return MapMemoryBudgetInTiles.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return MapOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return MbxEdgeInsets.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return MbxImage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return MercatorCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return OfflineRegionGeometryDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)149:         
          return OfflineRegionTilePyramidDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)150:         
          return ProjectedMeters.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)151:         
          return QueriedFeature.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)152:         
          return RenderedQueryGeometry.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)153:         
          return RenderedQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)154:         
          return ResourceOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)155:         
          return ScreenBox.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)156:         
          return ScreenCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)157:         
          return Size.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)158:         
          return SourceQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)159:         
          return StyleObjectInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)160:         
          return StylePropertyValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)161:         
          return TransitionOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CameraBounds) {
        stream.write(128);
        writeValue(stream, ((CameraBounds) value).toMap());
      } else 
      if (value instanceof CameraBoundsOptions) {
        stream.write(129);
        writeValue(stream, ((CameraBoundsOptions) value).toMap());
      } else 
      if (value instanceof CameraOptions) {
        stream.write(130);
        writeValue(stream, ((CameraOptions) value).toMap());
      } else 
      if (value instanceof CameraState) {
        stream.write(131);
        writeValue(stream, ((CameraState) value).toMap());
      } else 
      if (value instanceof CanonicalTileID) {
        stream.write(132);
        writeValue(stream, ((CanonicalTileID) value).toMap());
      } else 
      if (value instanceof CoordinateBounds) {
        stream.write(133);
        writeValue(stream, ((CoordinateBounds) value).toMap());
      } else 
      if (value instanceof CoordinateBoundsZoom) {
        stream.write(134);
        writeValue(stream, ((CoordinateBoundsZoom) value).toMap());
      } else 
      if (value instanceof FeatureExtensionValue) {
        stream.write(135);
        writeValue(stream, ((FeatureExtensionValue) value).toMap());
      } else 
      if (value instanceof GlyphsRasterizationOptions) {
        stream.write(136);
        writeValue(stream, ((GlyphsRasterizationOptions) value).toMap());
      } else 
      if (value instanceof ImageContent) {
        stream.write(137);
        writeValue(stream, ((ImageContent) value).toMap());
      } else 
      if (value instanceof ImageStretches) {
        stream.write(138);
        writeValue(stream, ((ImageStretches) value).toMap());
      } else 
      if (value instanceof LayerPosition) {
        stream.write(139);
        writeValue(stream, ((LayerPosition) value).toMap());
      } else 
      if (value instanceof MapAnimationOptions) {
        stream.write(140);
        writeValue(stream, ((MapAnimationOptions) value).toMap());
      } else 
      if (value instanceof MapDebugOptions) {
        stream.write(141);
        writeValue(stream, ((MapDebugOptions) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInMegabytes) {
        stream.write(142);
        writeValue(stream, ((MapMemoryBudgetInMegabytes) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInTiles) {
        stream.write(143);
        writeValue(stream, ((MapMemoryBudgetInTiles) value).toMap());
      } else 
      if (value instanceof MapOptions) {
        stream.write(144);
        writeValue(stream, ((MapOptions) value).toMap());
      } else 
      if (value instanceof MbxEdgeInsets) {
        stream.write(145);
        writeValue(stream, ((MbxEdgeInsets) value).toMap());
      } else 
      if (value instanceof MbxImage) {
        stream.write(146);
        writeValue(stream, ((MbxImage) value).toMap());
      } else 
      if (value instanceof MercatorCoordinate) {
        stream.write(147);
        writeValue(stream, ((MercatorCoordinate) value).toMap());
      } else 
      if (value instanceof OfflineRegionGeometryDefinition) {
        stream.write(148);
        writeValue(stream, ((OfflineRegionGeometryDefinition) value).toMap());
      } else 
      if (value instanceof OfflineRegionTilePyramidDefinition) {
        stream.write(149);
        writeValue(stream, ((OfflineRegionTilePyramidDefinition) value).toMap());
      } else 
      if (value instanceof ProjectedMeters) {
        stream.write(150);
        writeValue(stream, ((ProjectedMeters) value).toMap());
      } else 
      if (value instanceof QueriedFeature) {
        stream.write(151);
        writeValue(stream, ((QueriedFeature) value).toMap());
      } else 
      if (value instanceof RenderedQueryGeometry) {
        stream.write(152);
        writeValue(stream, ((RenderedQueryGeometry) value).toMap());
      } else 
      if (value instanceof RenderedQueryOptions) {
        stream.write(153);
        writeValue(stream, ((RenderedQueryOptions) value).toMap());
      } else 
      if (value instanceof ResourceOptions) {
        stream.write(154);
        writeValue(stream, ((ResourceOptions) value).toMap());
      } else 
      if (value instanceof ScreenBox) {
        stream.write(155);
        writeValue(stream, ((ScreenBox) value).toMap());
      } else 
      if (value instanceof ScreenCoordinate) {
        stream.write(156);
        writeValue(stream, ((ScreenCoordinate) value).toMap());
      } else 
      if (value instanceof Size) {
        stream.write(157);
        writeValue(stream, ((Size) value).toMap());
      } else 
      if (value instanceof SourceQueryOptions) {
        stream.write(158);
        writeValue(stream, ((SourceQueryOptions) value).toMap());
      } else 
      if (value instanceof StyleObjectInfo) {
        stream.write(159);
        writeValue(stream, ((StyleObjectInfo) value).toMap());
      } else 
      if (value instanceof StylePropertyValue) {
        stream.write(160);
        writeValue(stream, ((StylePropertyValue) value).toMap());
      } else 
      if (value instanceof TransitionOptions) {
        stream.write(161);
        writeValue(stream, ((TransitionOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface MapSnapshot {
    @NonNull ScreenCoordinate screenCoordinate(@NonNull Map<String, Object> coordinate);
    @NonNull Map<String, Object> coordinate(@NonNull ScreenCoordinate screenCoordinate);
    @NonNull List<String> attributions();
    @NonNull MbxImage image();

    /** The codec used by MapSnapshot. */
    static MessageCodec<Object> getCodec() {
      return MapSnapshotCodec.INSTANCE;
    }

    /** Sets up an instance of `MapSnapshot` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MapSnapshot api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshot.screenCoordinate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Map<String, Object> coordinateArg = (Map<String, Object>)args.get(0);
              if (coordinateArg == null) {
                throw new NullPointerException("coordinateArg unexpectedly null.");
              }
              ScreenCoordinate output = api.screenCoordinate(coordinateArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshot.coordinate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ScreenCoordinate screenCoordinateArg = (ScreenCoordinate)args.get(0);
              if (screenCoordinateArg == null) {
                throw new NullPointerException("screenCoordinateArg unexpectedly null.");
              }
              Map<String, Object> output = api.coordinate(screenCoordinateArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshot.attributions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              List<String> output = api.attributions();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshot.image", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              MbxImage output = api.image();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class MapSnapshotterCodec extends StandardMessageCodec {
    public static final MapSnapshotterCodec INSTANCE = new MapSnapshotterCodec();
    private MapSnapshotterCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CameraBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CameraBoundsOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return CameraOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return CameraState.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return CanonicalTileID.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return CoordinateBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return CoordinateBoundsZoom.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return FeatureExtensionValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return GlyphsRasterizationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ImageContent.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ImageStretches.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return LayerPosition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return MapAnimationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return MapDebugOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return MapMemoryBudgetInMegabytes.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return MapMemoryBudgetInTiles.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return MapOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return MbxEdgeInsets.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return MbxImage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return MercatorCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return OfflineRegionGeometryDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)149:         
          return OfflineRegionTilePyramidDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)150:         
          return ProjectedMeters.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)151:         
          return QueriedFeature.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)152:         
          return RenderedQueryGeometry.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)153:         
          return RenderedQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)154:         
          return ResourceOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)155:         
          return ScreenBox.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)156:         
          return ScreenCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)157:         
          return Size.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)158:         
          return SourceQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)159:         
          return StyleObjectInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)160:         
          return StylePropertyValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)161:         
          return TransitionOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CameraBounds) {
        stream.write(128);
        writeValue(stream, ((CameraBounds) value).toMap());
      } else 
      if (value instanceof CameraBoundsOptions) {
        stream.write(129);
        writeValue(stream, ((CameraBoundsOptions) value).toMap());
      } else 
      if (value instanceof CameraOptions) {
        stream.write(130);
        writeValue(stream, ((CameraOptions) value).toMap());
      } else 
      if (value instanceof CameraState) {
        stream.write(131);
        writeValue(stream, ((CameraState) value).toMap());
      } else 
      if (value instanceof CanonicalTileID) {
        stream.write(132);
        writeValue(stream, ((CanonicalTileID) value).toMap());
      } else 
      if (value instanceof CoordinateBounds) {
        stream.write(133);
        writeValue(stream, ((CoordinateBounds) value).toMap());
      } else 
      if (value instanceof CoordinateBoundsZoom) {
        stream.write(134);
        writeValue(stream, ((CoordinateBoundsZoom) value).toMap());
      } else 
      if (value instanceof FeatureExtensionValue) {
        stream.write(135);
        writeValue(stream, ((FeatureExtensionValue) value).toMap());
      } else 
      if (value instanceof GlyphsRasterizationOptions) {
        stream.write(136);
        writeValue(stream, ((GlyphsRasterizationOptions) value).toMap());
      } else 
      if (value instanceof ImageContent) {
        stream.write(137);
        writeValue(stream, ((ImageContent) value).toMap());
      } else 
      if (value instanceof ImageStretches) {
        stream.write(138);
        writeValue(stream, ((ImageStretches) value).toMap());
      } else 
      if (value instanceof LayerPosition) {
        stream.write(139);
        writeValue(stream, ((LayerPosition) value).toMap());
      } else 
      if (value instanceof MapAnimationOptions) {
        stream.write(140);
        writeValue(stream, ((MapAnimationOptions) value).toMap());
      } else 
      if (value instanceof MapDebugOptions) {
        stream.write(141);
        writeValue(stream, ((MapDebugOptions) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInMegabytes) {
        stream.write(142);
        writeValue(stream, ((MapMemoryBudgetInMegabytes) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInTiles) {
        stream.write(143);
        writeValue(stream, ((MapMemoryBudgetInTiles) value).toMap());
      } else 
      if (value instanceof MapOptions) {
        stream.write(144);
        writeValue(stream, ((MapOptions) value).toMap());
      } else 
      if (value instanceof MbxEdgeInsets) {
        stream.write(145);
        writeValue(stream, ((MbxEdgeInsets) value).toMap());
      } else 
      if (value instanceof MbxImage) {
        stream.write(146);
        writeValue(stream, ((MbxImage) value).toMap());
      } else 
      if (value instanceof MercatorCoordinate) {
        stream.write(147);
        writeValue(stream, ((MercatorCoordinate) value).toMap());
      } else 
      if (value instanceof OfflineRegionGeometryDefinition) {
        stream.write(148);
        writeValue(stream, ((OfflineRegionGeometryDefinition) value).toMap());
      } else 
      if (value instanceof OfflineRegionTilePyramidDefinition) {
        stream.write(149);
        writeValue(stream, ((OfflineRegionTilePyramidDefinition) value).toMap());
      } else 
      if (value instanceof ProjectedMeters) {
        stream.write(150);
        writeValue(stream, ((ProjectedMeters) value).toMap());
      } else 
      if (value instanceof QueriedFeature) {
        stream.write(151);
        writeValue(stream, ((QueriedFeature) value).toMap());
      } else 
      if (value instanceof RenderedQueryGeometry) {
        stream.write(152);
        writeValue(stream, ((RenderedQueryGeometry) value).toMap());
      } else 
      if (value instanceof RenderedQueryOptions) {
        stream.write(153);
        writeValue(stream, ((RenderedQueryOptions) value).toMap());
      } else 
      if (value instanceof ResourceOptions) {
        stream.write(154);
        writeValue(stream, ((ResourceOptions) value).toMap());
      } else 
      if (value instanceof ScreenBox) {
        stream.write(155);
        writeValue(stream, ((ScreenBox) value).toMap());
      } else 
      if (value instanceof ScreenCoordinate) {
        stream.write(156);
        writeValue(stream, ((ScreenCoordinate) value).toMap());
      } else 
      if (value instanceof Size) {
        stream.write(157);
        writeValue(stream, ((Size) value).toMap());
      } else 
      if (value instanceof SourceQueryOptions) {
        stream.write(158);
        writeValue(stream, ((SourceQueryOptions) value).toMap());
      } else 
      if (value instanceof StyleObjectInfo) {
        stream.write(159);
        writeValue(stream, ((StyleObjectInfo) value).toMap());
      } else 
      if (value instanceof StylePropertyValue) {
        stream.write(160);
        writeValue(stream, ((StylePropertyValue) value).toMap());
      } else 
      if (value instanceof TransitionOptions) {
        stream.write(161);
        writeValue(stream, ((TransitionOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface MapSnapshotter {
    void setSize(@NonNull Size size);
    @NonNull Size getSize();
    @NonNull Boolean isInTileMode();
    void setTileMode(@NonNull Boolean set);
    void cancel();
    @Nullable Double getElevation(@NonNull Map<String, Object> coordinate);

    /** The codec used by MapSnapshotter. */
    static MessageCodec<Object> getCodec() {
      return MapSnapshotterCodec.INSTANCE;
    }

    /** Sets up an instance of `MapSnapshotter` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MapSnapshotter api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshotter.setSize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Size sizeArg = (Size)args.get(0);
              if (sizeArg == null) {
                throw new NullPointerException("sizeArg unexpectedly null.");
              }
              api.setSize(sizeArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshotter.getSize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Size output = api.getSize();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshotter.isInTileMode", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.isInTileMode();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshotter.setTileMode", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean setArg = (Boolean)args.get(0);
              if (setArg == null) {
                throw new NullPointerException("setArg unexpectedly null.");
              }
              api.setTileMode(setArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshotter.cancel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.cancel();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MapSnapshotter.getElevation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Map<String, Object> coordinateArg = (Map<String, Object>)args.get(0);
              if (coordinateArg == null) {
                throw new NullPointerException("coordinateArg unexpectedly null.");
              }
              Double output = api.getElevation(coordinateArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class StyleManagerCodec extends StandardMessageCodec {
    public static final StyleManagerCodec INSTANCE = new StyleManagerCodec();
    private StyleManagerCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CameraBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CameraBoundsOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return CameraOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return CameraState.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return CanonicalTileID.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return CoordinateBounds.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return CoordinateBoundsZoom.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return FeatureExtensionValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return GlyphsRasterizationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ImageContent.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ImageStretches.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return LayerPosition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return MapAnimationOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return MapDebugOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return MapMemoryBudgetInMegabytes.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return MapMemoryBudgetInTiles.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return MapOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return MbxEdgeInsets.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return MbxImage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return MercatorCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return OfflineRegionGeometryDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)149:         
          return OfflineRegionTilePyramidDefinition.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)150:         
          return ProjectedMeters.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)151:         
          return QueriedFeature.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)152:         
          return RenderedQueryGeometry.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)153:         
          return RenderedQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)154:         
          return ResourceOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)155:         
          return ScreenBox.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)156:         
          return ScreenCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)157:         
          return Size.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)158:         
          return SourceQueryOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)159:         
          return StyleObjectInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)160:         
          return StylePropertyValue.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)161:         
          return TransitionOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CameraBounds) {
        stream.write(128);
        writeValue(stream, ((CameraBounds) value).toMap());
      } else 
      if (value instanceof CameraBoundsOptions) {
        stream.write(129);
        writeValue(stream, ((CameraBoundsOptions) value).toMap());
      } else 
      if (value instanceof CameraOptions) {
        stream.write(130);
        writeValue(stream, ((CameraOptions) value).toMap());
      } else 
      if (value instanceof CameraState) {
        stream.write(131);
        writeValue(stream, ((CameraState) value).toMap());
      } else 
      if (value instanceof CanonicalTileID) {
        stream.write(132);
        writeValue(stream, ((CanonicalTileID) value).toMap());
      } else 
      if (value instanceof CoordinateBounds) {
        stream.write(133);
        writeValue(stream, ((CoordinateBounds) value).toMap());
      } else 
      if (value instanceof CoordinateBoundsZoom) {
        stream.write(134);
        writeValue(stream, ((CoordinateBoundsZoom) value).toMap());
      } else 
      if (value instanceof FeatureExtensionValue) {
        stream.write(135);
        writeValue(stream, ((FeatureExtensionValue) value).toMap());
      } else 
      if (value instanceof GlyphsRasterizationOptions) {
        stream.write(136);
        writeValue(stream, ((GlyphsRasterizationOptions) value).toMap());
      } else 
      if (value instanceof ImageContent) {
        stream.write(137);
        writeValue(stream, ((ImageContent) value).toMap());
      } else 
      if (value instanceof ImageStretches) {
        stream.write(138);
        writeValue(stream, ((ImageStretches) value).toMap());
      } else 
      if (value instanceof LayerPosition) {
        stream.write(139);
        writeValue(stream, ((LayerPosition) value).toMap());
      } else 
      if (value instanceof MapAnimationOptions) {
        stream.write(140);
        writeValue(stream, ((MapAnimationOptions) value).toMap());
      } else 
      if (value instanceof MapDebugOptions) {
        stream.write(141);
        writeValue(stream, ((MapDebugOptions) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInMegabytes) {
        stream.write(142);
        writeValue(stream, ((MapMemoryBudgetInMegabytes) value).toMap());
      } else 
      if (value instanceof MapMemoryBudgetInTiles) {
        stream.write(143);
        writeValue(stream, ((MapMemoryBudgetInTiles) value).toMap());
      } else 
      if (value instanceof MapOptions) {
        stream.write(144);
        writeValue(stream, ((MapOptions) value).toMap());
      } else 
      if (value instanceof MbxEdgeInsets) {
        stream.write(145);
        writeValue(stream, ((MbxEdgeInsets) value).toMap());
      } else 
      if (value instanceof MbxImage) {
        stream.write(146);
        writeValue(stream, ((MbxImage) value).toMap());
      } else 
      if (value instanceof MercatorCoordinate) {
        stream.write(147);
        writeValue(stream, ((MercatorCoordinate) value).toMap());
      } else 
      if (value instanceof OfflineRegionGeometryDefinition) {
        stream.write(148);
        writeValue(stream, ((OfflineRegionGeometryDefinition) value).toMap());
      } else 
      if (value instanceof OfflineRegionTilePyramidDefinition) {
        stream.write(149);
        writeValue(stream, ((OfflineRegionTilePyramidDefinition) value).toMap());
      } else 
      if (value instanceof ProjectedMeters) {
        stream.write(150);
        writeValue(stream, ((ProjectedMeters) value).toMap());
      } else 
      if (value instanceof QueriedFeature) {
        stream.write(151);
        writeValue(stream, ((QueriedFeature) value).toMap());
      } else 
      if (value instanceof RenderedQueryGeometry) {
        stream.write(152);
        writeValue(stream, ((RenderedQueryGeometry) value).toMap());
      } else 
      if (value instanceof RenderedQueryOptions) {
        stream.write(153);
        writeValue(stream, ((RenderedQueryOptions) value).toMap());
      } else 
      if (value instanceof ResourceOptions) {
        stream.write(154);
        writeValue(stream, ((ResourceOptions) value).toMap());
      } else 
      if (value instanceof ScreenBox) {
        stream.write(155);
        writeValue(stream, ((ScreenBox) value).toMap());
      } else 
      if (value instanceof ScreenCoordinate) {
        stream.write(156);
        writeValue(stream, ((ScreenCoordinate) value).toMap());
      } else 
      if (value instanceof Size) {
        stream.write(157);
        writeValue(stream, ((Size) value).toMap());
      } else 
      if (value instanceof SourceQueryOptions) {
        stream.write(158);
        writeValue(stream, ((SourceQueryOptions) value).toMap());
      } else 
      if (value instanceof StyleObjectInfo) {
        stream.write(159);
        writeValue(stream, ((StyleObjectInfo) value).toMap());
      } else 
      if (value instanceof StylePropertyValue) {
        stream.write(160);
        writeValue(stream, ((StylePropertyValue) value).toMap());
      } else 
      if (value instanceof TransitionOptions) {
        stream.write(161);
        writeValue(stream, ((TransitionOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface StyleManager {
    void getStyleURI(Result<String> result);
    void setStyleURI(@NonNull String uri, Result<Void> result);
    void getStyleJSON(Result<String> result);
    void setStyleJSON(@NonNull String json, Result<Void> result);
    void getStyleDefaultCamera(Result<CameraOptions> result);
    void getStyleTransition(Result<TransitionOptions> result);
    void setStyleTransition(@NonNull TransitionOptions transitionOptions, Result<Void> result);
    void addStyleLayer(@NonNull String properties, @Nullable LayerPosition layerPosition, Result<Void> result);
    void addPersistentStyleLayer(@NonNull String properties, @Nullable LayerPosition layerPosition, Result<Void> result);
    void isStyleLayerPersistent(@NonNull String layerId, Result<Boolean> result);
    void removeStyleLayer(@NonNull String layerId, Result<Void> result);
    void moveStyleLayer(@NonNull String layerId, @Nullable LayerPosition layerPosition, Result<Void> result);
    void styleLayerExists(@NonNull String layerId, Result<Boolean> result);
    void getStyleLayers(Result<List<StyleObjectInfo>> result);
    void getStyleLayerProperty(@NonNull String layerId, @NonNull String property, Result<StylePropertyValue> result);
    void setStyleLayerProperty(@NonNull String layerId, @NonNull String property, @NonNull Object value, Result<Void> result);
    void getStyleLayerProperties(@NonNull String layerId, Result<String> result);
    void setStyleLayerProperties(@NonNull String layerId, @NonNull String properties, Result<Void> result);
    void addStyleSource(@NonNull String sourceId, @NonNull String properties, Result<Void> result);
    void getStyleSourceProperty(@NonNull String sourceId, @NonNull String property, Result<StylePropertyValue> result);
    void setStyleSourceProperty(@NonNull String sourceId, @NonNull String property, @NonNull Object value, Result<Void> result);
    void getStyleSourceProperties(@NonNull String sourceId, Result<String> result);
    void setStyleSourceProperties(@NonNull String sourceId, @NonNull String properties, Result<Void> result);
    void updateStyleImageSourceImage(@NonNull String sourceId, @NonNull MbxImage image, Result<Void> result);
    void removeStyleSource(@NonNull String sourceId, Result<Void> result);
    void styleSourceExists(@NonNull String sourceId, Result<Boolean> result);
    void getStyleSources(Result<List<StyleObjectInfo>> result);
    void setStyleLight(@NonNull String properties, Result<Void> result);
    void getStyleLightProperty(@NonNull String property, Result<StylePropertyValue> result);
    void setStyleLightProperty(@NonNull String property, @NonNull Object value, Result<Void> result);
    void setStyleTerrain(@NonNull String properties, Result<Void> result);
    void getStyleTerrainProperty(@NonNull String property, Result<StylePropertyValue> result);
    void setStyleTerrainProperty(@NonNull String property, @NonNull Object value, Result<Void> result);
    void getStyleImage(@NonNull String imageId, Result<MbxImage> result);
    void addStyleImage(@NonNull String imageId, @NonNull Double scale, @NonNull MbxImage image, @NonNull Boolean sdf, @NonNull List<ImageStretches> stretchX, @NonNull List<ImageStretches> stretchY, @Nullable ImageContent content, Result<Void> result);
    void removeStyleImage(@NonNull String imageId, Result<Void> result);
    void hasStyleImage(@NonNull String imageId, Result<Boolean> result);
    void invalidateStyleCustomGeometrySourceTile(@NonNull String sourceId, @NonNull CanonicalTileID tileId, Result<Void> result);
    void invalidateStyleCustomGeometrySourceRegion(@NonNull String sourceId, @NonNull CoordinateBounds bounds, Result<Void> result);
    void isStyleLoaded(Result<Boolean> result);
    void getProjection(Result<String> result);
    void setProjection(@NonNull String projection, Result<Void> result);

    /** The codec used by StyleManager. */
    static MessageCodec<Object> getCodec() {
      return StyleManagerCodec.INSTANCE;
    }

    /** Sets up an instance of `StyleManager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, StyleManager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleURI", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleURI(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleURI", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uriArg = (String)args.get(0);
              if (uriArg == null) {
                throw new NullPointerException("uriArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleURI(uriArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleJSON", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleJSON(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleJSON", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String jsonArg = (String)args.get(0);
              if (jsonArg == null) {
                throw new NullPointerException("jsonArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleJSON(jsonArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleDefaultCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<CameraOptions> resultCallback = new Result<CameraOptions>() {
                public void success(CameraOptions result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleDefaultCamera(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleTransition", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<TransitionOptions> resultCallback = new Result<TransitionOptions>() {
                public void success(TransitionOptions result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleTransition(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleTransition", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              TransitionOptions transitionOptionsArg = (TransitionOptions)args.get(0);
              if (transitionOptionsArg == null) {
                throw new NullPointerException("transitionOptionsArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleTransition(transitionOptionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.addStyleLayer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String propertiesArg = (String)args.get(0);
              if (propertiesArg == null) {
                throw new NullPointerException("propertiesArg unexpectedly null.");
              }
              LayerPosition layerPositionArg = (LayerPosition)args.get(1);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.addStyleLayer(propertiesArg, layerPositionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.addPersistentStyleLayer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String propertiesArg = (String)args.get(0);
              if (propertiesArg == null) {
                throw new NullPointerException("propertiesArg unexpectedly null.");
              }
              LayerPosition layerPositionArg = (LayerPosition)args.get(1);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.addPersistentStyleLayer(propertiesArg, layerPositionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.isStyleLayerPersistent", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String layerIdArg = (String)args.get(0);
              if (layerIdArg == null) {
                throw new NullPointerException("layerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.isStyleLayerPersistent(layerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.removeStyleLayer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String layerIdArg = (String)args.get(0);
              if (layerIdArg == null) {
                throw new NullPointerException("layerIdArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeStyleLayer(layerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.moveStyleLayer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String layerIdArg = (String)args.get(0);
              if (layerIdArg == null) {
                throw new NullPointerException("layerIdArg unexpectedly null.");
              }
              LayerPosition layerPositionArg = (LayerPosition)args.get(1);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.moveStyleLayer(layerIdArg, layerPositionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.styleLayerExists", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String layerIdArg = (String)args.get(0);
              if (layerIdArg == null) {
                throw new NullPointerException("layerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.styleLayerExists(layerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleLayers", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<List<StyleObjectInfo>> resultCallback = new Result<List<StyleObjectInfo>>() {
                public void success(List<StyleObjectInfo> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleLayers(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleLayerProperty", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String layerIdArg = (String)args.get(0);
              if (layerIdArg == null) {
                throw new NullPointerException("layerIdArg unexpectedly null.");
              }
              String propertyArg = (String)args.get(1);
              if (propertyArg == null) {
                throw new NullPointerException("propertyArg unexpectedly null.");
              }
              Result<StylePropertyValue> resultCallback = new Result<StylePropertyValue>() {
                public void success(StylePropertyValue result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleLayerProperty(layerIdArg, propertyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleLayerProperty", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String layerIdArg = (String)args.get(0);
              if (layerIdArg == null) {
                throw new NullPointerException("layerIdArg unexpectedly null.");
              }
              String propertyArg = (String)args.get(1);
              if (propertyArg == null) {
                throw new NullPointerException("propertyArg unexpectedly null.");
              }
              Object valueArg = (Object)args.get(2);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleLayerProperty(layerIdArg, propertyArg, valueArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleLayerProperties", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String layerIdArg = (String)args.get(0);
              if (layerIdArg == null) {
                throw new NullPointerException("layerIdArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleLayerProperties(layerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleLayerProperties", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String layerIdArg = (String)args.get(0);
              if (layerIdArg == null) {
                throw new NullPointerException("layerIdArg unexpectedly null.");
              }
              String propertiesArg = (String)args.get(1);
              if (propertiesArg == null) {
                throw new NullPointerException("propertiesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleLayerProperties(layerIdArg, propertiesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.addStyleSource", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              String propertiesArg = (String)args.get(1);
              if (propertiesArg == null) {
                throw new NullPointerException("propertiesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.addStyleSource(sourceIdArg, propertiesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleSourceProperty", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              String propertyArg = (String)args.get(1);
              if (propertyArg == null) {
                throw new NullPointerException("propertyArg unexpectedly null.");
              }
              Result<StylePropertyValue> resultCallback = new Result<StylePropertyValue>() {
                public void success(StylePropertyValue result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleSourceProperty(sourceIdArg, propertyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleSourceProperty", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              String propertyArg = (String)args.get(1);
              if (propertyArg == null) {
                throw new NullPointerException("propertyArg unexpectedly null.");
              }
              Object valueArg = (Object)args.get(2);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleSourceProperty(sourceIdArg, propertyArg, valueArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleSourceProperties", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleSourceProperties(sourceIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleSourceProperties", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              String propertiesArg = (String)args.get(1);
              if (propertiesArg == null) {
                throw new NullPointerException("propertiesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleSourceProperties(sourceIdArg, propertiesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.updateStyleImageSourceImage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              MbxImage imageArg = (MbxImage)args.get(1);
              if (imageArg == null) {
                throw new NullPointerException("imageArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.updateStyleImageSourceImage(sourceIdArg, imageArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.removeStyleSource", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeStyleSource(sourceIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.styleSourceExists", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.styleSourceExists(sourceIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleSources", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<List<StyleObjectInfo>> resultCallback = new Result<List<StyleObjectInfo>>() {
                public void success(List<StyleObjectInfo> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleSources(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleLight", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String propertiesArg = (String)args.get(0);
              if (propertiesArg == null) {
                throw new NullPointerException("propertiesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleLight(propertiesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleLightProperty", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String propertyArg = (String)args.get(0);
              if (propertyArg == null) {
                throw new NullPointerException("propertyArg unexpectedly null.");
              }
              Result<StylePropertyValue> resultCallback = new Result<StylePropertyValue>() {
                public void success(StylePropertyValue result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleLightProperty(propertyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleLightProperty", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String propertyArg = (String)args.get(0);
              if (propertyArg == null) {
                throw new NullPointerException("propertyArg unexpectedly null.");
              }
              Object valueArg = (Object)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleLightProperty(propertyArg, valueArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleTerrain", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String propertiesArg = (String)args.get(0);
              if (propertiesArg == null) {
                throw new NullPointerException("propertiesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleTerrain(propertiesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleTerrainProperty", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String propertyArg = (String)args.get(0);
              if (propertyArg == null) {
                throw new NullPointerException("propertyArg unexpectedly null.");
              }
              Result<StylePropertyValue> resultCallback = new Result<StylePropertyValue>() {
                public void success(StylePropertyValue result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleTerrainProperty(propertyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setStyleTerrainProperty", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String propertyArg = (String)args.get(0);
              if (propertyArg == null) {
                throw new NullPointerException("propertyArg unexpectedly null.");
              }
              Object valueArg = (Object)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setStyleTerrainProperty(propertyArg, valueArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getStyleImage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String imageIdArg = (String)args.get(0);
              if (imageIdArg == null) {
                throw new NullPointerException("imageIdArg unexpectedly null.");
              }
              Result<MbxImage> resultCallback = new Result<MbxImage>() {
                public void success(MbxImage result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getStyleImage(imageIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.addStyleImage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String imageIdArg = (String)args.get(0);
              if (imageIdArg == null) {
                throw new NullPointerException("imageIdArg unexpectedly null.");
              }
              Double scaleArg = (Double)args.get(1);
              if (scaleArg == null) {
                throw new NullPointerException("scaleArg unexpectedly null.");
              }
              MbxImage imageArg = (MbxImage)args.get(2);
              if (imageArg == null) {
                throw new NullPointerException("imageArg unexpectedly null.");
              }
              Boolean sdfArg = (Boolean)args.get(3);
              if (sdfArg == null) {
                throw new NullPointerException("sdfArg unexpectedly null.");
              }
              List<ImageStretches> stretchXArg = (List<ImageStretches>)args.get(4);
              if (stretchXArg == null) {
                throw new NullPointerException("stretchXArg unexpectedly null.");
              }
              List<ImageStretches> stretchYArg = (List<ImageStretches>)args.get(5);
              if (stretchYArg == null) {
                throw new NullPointerException("stretchYArg unexpectedly null.");
              }
              ImageContent contentArg = (ImageContent)args.get(6);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.addStyleImage(imageIdArg, scaleArg, imageArg, sdfArg, stretchXArg, stretchYArg, contentArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.removeStyleImage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String imageIdArg = (String)args.get(0);
              if (imageIdArg == null) {
                throw new NullPointerException("imageIdArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeStyleImage(imageIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.hasStyleImage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String imageIdArg = (String)args.get(0);
              if (imageIdArg == null) {
                throw new NullPointerException("imageIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.hasStyleImage(imageIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.invalidateStyleCustomGeometrySourceTile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              CanonicalTileID tileIdArg = (CanonicalTileID)args.get(1);
              if (tileIdArg == null) {
                throw new NullPointerException("tileIdArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.invalidateStyleCustomGeometrySourceTile(sourceIdArg, tileIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.invalidateStyleCustomGeometrySourceRegion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String sourceIdArg = (String)args.get(0);
              if (sourceIdArg == null) {
                throw new NullPointerException("sourceIdArg unexpectedly null.");
              }
              CoordinateBounds boundsArg = (CoordinateBounds)args.get(1);
              if (boundsArg == null) {
                throw new NullPointerException("boundsArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.invalidateStyleCustomGeometrySourceRegion(sourceIdArg, boundsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.isStyleLoaded", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.isStyleLoaded(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.getProjection", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getProjection(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.StyleManager.setProjection", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String projectionArg = (String)args.get(0);
              if (projectionArg == null) {
                throw new NullPointerException("projectionArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setProjection(projectionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class CancelableCodec extends StandardMessageCodec {
    public static final CancelableCodec INSTANCE = new CancelableCodec();
    private CancelableCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Cancelable {
    void cancel();

    /** The codec used by Cancelable. */
    static MessageCodec<Object> getCodec() {
      return CancelableCodec.INSTANCE;
    }

    /** Sets up an instance of `Cancelable` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Cancelable api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Cancelable.cancel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.cancel();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class OfflineSwitchCodec extends StandardMessageCodec {
    public static final OfflineSwitchCodec INSTANCE = new OfflineSwitchCodec();
    private OfflineSwitchCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface OfflineSwitch {
    void setMapboxStackConnected(@NonNull Boolean connected);
    @NonNull Boolean isMapboxStackConnected();
    void reset();

    /** The codec used by OfflineSwitch. */
    static MessageCodec<Object> getCodec() {
      return OfflineSwitchCodec.INSTANCE;
    }

    /** Sets up an instance of `OfflineSwitch` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, OfflineSwitch api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineSwitch.setMapboxStackConnected", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean connectedArg = (Boolean)args.get(0);
              if (connectedArg == null) {
                throw new NullPointerException("connectedArg unexpectedly null.");
              }
              api.setMapboxStackConnected(connectedArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineSwitch.isMapboxStackConnected", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.isMapboxStackConnected();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OfflineSwitch.reset", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.reset();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class TilesetDescriptorCodec extends StandardMessageCodec {
    public static final TilesetDescriptorCodec INSTANCE = new TilesetDescriptorCodec();
    private TilesetDescriptorCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface TilesetDescriptor {

    /** The codec used by TilesetDescriptor. */
    static MessageCodec<Object> getCodec() {
      return TilesetDescriptorCodec.INSTANCE;
    }

    /** Sets up an instance of `TilesetDescriptor` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, TilesetDescriptor api) {
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
