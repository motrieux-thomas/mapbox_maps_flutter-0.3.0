// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class FLTSettings {

  public enum OrnamentPosition {
    TOP_LEFT(0),
    TOP_RIGHT(1),
    BOTTOM_RIGHT(2),
    BOTTOM_LEFT(3);

    private int index;
    private OrnamentPosition(final int index) {
      this.index = index;
    }
  }

  public enum ScrollMode {
    HORIZONTAL(0),
    VERTICAL(1),
    HORIZONTAL_AND_VERTICAL(2);

    private int index;
    private ScrollMode(final int index) {
      this.index = index;
    }
  }

  public enum PuckBearingSource {
    HEADING(0),
    COURSE(1);

    private int index;
    private PuckBearingSource(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ScreenCoordinate {
    private @NonNull Double x;
    public @NonNull Double getX() { return x; }
    public void setX(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"x\" is null.");
      }
      this.x = setterArg;
    }

    private @NonNull Double y;
    public @NonNull Double getY() { return y; }
    public void setY(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"y\" is null.");
      }
      this.y = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ScreenCoordinate() {}
    public static final class Builder {
      private @Nullable Double x;
      public @NonNull Builder setX(@NonNull Double setterArg) {
        this.x = setterArg;
        return this;
      }
      private @Nullable Double y;
      public @NonNull Builder setY(@NonNull Double setterArg) {
        this.y = setterArg;
        return this;
      }
      public @NonNull ScreenCoordinate build() {
        ScreenCoordinate pigeonReturn = new ScreenCoordinate();
        pigeonReturn.setX(x);
        pigeonReturn.setY(y);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("x", x);
      toMapResult.put("y", y);
      return toMapResult;
    }
    static @NonNull ScreenCoordinate fromMap(@NonNull Map<String, Object> map) {
      ScreenCoordinate pigeonResult = new ScreenCoordinate();
      Object x = map.get("x");
      pigeonResult.setX((Double)x);
      Object y = map.get("y");
      pigeonResult.setY((Double)y);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GesturesSettings {
    private @Nullable Boolean rotateEnabled;
    public @Nullable Boolean getRotateEnabled() { return rotateEnabled; }
    public void setRotateEnabled(@Nullable Boolean setterArg) {
      this.rotateEnabled = setterArg;
    }

    private @Nullable Boolean pinchToZoomEnabled;
    public @Nullable Boolean getPinchToZoomEnabled() { return pinchToZoomEnabled; }
    public void setPinchToZoomEnabled(@Nullable Boolean setterArg) {
      this.pinchToZoomEnabled = setterArg;
    }

    private @Nullable Boolean scrollEnabled;
    public @Nullable Boolean getScrollEnabled() { return scrollEnabled; }
    public void setScrollEnabled(@Nullable Boolean setterArg) {
      this.scrollEnabled = setterArg;
    }

    private @Nullable Boolean simultaneousRotateAndPinchToZoomEnabled;
    public @Nullable Boolean getSimultaneousRotateAndPinchToZoomEnabled() { return simultaneousRotateAndPinchToZoomEnabled; }
    public void setSimultaneousRotateAndPinchToZoomEnabled(@Nullable Boolean setterArg) {
      this.simultaneousRotateAndPinchToZoomEnabled = setterArg;
    }

    private @Nullable Boolean pitchEnabled;
    public @Nullable Boolean getPitchEnabled() { return pitchEnabled; }
    public void setPitchEnabled(@Nullable Boolean setterArg) {
      this.pitchEnabled = setterArg;
    }

    private @Nullable ScrollMode scrollMode;
    public @Nullable ScrollMode getScrollMode() { return scrollMode; }
    public void setScrollMode(@Nullable ScrollMode setterArg) {
      this.scrollMode = setterArg;
    }

    private @Nullable Boolean doubleTapToZoomInEnabled;
    public @Nullable Boolean getDoubleTapToZoomInEnabled() { return doubleTapToZoomInEnabled; }
    public void setDoubleTapToZoomInEnabled(@Nullable Boolean setterArg) {
      this.doubleTapToZoomInEnabled = setterArg;
    }

    private @Nullable Boolean doubleTouchToZoomOutEnabled;
    public @Nullable Boolean getDoubleTouchToZoomOutEnabled() { return doubleTouchToZoomOutEnabled; }
    public void setDoubleTouchToZoomOutEnabled(@Nullable Boolean setterArg) {
      this.doubleTouchToZoomOutEnabled = setterArg;
    }

    private @Nullable Boolean quickZoomEnabled;
    public @Nullable Boolean getQuickZoomEnabled() { return quickZoomEnabled; }
    public void setQuickZoomEnabled(@Nullable Boolean setterArg) {
      this.quickZoomEnabled = setterArg;
    }

    private @Nullable ScreenCoordinate focalPoint;
    public @Nullable ScreenCoordinate getFocalPoint() { return focalPoint; }
    public void setFocalPoint(@Nullable ScreenCoordinate setterArg) {
      this.focalPoint = setterArg;
    }

    private @Nullable Boolean pinchToZoomDecelerationEnabled;
    public @Nullable Boolean getPinchToZoomDecelerationEnabled() { return pinchToZoomDecelerationEnabled; }
    public void setPinchToZoomDecelerationEnabled(@Nullable Boolean setterArg) {
      this.pinchToZoomDecelerationEnabled = setterArg;
    }

    private @Nullable Boolean rotateDecelerationEnabled;
    public @Nullable Boolean getRotateDecelerationEnabled() { return rotateDecelerationEnabled; }
    public void setRotateDecelerationEnabled(@Nullable Boolean setterArg) {
      this.rotateDecelerationEnabled = setterArg;
    }

    private @Nullable Boolean scrollDecelerationEnabled;
    public @Nullable Boolean getScrollDecelerationEnabled() { return scrollDecelerationEnabled; }
    public void setScrollDecelerationEnabled(@Nullable Boolean setterArg) {
      this.scrollDecelerationEnabled = setterArg;
    }

    private @Nullable Boolean increaseRotateThresholdWhenPinchingToZoom;
    public @Nullable Boolean getIncreaseRotateThresholdWhenPinchingToZoom() { return increaseRotateThresholdWhenPinchingToZoom; }
    public void setIncreaseRotateThresholdWhenPinchingToZoom(@Nullable Boolean setterArg) {
      this.increaseRotateThresholdWhenPinchingToZoom = setterArg;
    }

    private @Nullable Boolean increasePinchToZoomThresholdWhenRotating;
    public @Nullable Boolean getIncreasePinchToZoomThresholdWhenRotating() { return increasePinchToZoomThresholdWhenRotating; }
    public void setIncreasePinchToZoomThresholdWhenRotating(@Nullable Boolean setterArg) {
      this.increasePinchToZoomThresholdWhenRotating = setterArg;
    }

    private @Nullable Double zoomAnimationAmount;
    public @Nullable Double getZoomAnimationAmount() { return zoomAnimationAmount; }
    public void setZoomAnimationAmount(@Nullable Double setterArg) {
      this.zoomAnimationAmount = setterArg;
    }

    private @Nullable Boolean pinchPanEnabled;
    public @Nullable Boolean getPinchPanEnabled() { return pinchPanEnabled; }
    public void setPinchPanEnabled(@Nullable Boolean setterArg) {
      this.pinchPanEnabled = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean rotateEnabled;
      public @NonNull Builder setRotateEnabled(@Nullable Boolean setterArg) {
        this.rotateEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean pinchToZoomEnabled;
      public @NonNull Builder setPinchToZoomEnabled(@Nullable Boolean setterArg) {
        this.pinchToZoomEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean scrollEnabled;
      public @NonNull Builder setScrollEnabled(@Nullable Boolean setterArg) {
        this.scrollEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean simultaneousRotateAndPinchToZoomEnabled;
      public @NonNull Builder setSimultaneousRotateAndPinchToZoomEnabled(@Nullable Boolean setterArg) {
        this.simultaneousRotateAndPinchToZoomEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean pitchEnabled;
      public @NonNull Builder setPitchEnabled(@Nullable Boolean setterArg) {
        this.pitchEnabled = setterArg;
        return this;
      }
      private @Nullable ScrollMode scrollMode;
      public @NonNull Builder setScrollMode(@Nullable ScrollMode setterArg) {
        this.scrollMode = setterArg;
        return this;
      }
      private @Nullable Boolean doubleTapToZoomInEnabled;
      public @NonNull Builder setDoubleTapToZoomInEnabled(@Nullable Boolean setterArg) {
        this.doubleTapToZoomInEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean doubleTouchToZoomOutEnabled;
      public @NonNull Builder setDoubleTouchToZoomOutEnabled(@Nullable Boolean setterArg) {
        this.doubleTouchToZoomOutEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean quickZoomEnabled;
      public @NonNull Builder setQuickZoomEnabled(@Nullable Boolean setterArg) {
        this.quickZoomEnabled = setterArg;
        return this;
      }
      private @Nullable ScreenCoordinate focalPoint;
      public @NonNull Builder setFocalPoint(@Nullable ScreenCoordinate setterArg) {
        this.focalPoint = setterArg;
        return this;
      }
      private @Nullable Boolean pinchToZoomDecelerationEnabled;
      public @NonNull Builder setPinchToZoomDecelerationEnabled(@Nullable Boolean setterArg) {
        this.pinchToZoomDecelerationEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean rotateDecelerationEnabled;
      public @NonNull Builder setRotateDecelerationEnabled(@Nullable Boolean setterArg) {
        this.rotateDecelerationEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean scrollDecelerationEnabled;
      public @NonNull Builder setScrollDecelerationEnabled(@Nullable Boolean setterArg) {
        this.scrollDecelerationEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean increaseRotateThresholdWhenPinchingToZoom;
      public @NonNull Builder setIncreaseRotateThresholdWhenPinchingToZoom(@Nullable Boolean setterArg) {
        this.increaseRotateThresholdWhenPinchingToZoom = setterArg;
        return this;
      }
      private @Nullable Boolean increasePinchToZoomThresholdWhenRotating;
      public @NonNull Builder setIncreasePinchToZoomThresholdWhenRotating(@Nullable Boolean setterArg) {
        this.increasePinchToZoomThresholdWhenRotating = setterArg;
        return this;
      }
      private @Nullable Double zoomAnimationAmount;
      public @NonNull Builder setZoomAnimationAmount(@Nullable Double setterArg) {
        this.zoomAnimationAmount = setterArg;
        return this;
      }
      private @Nullable Boolean pinchPanEnabled;
      public @NonNull Builder setPinchPanEnabled(@Nullable Boolean setterArg) {
        this.pinchPanEnabled = setterArg;
        return this;
      }
      public @NonNull GesturesSettings build() {
        GesturesSettings pigeonReturn = new GesturesSettings();
        pigeonReturn.setRotateEnabled(rotateEnabled);
        pigeonReturn.setPinchToZoomEnabled(pinchToZoomEnabled);
        pigeonReturn.setScrollEnabled(scrollEnabled);
        pigeonReturn.setSimultaneousRotateAndPinchToZoomEnabled(simultaneousRotateAndPinchToZoomEnabled);
        pigeonReturn.setPitchEnabled(pitchEnabled);
        pigeonReturn.setScrollMode(scrollMode);
        pigeonReturn.setDoubleTapToZoomInEnabled(doubleTapToZoomInEnabled);
        pigeonReturn.setDoubleTouchToZoomOutEnabled(doubleTouchToZoomOutEnabled);
        pigeonReturn.setQuickZoomEnabled(quickZoomEnabled);
        pigeonReturn.setFocalPoint(focalPoint);
        pigeonReturn.setPinchToZoomDecelerationEnabled(pinchToZoomDecelerationEnabled);
        pigeonReturn.setRotateDecelerationEnabled(rotateDecelerationEnabled);
        pigeonReturn.setScrollDecelerationEnabled(scrollDecelerationEnabled);
        pigeonReturn.setIncreaseRotateThresholdWhenPinchingToZoom(increaseRotateThresholdWhenPinchingToZoom);
        pigeonReturn.setIncreasePinchToZoomThresholdWhenRotating(increasePinchToZoomThresholdWhenRotating);
        pigeonReturn.setZoomAnimationAmount(zoomAnimationAmount);
        pigeonReturn.setPinchPanEnabled(pinchPanEnabled);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("rotateEnabled", rotateEnabled);
      toMapResult.put("pinchToZoomEnabled", pinchToZoomEnabled);
      toMapResult.put("scrollEnabled", scrollEnabled);
      toMapResult.put("simultaneousRotateAndPinchToZoomEnabled", simultaneousRotateAndPinchToZoomEnabled);
      toMapResult.put("pitchEnabled", pitchEnabled);
      toMapResult.put("scrollMode", scrollMode == null ? null : scrollMode.index);
      toMapResult.put("doubleTapToZoomInEnabled", doubleTapToZoomInEnabled);
      toMapResult.put("doubleTouchToZoomOutEnabled", doubleTouchToZoomOutEnabled);
      toMapResult.put("quickZoomEnabled", quickZoomEnabled);
      toMapResult.put("focalPoint", (focalPoint == null) ? null : focalPoint.toMap());
      toMapResult.put("pinchToZoomDecelerationEnabled", pinchToZoomDecelerationEnabled);
      toMapResult.put("rotateDecelerationEnabled", rotateDecelerationEnabled);
      toMapResult.put("scrollDecelerationEnabled", scrollDecelerationEnabled);
      toMapResult.put("increaseRotateThresholdWhenPinchingToZoom", increaseRotateThresholdWhenPinchingToZoom);
      toMapResult.put("increasePinchToZoomThresholdWhenRotating", increasePinchToZoomThresholdWhenRotating);
      toMapResult.put("zoomAnimationAmount", zoomAnimationAmount);
      toMapResult.put("pinchPanEnabled", pinchPanEnabled);
      return toMapResult;
    }
    static @NonNull GesturesSettings fromMap(@NonNull Map<String, Object> map) {
      GesturesSettings pigeonResult = new GesturesSettings();
      Object rotateEnabled = map.get("rotateEnabled");
      pigeonResult.setRotateEnabled((Boolean)rotateEnabled);
      Object pinchToZoomEnabled = map.get("pinchToZoomEnabled");
      pigeonResult.setPinchToZoomEnabled((Boolean)pinchToZoomEnabled);
      Object scrollEnabled = map.get("scrollEnabled");
      pigeonResult.setScrollEnabled((Boolean)scrollEnabled);
      Object simultaneousRotateAndPinchToZoomEnabled = map.get("simultaneousRotateAndPinchToZoomEnabled");
      pigeonResult.setSimultaneousRotateAndPinchToZoomEnabled((Boolean)simultaneousRotateAndPinchToZoomEnabled);
      Object pitchEnabled = map.get("pitchEnabled");
      pigeonResult.setPitchEnabled((Boolean)pitchEnabled);
      Object scrollMode = map.get("scrollMode");
      pigeonResult.setScrollMode(scrollMode == null ? null : ScrollMode.values()[(int)scrollMode]);
      Object doubleTapToZoomInEnabled = map.get("doubleTapToZoomInEnabled");
      pigeonResult.setDoubleTapToZoomInEnabled((Boolean)doubleTapToZoomInEnabled);
      Object doubleTouchToZoomOutEnabled = map.get("doubleTouchToZoomOutEnabled");
      pigeonResult.setDoubleTouchToZoomOutEnabled((Boolean)doubleTouchToZoomOutEnabled);
      Object quickZoomEnabled = map.get("quickZoomEnabled");
      pigeonResult.setQuickZoomEnabled((Boolean)quickZoomEnabled);
      Object focalPoint = map.get("focalPoint");
      pigeonResult.setFocalPoint((focalPoint == null) ? null : ScreenCoordinate.fromMap((Map)focalPoint));
      Object pinchToZoomDecelerationEnabled = map.get("pinchToZoomDecelerationEnabled");
      pigeonResult.setPinchToZoomDecelerationEnabled((Boolean)pinchToZoomDecelerationEnabled);
      Object rotateDecelerationEnabled = map.get("rotateDecelerationEnabled");
      pigeonResult.setRotateDecelerationEnabled((Boolean)rotateDecelerationEnabled);
      Object scrollDecelerationEnabled = map.get("scrollDecelerationEnabled");
      pigeonResult.setScrollDecelerationEnabled((Boolean)scrollDecelerationEnabled);
      Object increaseRotateThresholdWhenPinchingToZoom = map.get("increaseRotateThresholdWhenPinchingToZoom");
      pigeonResult.setIncreaseRotateThresholdWhenPinchingToZoom((Boolean)increaseRotateThresholdWhenPinchingToZoom);
      Object increasePinchToZoomThresholdWhenRotating = map.get("increasePinchToZoomThresholdWhenRotating");
      pigeonResult.setIncreasePinchToZoomThresholdWhenRotating((Boolean)increasePinchToZoomThresholdWhenRotating);
      Object zoomAnimationAmount = map.get("zoomAnimationAmount");
      pigeonResult.setZoomAnimationAmount((Double)zoomAnimationAmount);
      Object pinchPanEnabled = map.get("pinchPanEnabled");
      pigeonResult.setPinchPanEnabled((Boolean)pinchPanEnabled);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocationPuck2D {
    private @Nullable byte[] topImage;
    public @Nullable byte[] getTopImage() { return topImage; }
    public void setTopImage(@Nullable byte[] setterArg) {
      this.topImage = setterArg;
    }

    private @Nullable byte[] bearingImage;
    public @Nullable byte[] getBearingImage() { return bearingImage; }
    public void setBearingImage(@Nullable byte[] setterArg) {
      this.bearingImage = setterArg;
    }

    private @Nullable byte[] shadowImage;
    public @Nullable byte[] getShadowImage() { return shadowImage; }
    public void setShadowImage(@Nullable byte[] setterArg) {
      this.shadowImage = setterArg;
    }

    private @Nullable String scaleExpression;
    public @Nullable String getScaleExpression() { return scaleExpression; }
    public void setScaleExpression(@Nullable String setterArg) {
      this.scaleExpression = setterArg;
    }

    public static final class Builder {
      private @Nullable byte[] topImage;
      public @NonNull Builder setTopImage(@Nullable byte[] setterArg) {
        this.topImage = setterArg;
        return this;
      }
      private @Nullable byte[] bearingImage;
      public @NonNull Builder setBearingImage(@Nullable byte[] setterArg) {
        this.bearingImage = setterArg;
        return this;
      }
      private @Nullable byte[] shadowImage;
      public @NonNull Builder setShadowImage(@Nullable byte[] setterArg) {
        this.shadowImage = setterArg;
        return this;
      }
      private @Nullable String scaleExpression;
      public @NonNull Builder setScaleExpression(@Nullable String setterArg) {
        this.scaleExpression = setterArg;
        return this;
      }
      public @NonNull LocationPuck2D build() {
        LocationPuck2D pigeonReturn = new LocationPuck2D();
        pigeonReturn.setTopImage(topImage);
        pigeonReturn.setBearingImage(bearingImage);
        pigeonReturn.setShadowImage(shadowImage);
        pigeonReturn.setScaleExpression(scaleExpression);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("topImage", topImage);
      toMapResult.put("bearingImage", bearingImage);
      toMapResult.put("shadowImage", shadowImage);
      toMapResult.put("scaleExpression", scaleExpression);
      return toMapResult;
    }
    static @NonNull LocationPuck2D fromMap(@NonNull Map<String, Object> map) {
      LocationPuck2D pigeonResult = new LocationPuck2D();
      Object topImage = map.get("topImage");
      pigeonResult.setTopImage((byte[])topImage);
      Object bearingImage = map.get("bearingImage");
      pigeonResult.setBearingImage((byte[])bearingImage);
      Object shadowImage = map.get("shadowImage");
      pigeonResult.setShadowImage((byte[])shadowImage);
      Object scaleExpression = map.get("scaleExpression");
      pigeonResult.setScaleExpression((String)scaleExpression);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocationPuck3D {
    private @Nullable String modelUri;
    public @Nullable String getModelUri() { return modelUri; }
    public void setModelUri(@Nullable String setterArg) {
      this.modelUri = setterArg;
    }

    private @Nullable List<Double> position;
    public @Nullable List<Double> getPosition() { return position; }
    public void setPosition(@Nullable List<Double> setterArg) {
      this.position = setterArg;
    }

    private @Nullable Double modelOpacity;
    public @Nullable Double getModelOpacity() { return modelOpacity; }
    public void setModelOpacity(@Nullable Double setterArg) {
      this.modelOpacity = setterArg;
    }

    private @Nullable List<Double> modelScale;
    public @Nullable List<Double> getModelScale() { return modelScale; }
    public void setModelScale(@Nullable List<Double> setterArg) {
      this.modelScale = setterArg;
    }

    private @Nullable String modelScaleExpression;
    public @Nullable String getModelScaleExpression() { return modelScaleExpression; }
    public void setModelScaleExpression(@Nullable String setterArg) {
      this.modelScaleExpression = setterArg;
    }

    private @Nullable List<Double> modelTranslation;
    public @Nullable List<Double> getModelTranslation() { return modelTranslation; }
    public void setModelTranslation(@Nullable List<Double> setterArg) {
      this.modelTranslation = setterArg;
    }

    private @Nullable List<Double> modelRotation;
    public @Nullable List<Double> getModelRotation() { return modelRotation; }
    public void setModelRotation(@Nullable List<Double> setterArg) {
      this.modelRotation = setterArg;
    }

    public static final class Builder {
      private @Nullable String modelUri;
      public @NonNull Builder setModelUri(@Nullable String setterArg) {
        this.modelUri = setterArg;
        return this;
      }
      private @Nullable List<Double> position;
      public @NonNull Builder setPosition(@Nullable List<Double> setterArg) {
        this.position = setterArg;
        return this;
      }
      private @Nullable Double modelOpacity;
      public @NonNull Builder setModelOpacity(@Nullable Double setterArg) {
        this.modelOpacity = setterArg;
        return this;
      }
      private @Nullable List<Double> modelScale;
      public @NonNull Builder setModelScale(@Nullable List<Double> setterArg) {
        this.modelScale = setterArg;
        return this;
      }
      private @Nullable String modelScaleExpression;
      public @NonNull Builder setModelScaleExpression(@Nullable String setterArg) {
        this.modelScaleExpression = setterArg;
        return this;
      }
      private @Nullable List<Double> modelTranslation;
      public @NonNull Builder setModelTranslation(@Nullable List<Double> setterArg) {
        this.modelTranslation = setterArg;
        return this;
      }
      private @Nullable List<Double> modelRotation;
      public @NonNull Builder setModelRotation(@Nullable List<Double> setterArg) {
        this.modelRotation = setterArg;
        return this;
      }
      public @NonNull LocationPuck3D build() {
        LocationPuck3D pigeonReturn = new LocationPuck3D();
        pigeonReturn.setModelUri(modelUri);
        pigeonReturn.setPosition(position);
        pigeonReturn.setModelOpacity(modelOpacity);
        pigeonReturn.setModelScale(modelScale);
        pigeonReturn.setModelScaleExpression(modelScaleExpression);
        pigeonReturn.setModelTranslation(modelTranslation);
        pigeonReturn.setModelRotation(modelRotation);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("modelUri", modelUri);
      toMapResult.put("position", position);
      toMapResult.put("modelOpacity", modelOpacity);
      toMapResult.put("modelScale", modelScale);
      toMapResult.put("modelScaleExpression", modelScaleExpression);
      toMapResult.put("modelTranslation", modelTranslation);
      toMapResult.put("modelRotation", modelRotation);
      return toMapResult;
    }
    static @NonNull LocationPuck3D fromMap(@NonNull Map<String, Object> map) {
      LocationPuck3D pigeonResult = new LocationPuck3D();
      Object modelUri = map.get("modelUri");
      pigeonResult.setModelUri((String)modelUri);
      Object position = map.get("position");
      pigeonResult.setPosition((List<Double>)position);
      Object modelOpacity = map.get("modelOpacity");
      pigeonResult.setModelOpacity((Double)modelOpacity);
      Object modelScale = map.get("modelScale");
      pigeonResult.setModelScale((List<Double>)modelScale);
      Object modelScaleExpression = map.get("modelScaleExpression");
      pigeonResult.setModelScaleExpression((String)modelScaleExpression);
      Object modelTranslation = map.get("modelTranslation");
      pigeonResult.setModelTranslation((List<Double>)modelTranslation);
      Object modelRotation = map.get("modelRotation");
      pigeonResult.setModelRotation((List<Double>)modelRotation);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocationPuck {
    private @Nullable LocationPuck2D locationPuck2D;
    public @Nullable LocationPuck2D getLocationPuck2D() { return locationPuck2D; }
    public void setLocationPuck2D(@Nullable LocationPuck2D setterArg) {
      this.locationPuck2D = setterArg;
    }

    private @Nullable LocationPuck3D locationPuck3D;
    public @Nullable LocationPuck3D getLocationPuck3D() { return locationPuck3D; }
    public void setLocationPuck3D(@Nullable LocationPuck3D setterArg) {
      this.locationPuck3D = setterArg;
    }

    public static final class Builder {
      private @Nullable LocationPuck2D locationPuck2D;
      public @NonNull Builder setLocationPuck2D(@Nullable LocationPuck2D setterArg) {
        this.locationPuck2D = setterArg;
        return this;
      }
      private @Nullable LocationPuck3D locationPuck3D;
      public @NonNull Builder setLocationPuck3D(@Nullable LocationPuck3D setterArg) {
        this.locationPuck3D = setterArg;
        return this;
      }
      public @NonNull LocationPuck build() {
        LocationPuck pigeonReturn = new LocationPuck();
        pigeonReturn.setLocationPuck2D(locationPuck2D);
        pigeonReturn.setLocationPuck3D(locationPuck3D);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("locationPuck2D", (locationPuck2D == null) ? null : locationPuck2D.toMap());
      toMapResult.put("locationPuck3D", (locationPuck3D == null) ? null : locationPuck3D.toMap());
      return toMapResult;
    }
    static @NonNull LocationPuck fromMap(@NonNull Map<String, Object> map) {
      LocationPuck pigeonResult = new LocationPuck();
      Object locationPuck2D = map.get("locationPuck2D");
      pigeonResult.setLocationPuck2D((locationPuck2D == null) ? null : LocationPuck2D.fromMap((Map)locationPuck2D));
      Object locationPuck3D = map.get("locationPuck3D");
      pigeonResult.setLocationPuck3D((locationPuck3D == null) ? null : LocationPuck3D.fromMap((Map)locationPuck3D));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocationComponentSettings {
    private @Nullable Boolean enabled;
    public @Nullable Boolean getEnabled() { return enabled; }
    public void setEnabled(@Nullable Boolean setterArg) {
      this.enabled = setterArg;
    }

    private @Nullable Boolean pulsingEnabled;
    public @Nullable Boolean getPulsingEnabled() { return pulsingEnabled; }
    public void setPulsingEnabled(@Nullable Boolean setterArg) {
      this.pulsingEnabled = setterArg;
    }

    private @Nullable Long pulsingColor;
    public @Nullable Long getPulsingColor() { return pulsingColor; }
    public void setPulsingColor(@Nullable Long setterArg) {
      this.pulsingColor = setterArg;
    }

    private @Nullable Double pulsingMaxRadius;
    public @Nullable Double getPulsingMaxRadius() { return pulsingMaxRadius; }
    public void setPulsingMaxRadius(@Nullable Double setterArg) {
      this.pulsingMaxRadius = setterArg;
    }

    private @Nullable Boolean showAccuracyRing;
    public @Nullable Boolean getShowAccuracyRing() { return showAccuracyRing; }
    public void setShowAccuracyRing(@Nullable Boolean setterArg) {
      this.showAccuracyRing = setterArg;
    }

    private @Nullable Long accuracyRingColor;
    public @Nullable Long getAccuracyRingColor() { return accuracyRingColor; }
    public void setAccuracyRingColor(@Nullable Long setterArg) {
      this.accuracyRingColor = setterArg;
    }

    private @Nullable Long accuracyRingBorderColor;
    public @Nullable Long getAccuracyRingBorderColor() { return accuracyRingBorderColor; }
    public void setAccuracyRingBorderColor(@Nullable Long setterArg) {
      this.accuracyRingBorderColor = setterArg;
    }

    private @Nullable String layerAbove;
    public @Nullable String getLayerAbove() { return layerAbove; }
    public void setLayerAbove(@Nullable String setterArg) {
      this.layerAbove = setterArg;
    }

    private @Nullable String layerBelow;
    public @Nullable String getLayerBelow() { return layerBelow; }
    public void setLayerBelow(@Nullable String setterArg) {
      this.layerBelow = setterArg;
    }

    private @Nullable Boolean puckBearingEnabled;
    public @Nullable Boolean getPuckBearingEnabled() { return puckBearingEnabled; }
    public void setPuckBearingEnabled(@Nullable Boolean setterArg) {
      this.puckBearingEnabled = setterArg;
    }

    private @Nullable PuckBearingSource puckBearingSource;
    public @Nullable PuckBearingSource getPuckBearingSource() { return puckBearingSource; }
    public void setPuckBearingSource(@Nullable PuckBearingSource setterArg) {
      this.puckBearingSource = setterArg;
    }

    private @Nullable LocationPuck locationPuck;
    public @Nullable LocationPuck getLocationPuck() { return locationPuck; }
    public void setLocationPuck(@Nullable LocationPuck setterArg) {
      this.locationPuck = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean enabled;
      public @NonNull Builder setEnabled(@Nullable Boolean setterArg) {
        this.enabled = setterArg;
        return this;
      }
      private @Nullable Boolean pulsingEnabled;
      public @NonNull Builder setPulsingEnabled(@Nullable Boolean setterArg) {
        this.pulsingEnabled = setterArg;
        return this;
      }
      private @Nullable Long pulsingColor;
      public @NonNull Builder setPulsingColor(@Nullable Long setterArg) {
        this.pulsingColor = setterArg;
        return this;
      }
      private @Nullable Double pulsingMaxRadius;
      public @NonNull Builder setPulsingMaxRadius(@Nullable Double setterArg) {
        this.pulsingMaxRadius = setterArg;
        return this;
      }
      private @Nullable Boolean showAccuracyRing;
      public @NonNull Builder setShowAccuracyRing(@Nullable Boolean setterArg) {
        this.showAccuracyRing = setterArg;
        return this;
      }
      private @Nullable Long accuracyRingColor;
      public @NonNull Builder setAccuracyRingColor(@Nullable Long setterArg) {
        this.accuracyRingColor = setterArg;
        return this;
      }
      private @Nullable Long accuracyRingBorderColor;
      public @NonNull Builder setAccuracyRingBorderColor(@Nullable Long setterArg) {
        this.accuracyRingBorderColor = setterArg;
        return this;
      }
      private @Nullable String layerAbove;
      public @NonNull Builder setLayerAbove(@Nullable String setterArg) {
        this.layerAbove = setterArg;
        return this;
      }
      private @Nullable String layerBelow;
      public @NonNull Builder setLayerBelow(@Nullable String setterArg) {
        this.layerBelow = setterArg;
        return this;
      }
      private @Nullable Boolean puckBearingEnabled;
      public @NonNull Builder setPuckBearingEnabled(@Nullable Boolean setterArg) {
        this.puckBearingEnabled = setterArg;
        return this;
      }
      private @Nullable PuckBearingSource puckBearingSource;
      public @NonNull Builder setPuckBearingSource(@Nullable PuckBearingSource setterArg) {
        this.puckBearingSource = setterArg;
        return this;
      }
      private @Nullable LocationPuck locationPuck;
      public @NonNull Builder setLocationPuck(@Nullable LocationPuck setterArg) {
        this.locationPuck = setterArg;
        return this;
      }
      public @NonNull LocationComponentSettings build() {
        LocationComponentSettings pigeonReturn = new LocationComponentSettings();
        pigeonReturn.setEnabled(enabled);
        pigeonReturn.setPulsingEnabled(pulsingEnabled);
        pigeonReturn.setPulsingColor(pulsingColor);
        pigeonReturn.setPulsingMaxRadius(pulsingMaxRadius);
        pigeonReturn.setShowAccuracyRing(showAccuracyRing);
        pigeonReturn.setAccuracyRingColor(accuracyRingColor);
        pigeonReturn.setAccuracyRingBorderColor(accuracyRingBorderColor);
        pigeonReturn.setLayerAbove(layerAbove);
        pigeonReturn.setLayerBelow(layerBelow);
        pigeonReturn.setPuckBearingEnabled(puckBearingEnabled);
        pigeonReturn.setPuckBearingSource(puckBearingSource);
        pigeonReturn.setLocationPuck(locationPuck);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("enabled", enabled);
      toMapResult.put("pulsingEnabled", pulsingEnabled);
      toMapResult.put("pulsingColor", pulsingColor);
      toMapResult.put("pulsingMaxRadius", pulsingMaxRadius);
      toMapResult.put("showAccuracyRing", showAccuracyRing);
      toMapResult.put("accuracyRingColor", accuracyRingColor);
      toMapResult.put("accuracyRingBorderColor", accuracyRingBorderColor);
      toMapResult.put("layerAbove", layerAbove);
      toMapResult.put("layerBelow", layerBelow);
      toMapResult.put("puckBearingEnabled", puckBearingEnabled);
      toMapResult.put("puckBearingSource", puckBearingSource == null ? null : puckBearingSource.index);
      toMapResult.put("locationPuck", (locationPuck == null) ? null : locationPuck.toMap());
      return toMapResult;
    }
    static @NonNull LocationComponentSettings fromMap(@NonNull Map<String, Object> map) {
      LocationComponentSettings pigeonResult = new LocationComponentSettings();
      Object enabled = map.get("enabled");
      pigeonResult.setEnabled((Boolean)enabled);
      Object pulsingEnabled = map.get("pulsingEnabled");
      pigeonResult.setPulsingEnabled((Boolean)pulsingEnabled);
      Object pulsingColor = map.get("pulsingColor");
      pigeonResult.setPulsingColor((pulsingColor == null) ? null : ((pulsingColor instanceof Integer) ? (Integer)pulsingColor : (Long)pulsingColor));
      Object pulsingMaxRadius = map.get("pulsingMaxRadius");
      pigeonResult.setPulsingMaxRadius((Double)pulsingMaxRadius);
      Object showAccuracyRing = map.get("showAccuracyRing");
      pigeonResult.setShowAccuracyRing((Boolean)showAccuracyRing);
      Object accuracyRingColor = map.get("accuracyRingColor");
      pigeonResult.setAccuracyRingColor((accuracyRingColor == null) ? null : ((accuracyRingColor instanceof Integer) ? (Integer)accuracyRingColor : (Long)accuracyRingColor));
      Object accuracyRingBorderColor = map.get("accuracyRingBorderColor");
      pigeonResult.setAccuracyRingBorderColor((accuracyRingBorderColor == null) ? null : ((accuracyRingBorderColor instanceof Integer) ? (Integer)accuracyRingBorderColor : (Long)accuracyRingBorderColor));
      Object layerAbove = map.get("layerAbove");
      pigeonResult.setLayerAbove((String)layerAbove);
      Object layerBelow = map.get("layerBelow");
      pigeonResult.setLayerBelow((String)layerBelow);
      Object puckBearingEnabled = map.get("puckBearingEnabled");
      pigeonResult.setPuckBearingEnabled((Boolean)puckBearingEnabled);
      Object puckBearingSource = map.get("puckBearingSource");
      pigeonResult.setPuckBearingSource(puckBearingSource == null ? null : PuckBearingSource.values()[(int)puckBearingSource]);
      Object locationPuck = map.get("locationPuck");
      pigeonResult.setLocationPuck((locationPuck == null) ? null : LocationPuck.fromMap((Map)locationPuck));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ScaleBarSettings {
    private @Nullable Boolean enabled;
    public @Nullable Boolean getEnabled() { return enabled; }
    public void setEnabled(@Nullable Boolean setterArg) {
      this.enabled = setterArg;
    }

    private @Nullable OrnamentPosition position;
    public @Nullable OrnamentPosition getPosition() { return position; }
    public void setPosition(@Nullable OrnamentPosition setterArg) {
      this.position = setterArg;
    }

    private @Nullable Double marginLeft;
    public @Nullable Double getMarginLeft() { return marginLeft; }
    public void setMarginLeft(@Nullable Double setterArg) {
      this.marginLeft = setterArg;
    }

    private @Nullable Double marginTop;
    public @Nullable Double getMarginTop() { return marginTop; }
    public void setMarginTop(@Nullable Double setterArg) {
      this.marginTop = setterArg;
    }

    private @Nullable Double marginRight;
    public @Nullable Double getMarginRight() { return marginRight; }
    public void setMarginRight(@Nullable Double setterArg) {
      this.marginRight = setterArg;
    }

    private @Nullable Double marginBottom;
    public @Nullable Double getMarginBottom() { return marginBottom; }
    public void setMarginBottom(@Nullable Double setterArg) {
      this.marginBottom = setterArg;
    }

    private @Nullable Long textColor;
    public @Nullable Long getTextColor() { return textColor; }
    public void setTextColor(@Nullable Long setterArg) {
      this.textColor = setterArg;
    }

    private @Nullable Long primaryColor;
    public @Nullable Long getPrimaryColor() { return primaryColor; }
    public void setPrimaryColor(@Nullable Long setterArg) {
      this.primaryColor = setterArg;
    }

    private @Nullable Long secondaryColor;
    public @Nullable Long getSecondaryColor() { return secondaryColor; }
    public void setSecondaryColor(@Nullable Long setterArg) {
      this.secondaryColor = setterArg;
    }

    private @Nullable Double borderWidth;
    public @Nullable Double getBorderWidth() { return borderWidth; }
    public void setBorderWidth(@Nullable Double setterArg) {
      this.borderWidth = setterArg;
    }

    private @Nullable Double height;
    public @Nullable Double getHeight() { return height; }
    public void setHeight(@Nullable Double setterArg) {
      this.height = setterArg;
    }

    private @Nullable Double textBarMargin;
    public @Nullable Double getTextBarMargin() { return textBarMargin; }
    public void setTextBarMargin(@Nullable Double setterArg) {
      this.textBarMargin = setterArg;
    }

    private @Nullable Double textBorderWidth;
    public @Nullable Double getTextBorderWidth() { return textBorderWidth; }
    public void setTextBorderWidth(@Nullable Double setterArg) {
      this.textBorderWidth = setterArg;
    }

    private @Nullable Double textSize;
    public @Nullable Double getTextSize() { return textSize; }
    public void setTextSize(@Nullable Double setterArg) {
      this.textSize = setterArg;
    }

    private @Nullable Boolean isMetricUnits;
    public @Nullable Boolean getIsMetricUnits() { return isMetricUnits; }
    public void setIsMetricUnits(@Nullable Boolean setterArg) {
      this.isMetricUnits = setterArg;
    }

    private @Nullable Long refreshInterval;
    public @Nullable Long getRefreshInterval() { return refreshInterval; }
    public void setRefreshInterval(@Nullable Long setterArg) {
      this.refreshInterval = setterArg;
    }

    private @Nullable Boolean showTextBorder;
    public @Nullable Boolean getShowTextBorder() { return showTextBorder; }
    public void setShowTextBorder(@Nullable Boolean setterArg) {
      this.showTextBorder = setterArg;
    }

    private @Nullable Double ratio;
    public @Nullable Double getRatio() { return ratio; }
    public void setRatio(@Nullable Double setterArg) {
      this.ratio = setterArg;
    }

    private @Nullable Boolean useContinuousRendering;
    public @Nullable Boolean getUseContinuousRendering() { return useContinuousRendering; }
    public void setUseContinuousRendering(@Nullable Boolean setterArg) {
      this.useContinuousRendering = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean enabled;
      public @NonNull Builder setEnabled(@Nullable Boolean setterArg) {
        this.enabled = setterArg;
        return this;
      }
      private @Nullable OrnamentPosition position;
      public @NonNull Builder setPosition(@Nullable OrnamentPosition setterArg) {
        this.position = setterArg;
        return this;
      }
      private @Nullable Double marginLeft;
      public @NonNull Builder setMarginLeft(@Nullable Double setterArg) {
        this.marginLeft = setterArg;
        return this;
      }
      private @Nullable Double marginTop;
      public @NonNull Builder setMarginTop(@Nullable Double setterArg) {
        this.marginTop = setterArg;
        return this;
      }
      private @Nullable Double marginRight;
      public @NonNull Builder setMarginRight(@Nullable Double setterArg) {
        this.marginRight = setterArg;
        return this;
      }
      private @Nullable Double marginBottom;
      public @NonNull Builder setMarginBottom(@Nullable Double setterArg) {
        this.marginBottom = setterArg;
        return this;
      }
      private @Nullable Long textColor;
      public @NonNull Builder setTextColor(@Nullable Long setterArg) {
        this.textColor = setterArg;
        return this;
      }
      private @Nullable Long primaryColor;
      public @NonNull Builder setPrimaryColor(@Nullable Long setterArg) {
        this.primaryColor = setterArg;
        return this;
      }
      private @Nullable Long secondaryColor;
      public @NonNull Builder setSecondaryColor(@Nullable Long setterArg) {
        this.secondaryColor = setterArg;
        return this;
      }
      private @Nullable Double borderWidth;
      public @NonNull Builder setBorderWidth(@Nullable Double setterArg) {
        this.borderWidth = setterArg;
        return this;
      }
      private @Nullable Double height;
      public @NonNull Builder setHeight(@Nullable Double setterArg) {
        this.height = setterArg;
        return this;
      }
      private @Nullable Double textBarMargin;
      public @NonNull Builder setTextBarMargin(@Nullable Double setterArg) {
        this.textBarMargin = setterArg;
        return this;
      }
      private @Nullable Double textBorderWidth;
      public @NonNull Builder setTextBorderWidth(@Nullable Double setterArg) {
        this.textBorderWidth = setterArg;
        return this;
      }
      private @Nullable Double textSize;
      public @NonNull Builder setTextSize(@Nullable Double setterArg) {
        this.textSize = setterArg;
        return this;
      }
      private @Nullable Boolean isMetricUnits;
      public @NonNull Builder setIsMetricUnits(@Nullable Boolean setterArg) {
        this.isMetricUnits = setterArg;
        return this;
      }
      private @Nullable Long refreshInterval;
      public @NonNull Builder setRefreshInterval(@Nullable Long setterArg) {
        this.refreshInterval = setterArg;
        return this;
      }
      private @Nullable Boolean showTextBorder;
      public @NonNull Builder setShowTextBorder(@Nullable Boolean setterArg) {
        this.showTextBorder = setterArg;
        return this;
      }
      private @Nullable Double ratio;
      public @NonNull Builder setRatio(@Nullable Double setterArg) {
        this.ratio = setterArg;
        return this;
      }
      private @Nullable Boolean useContinuousRendering;
      public @NonNull Builder setUseContinuousRendering(@Nullable Boolean setterArg) {
        this.useContinuousRendering = setterArg;
        return this;
      }
      public @NonNull ScaleBarSettings build() {
        ScaleBarSettings pigeonReturn = new ScaleBarSettings();
        pigeonReturn.setEnabled(enabled);
        pigeonReturn.setPosition(position);
        pigeonReturn.setMarginLeft(marginLeft);
        pigeonReturn.setMarginTop(marginTop);
        pigeonReturn.setMarginRight(marginRight);
        pigeonReturn.setMarginBottom(marginBottom);
        pigeonReturn.setTextColor(textColor);
        pigeonReturn.setPrimaryColor(primaryColor);
        pigeonReturn.setSecondaryColor(secondaryColor);
        pigeonReturn.setBorderWidth(borderWidth);
        pigeonReturn.setHeight(height);
        pigeonReturn.setTextBarMargin(textBarMargin);
        pigeonReturn.setTextBorderWidth(textBorderWidth);
        pigeonReturn.setTextSize(textSize);
        pigeonReturn.setIsMetricUnits(isMetricUnits);
        pigeonReturn.setRefreshInterval(refreshInterval);
        pigeonReturn.setShowTextBorder(showTextBorder);
        pigeonReturn.setRatio(ratio);
        pigeonReturn.setUseContinuousRendering(useContinuousRendering);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("enabled", enabled);
      toMapResult.put("position", position == null ? null : position.index);
      toMapResult.put("marginLeft", marginLeft);
      toMapResult.put("marginTop", marginTop);
      toMapResult.put("marginRight", marginRight);
      toMapResult.put("marginBottom", marginBottom);
      toMapResult.put("textColor", textColor);
      toMapResult.put("primaryColor", primaryColor);
      toMapResult.put("secondaryColor", secondaryColor);
      toMapResult.put("borderWidth", borderWidth);
      toMapResult.put("height", height);
      toMapResult.put("textBarMargin", textBarMargin);
      toMapResult.put("textBorderWidth", textBorderWidth);
      toMapResult.put("textSize", textSize);
      toMapResult.put("isMetricUnits", isMetricUnits);
      toMapResult.put("refreshInterval", refreshInterval);
      toMapResult.put("showTextBorder", showTextBorder);
      toMapResult.put("ratio", ratio);
      toMapResult.put("useContinuousRendering", useContinuousRendering);
      return toMapResult;
    }
    static @NonNull ScaleBarSettings fromMap(@NonNull Map<String, Object> map) {
      ScaleBarSettings pigeonResult = new ScaleBarSettings();
      Object enabled = map.get("enabled");
      pigeonResult.setEnabled((Boolean)enabled);
      Object position = map.get("position");
      pigeonResult.setPosition(position == null ? null : OrnamentPosition.values()[(int)position]);
      Object marginLeft = map.get("marginLeft");
      pigeonResult.setMarginLeft((Double)marginLeft);
      Object marginTop = map.get("marginTop");
      pigeonResult.setMarginTop((Double)marginTop);
      Object marginRight = map.get("marginRight");
      pigeonResult.setMarginRight((Double)marginRight);
      Object marginBottom = map.get("marginBottom");
      pigeonResult.setMarginBottom((Double)marginBottom);
      Object textColor = map.get("textColor");
      pigeonResult.setTextColor((textColor == null) ? null : ((textColor instanceof Integer) ? (Integer)textColor : (Long)textColor));
      Object primaryColor = map.get("primaryColor");
      pigeonResult.setPrimaryColor((primaryColor == null) ? null : ((primaryColor instanceof Integer) ? (Integer)primaryColor : (Long)primaryColor));
      Object secondaryColor = map.get("secondaryColor");
      pigeonResult.setSecondaryColor((secondaryColor == null) ? null : ((secondaryColor instanceof Integer) ? (Integer)secondaryColor : (Long)secondaryColor));
      Object borderWidth = map.get("borderWidth");
      pigeonResult.setBorderWidth((Double)borderWidth);
      Object height = map.get("height");
      pigeonResult.setHeight((Double)height);
      Object textBarMargin = map.get("textBarMargin");
      pigeonResult.setTextBarMargin((Double)textBarMargin);
      Object textBorderWidth = map.get("textBorderWidth");
      pigeonResult.setTextBorderWidth((Double)textBorderWidth);
      Object textSize = map.get("textSize");
      pigeonResult.setTextSize((Double)textSize);
      Object isMetricUnits = map.get("isMetricUnits");
      pigeonResult.setIsMetricUnits((Boolean)isMetricUnits);
      Object refreshInterval = map.get("refreshInterval");
      pigeonResult.setRefreshInterval((refreshInterval == null) ? null : ((refreshInterval instanceof Integer) ? (Integer)refreshInterval : (Long)refreshInterval));
      Object showTextBorder = map.get("showTextBorder");
      pigeonResult.setShowTextBorder((Boolean)showTextBorder);
      Object ratio = map.get("ratio");
      pigeonResult.setRatio((Double)ratio);
      Object useContinuousRendering = map.get("useContinuousRendering");
      pigeonResult.setUseContinuousRendering((Boolean)useContinuousRendering);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CompassSettings {
    private @Nullable Boolean enabled;
    public @Nullable Boolean getEnabled() { return enabled; }
    public void setEnabled(@Nullable Boolean setterArg) {
      this.enabled = setterArg;
    }

    private @Nullable OrnamentPosition position;
    public @Nullable OrnamentPosition getPosition() { return position; }
    public void setPosition(@Nullable OrnamentPosition setterArg) {
      this.position = setterArg;
    }

    private @Nullable Double marginLeft;
    public @Nullable Double getMarginLeft() { return marginLeft; }
    public void setMarginLeft(@Nullable Double setterArg) {
      this.marginLeft = setterArg;
    }

    private @Nullable Double marginTop;
    public @Nullable Double getMarginTop() { return marginTop; }
    public void setMarginTop(@Nullable Double setterArg) {
      this.marginTop = setterArg;
    }

    private @Nullable Double marginRight;
    public @Nullable Double getMarginRight() { return marginRight; }
    public void setMarginRight(@Nullable Double setterArg) {
      this.marginRight = setterArg;
    }

    private @Nullable Double marginBottom;
    public @Nullable Double getMarginBottom() { return marginBottom; }
    public void setMarginBottom(@Nullable Double setterArg) {
      this.marginBottom = setterArg;
    }

    private @Nullable Double opacity;
    public @Nullable Double getOpacity() { return opacity; }
    public void setOpacity(@Nullable Double setterArg) {
      this.opacity = setterArg;
    }

    private @Nullable Double rotation;
    public @Nullable Double getRotation() { return rotation; }
    public void setRotation(@Nullable Double setterArg) {
      this.rotation = setterArg;
    }

    private @Nullable Boolean visibility;
    public @Nullable Boolean getVisibility() { return visibility; }
    public void setVisibility(@Nullable Boolean setterArg) {
      this.visibility = setterArg;
    }

    private @Nullable Boolean fadeWhenFacingNorth;
    public @Nullable Boolean getFadeWhenFacingNorth() { return fadeWhenFacingNorth; }
    public void setFadeWhenFacingNorth(@Nullable Boolean setterArg) {
      this.fadeWhenFacingNorth = setterArg;
    }

    private @Nullable Boolean clickable;
    public @Nullable Boolean getClickable() { return clickable; }
    public void setClickable(@Nullable Boolean setterArg) {
      this.clickable = setterArg;
    }

    private @Nullable byte[] image;
    public @Nullable byte[] getImage() { return image; }
    public void setImage(@Nullable byte[] setterArg) {
      this.image = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean enabled;
      public @NonNull Builder setEnabled(@Nullable Boolean setterArg) {
        this.enabled = setterArg;
        return this;
      }
      private @Nullable OrnamentPosition position;
      public @NonNull Builder setPosition(@Nullable OrnamentPosition setterArg) {
        this.position = setterArg;
        return this;
      }
      private @Nullable Double marginLeft;
      public @NonNull Builder setMarginLeft(@Nullable Double setterArg) {
        this.marginLeft = setterArg;
        return this;
      }
      private @Nullable Double marginTop;
      public @NonNull Builder setMarginTop(@Nullable Double setterArg) {
        this.marginTop = setterArg;
        return this;
      }
      private @Nullable Double marginRight;
      public @NonNull Builder setMarginRight(@Nullable Double setterArg) {
        this.marginRight = setterArg;
        return this;
      }
      private @Nullable Double marginBottom;
      public @NonNull Builder setMarginBottom(@Nullable Double setterArg) {
        this.marginBottom = setterArg;
        return this;
      }
      private @Nullable Double opacity;
      public @NonNull Builder setOpacity(@Nullable Double setterArg) {
        this.opacity = setterArg;
        return this;
      }
      private @Nullable Double rotation;
      public @NonNull Builder setRotation(@Nullable Double setterArg) {
        this.rotation = setterArg;
        return this;
      }
      private @Nullable Boolean visibility;
      public @NonNull Builder setVisibility(@Nullable Boolean setterArg) {
        this.visibility = setterArg;
        return this;
      }
      private @Nullable Boolean fadeWhenFacingNorth;
      public @NonNull Builder setFadeWhenFacingNorth(@Nullable Boolean setterArg) {
        this.fadeWhenFacingNorth = setterArg;
        return this;
      }
      private @Nullable Boolean clickable;
      public @NonNull Builder setClickable(@Nullable Boolean setterArg) {
        this.clickable = setterArg;
        return this;
      }
      private @Nullable byte[] image;
      public @NonNull Builder setImage(@Nullable byte[] setterArg) {
        this.image = setterArg;
        return this;
      }
      public @NonNull CompassSettings build() {
        CompassSettings pigeonReturn = new CompassSettings();
        pigeonReturn.setEnabled(enabled);
        pigeonReturn.setPosition(position);
        pigeonReturn.setMarginLeft(marginLeft);
        pigeonReturn.setMarginTop(marginTop);
        pigeonReturn.setMarginRight(marginRight);
        pigeonReturn.setMarginBottom(marginBottom);
        pigeonReturn.setOpacity(opacity);
        pigeonReturn.setRotation(rotation);
        pigeonReturn.setVisibility(visibility);
        pigeonReturn.setFadeWhenFacingNorth(fadeWhenFacingNorth);
        pigeonReturn.setClickable(clickable);
        pigeonReturn.setImage(image);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("enabled", enabled);
      toMapResult.put("position", position == null ? null : position.index);
      toMapResult.put("marginLeft", marginLeft);
      toMapResult.put("marginTop", marginTop);
      toMapResult.put("marginRight", marginRight);
      toMapResult.put("marginBottom", marginBottom);
      toMapResult.put("opacity", opacity);
      toMapResult.put("rotation", rotation);
      toMapResult.put("visibility", visibility);
      toMapResult.put("fadeWhenFacingNorth", fadeWhenFacingNorth);
      toMapResult.put("clickable", clickable);
      toMapResult.put("image", image);
      return toMapResult;
    }
    static @NonNull CompassSettings fromMap(@NonNull Map<String, Object> map) {
      CompassSettings pigeonResult = new CompassSettings();
      Object enabled = map.get("enabled");
      pigeonResult.setEnabled((Boolean)enabled);
      Object position = map.get("position");
      pigeonResult.setPosition(position == null ? null : OrnamentPosition.values()[(int)position]);
      Object marginLeft = map.get("marginLeft");
      pigeonResult.setMarginLeft((Double)marginLeft);
      Object marginTop = map.get("marginTop");
      pigeonResult.setMarginTop((Double)marginTop);
      Object marginRight = map.get("marginRight");
      pigeonResult.setMarginRight((Double)marginRight);
      Object marginBottom = map.get("marginBottom");
      pigeonResult.setMarginBottom((Double)marginBottom);
      Object opacity = map.get("opacity");
      pigeonResult.setOpacity((Double)opacity);
      Object rotation = map.get("rotation");
      pigeonResult.setRotation((Double)rotation);
      Object visibility = map.get("visibility");
      pigeonResult.setVisibility((Boolean)visibility);
      Object fadeWhenFacingNorth = map.get("fadeWhenFacingNorth");
      pigeonResult.setFadeWhenFacingNorth((Boolean)fadeWhenFacingNorth);
      Object clickable = map.get("clickable");
      pigeonResult.setClickable((Boolean)clickable);
      Object image = map.get("image");
      pigeonResult.setImage((byte[])image);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AttributionSettings {
    private @Nullable Boolean enabled;
    public @Nullable Boolean getEnabled() { return enabled; }
    public void setEnabled(@Nullable Boolean setterArg) {
      this.enabled = setterArg;
    }

    private @Nullable Long iconColor;
    public @Nullable Long getIconColor() { return iconColor; }
    public void setIconColor(@Nullable Long setterArg) {
      this.iconColor = setterArg;
    }

    private @Nullable OrnamentPosition position;
    public @Nullable OrnamentPosition getPosition() { return position; }
    public void setPosition(@Nullable OrnamentPosition setterArg) {
      this.position = setterArg;
    }

    private @Nullable Double marginLeft;
    public @Nullable Double getMarginLeft() { return marginLeft; }
    public void setMarginLeft(@Nullable Double setterArg) {
      this.marginLeft = setterArg;
    }

    private @Nullable Double marginTop;
    public @Nullable Double getMarginTop() { return marginTop; }
    public void setMarginTop(@Nullable Double setterArg) {
      this.marginTop = setterArg;
    }

    private @Nullable Double marginRight;
    public @Nullable Double getMarginRight() { return marginRight; }
    public void setMarginRight(@Nullable Double setterArg) {
      this.marginRight = setterArg;
    }

    private @Nullable Double marginBottom;
    public @Nullable Double getMarginBottom() { return marginBottom; }
    public void setMarginBottom(@Nullable Double setterArg) {
      this.marginBottom = setterArg;
    }

    private @Nullable Boolean clickable;
    public @Nullable Boolean getClickable() { return clickable; }
    public void setClickable(@Nullable Boolean setterArg) {
      this.clickable = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean enabled;
      public @NonNull Builder setEnabled(@Nullable Boolean setterArg) {
        this.enabled = setterArg;
        return this;
      }
      private @Nullable Long iconColor;
      public @NonNull Builder setIconColor(@Nullable Long setterArg) {
        this.iconColor = setterArg;
        return this;
      }
      private @Nullable OrnamentPosition position;
      public @NonNull Builder setPosition(@Nullable OrnamentPosition setterArg) {
        this.position = setterArg;
        return this;
      }
      private @Nullable Double marginLeft;
      public @NonNull Builder setMarginLeft(@Nullable Double setterArg) {
        this.marginLeft = setterArg;
        return this;
      }
      private @Nullable Double marginTop;
      public @NonNull Builder setMarginTop(@Nullable Double setterArg) {
        this.marginTop = setterArg;
        return this;
      }
      private @Nullable Double marginRight;
      public @NonNull Builder setMarginRight(@Nullable Double setterArg) {
        this.marginRight = setterArg;
        return this;
      }
      private @Nullable Double marginBottom;
      public @NonNull Builder setMarginBottom(@Nullable Double setterArg) {
        this.marginBottom = setterArg;
        return this;
      }
      private @Nullable Boolean clickable;
      public @NonNull Builder setClickable(@Nullable Boolean setterArg) {
        this.clickable = setterArg;
        return this;
      }
      public @NonNull AttributionSettings build() {
        AttributionSettings pigeonReturn = new AttributionSettings();
        pigeonReturn.setEnabled(enabled);
        pigeonReturn.setIconColor(iconColor);
        pigeonReturn.setPosition(position);
        pigeonReturn.setMarginLeft(marginLeft);
        pigeonReturn.setMarginTop(marginTop);
        pigeonReturn.setMarginRight(marginRight);
        pigeonReturn.setMarginBottom(marginBottom);
        pigeonReturn.setClickable(clickable);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("enabled", enabled);
      toMapResult.put("iconColor", iconColor);
      toMapResult.put("position", position == null ? null : position.index);
      toMapResult.put("marginLeft", marginLeft);
      toMapResult.put("marginTop", marginTop);
      toMapResult.put("marginRight", marginRight);
      toMapResult.put("marginBottom", marginBottom);
      toMapResult.put("clickable", clickable);
      return toMapResult;
    }
    static @NonNull AttributionSettings fromMap(@NonNull Map<String, Object> map) {
      AttributionSettings pigeonResult = new AttributionSettings();
      Object enabled = map.get("enabled");
      pigeonResult.setEnabled((Boolean)enabled);
      Object iconColor = map.get("iconColor");
      pigeonResult.setIconColor((iconColor == null) ? null : ((iconColor instanceof Integer) ? (Integer)iconColor : (Long)iconColor));
      Object position = map.get("position");
      pigeonResult.setPosition(position == null ? null : OrnamentPosition.values()[(int)position]);
      Object marginLeft = map.get("marginLeft");
      pigeonResult.setMarginLeft((Double)marginLeft);
      Object marginTop = map.get("marginTop");
      pigeonResult.setMarginTop((Double)marginTop);
      Object marginRight = map.get("marginRight");
      pigeonResult.setMarginRight((Double)marginRight);
      Object marginBottom = map.get("marginBottom");
      pigeonResult.setMarginBottom((Double)marginBottom);
      Object clickable = map.get("clickable");
      pigeonResult.setClickable((Boolean)clickable);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LogoSettings {
    private @Nullable Boolean enabled;
    public @Nullable Boolean getEnabled() { return enabled; }
    public void setEnabled(@Nullable Boolean setterArg) {
      this.enabled = setterArg;
    }

    private @Nullable OrnamentPosition position;
    public @Nullable OrnamentPosition getPosition() { return position; }
    public void setPosition(@Nullable OrnamentPosition setterArg) {
      this.position = setterArg;
    }

    private @Nullable Double marginLeft;
    public @Nullable Double getMarginLeft() { return marginLeft; }
    public void setMarginLeft(@Nullable Double setterArg) {
      this.marginLeft = setterArg;
    }

    private @Nullable Double marginTop;
    public @Nullable Double getMarginTop() { return marginTop; }
    public void setMarginTop(@Nullable Double setterArg) {
      this.marginTop = setterArg;
    }

    private @Nullable Double marginRight;
    public @Nullable Double getMarginRight() { return marginRight; }
    public void setMarginRight(@Nullable Double setterArg) {
      this.marginRight = setterArg;
    }

    private @Nullable Double marginBottom;
    public @Nullable Double getMarginBottom() { return marginBottom; }
    public void setMarginBottom(@Nullable Double setterArg) {
      this.marginBottom = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean enabled;
      public @NonNull Builder setEnabled(@Nullable Boolean setterArg) {
        this.enabled = setterArg;
        return this;
      }
      private @Nullable OrnamentPosition position;
      public @NonNull Builder setPosition(@Nullable OrnamentPosition setterArg) {
        this.position = setterArg;
        return this;
      }
      private @Nullable Double marginLeft;
      public @NonNull Builder setMarginLeft(@Nullable Double setterArg) {
        this.marginLeft = setterArg;
        return this;
      }
      private @Nullable Double marginTop;
      public @NonNull Builder setMarginTop(@Nullable Double setterArg) {
        this.marginTop = setterArg;
        return this;
      }
      private @Nullable Double marginRight;
      public @NonNull Builder setMarginRight(@Nullable Double setterArg) {
        this.marginRight = setterArg;
        return this;
      }
      private @Nullable Double marginBottom;
      public @NonNull Builder setMarginBottom(@Nullable Double setterArg) {
        this.marginBottom = setterArg;
        return this;
      }
      public @NonNull LogoSettings build() {
        LogoSettings pigeonReturn = new LogoSettings();
        pigeonReturn.setEnabled(enabled);
        pigeonReturn.setPosition(position);
        pigeonReturn.setMarginLeft(marginLeft);
        pigeonReturn.setMarginTop(marginTop);
        pigeonReturn.setMarginRight(marginRight);
        pigeonReturn.setMarginBottom(marginBottom);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("enabled", enabled);
      toMapResult.put("position", position == null ? null : position.index);
      toMapResult.put("marginLeft", marginLeft);
      toMapResult.put("marginTop", marginTop);
      toMapResult.put("marginRight", marginRight);
      toMapResult.put("marginBottom", marginBottom);
      return toMapResult;
    }
    static @NonNull LogoSettings fromMap(@NonNull Map<String, Object> map) {
      LogoSettings pigeonResult = new LogoSettings();
      Object enabled = map.get("enabled");
      pigeonResult.setEnabled((Boolean)enabled);
      Object position = map.get("position");
      pigeonResult.setPosition(position == null ? null : OrnamentPosition.values()[(int)position]);
      Object marginLeft = map.get("marginLeft");
      pigeonResult.setMarginLeft((Double)marginLeft);
      Object marginTop = map.get("marginTop");
      pigeonResult.setMarginTop((Double)marginTop);
      Object marginRight = map.get("marginRight");
      pigeonResult.setMarginRight((Double)marginRight);
      Object marginBottom = map.get("marginBottom");
      pigeonResult.setMarginBottom((Double)marginBottom);
      return pigeonResult;
    }
  }
  private static class GesturesSettingsInterfaceCodec extends StandardMessageCodec {
    public static final GesturesSettingsInterfaceCodec INSTANCE = new GesturesSettingsInterfaceCodec();
    private GesturesSettingsInterfaceCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return GesturesSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ScreenCoordinate.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof GesturesSettings) {
        stream.write(128);
        writeValue(stream, ((GesturesSettings) value).toMap());
      } else 
      if (value instanceof ScreenCoordinate) {
        stream.write(129);
        writeValue(stream, ((ScreenCoordinate) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface GesturesSettingsInterface {
    @NonNull GesturesSettings getSettings();
    void updateSettings(@NonNull GesturesSettings settings);

    /** The codec used by GesturesSettingsInterface. */
    static MessageCodec<Object> getCodec() {
      return GesturesSettingsInterfaceCodec.INSTANCE;
    }

    /** Sets up an instance of `GesturesSettingsInterface` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, GesturesSettingsInterface api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.GesturesSettingsInterface.getSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              GesturesSettings output = api.getSettings();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.GesturesSettingsInterface.updateSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              GesturesSettings settingsArg = (GesturesSettings)args.get(0);
              if (settingsArg == null) {
                throw new NullPointerException("settingsArg unexpectedly null.");
              }
              api.updateSettings(settingsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class LocationComponentSettingsInterfaceCodec extends StandardMessageCodec {
    public static final LocationComponentSettingsInterfaceCodec INSTANCE = new LocationComponentSettingsInterfaceCodec();
    private LocationComponentSettingsInterfaceCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return LocationComponentSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return LocationPuck.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return LocationPuck2D.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return LocationPuck3D.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof LocationComponentSettings) {
        stream.write(128);
        writeValue(stream, ((LocationComponentSettings) value).toMap());
      } else 
      if (value instanceof LocationPuck) {
        stream.write(129);
        writeValue(stream, ((LocationPuck) value).toMap());
      } else 
      if (value instanceof LocationPuck2D) {
        stream.write(130);
        writeValue(stream, ((LocationPuck2D) value).toMap());
      } else 
      if (value instanceof LocationPuck3D) {
        stream.write(131);
        writeValue(stream, ((LocationPuck3D) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface LocationComponentSettingsInterface {
    @NonNull LocationComponentSettings getSettings();
    void updateSettings(@NonNull LocationComponentSettings settings);

    /** The codec used by LocationComponentSettingsInterface. */
    static MessageCodec<Object> getCodec() {
      return LocationComponentSettingsInterfaceCodec.INSTANCE;
    }

    /** Sets up an instance of `LocationComponentSettingsInterface` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, LocationComponentSettingsInterface api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.LocationComponentSettingsInterface.getSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              LocationComponentSettings output = api.getSettings();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.LocationComponentSettingsInterface.updateSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              LocationComponentSettings settingsArg = (LocationComponentSettings)args.get(0);
              if (settingsArg == null) {
                throw new NullPointerException("settingsArg unexpectedly null.");
              }
              api.updateSettings(settingsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ScaleBarSettingsInterfaceCodec extends StandardMessageCodec {
    public static final ScaleBarSettingsInterfaceCodec INSTANCE = new ScaleBarSettingsInterfaceCodec();
    private ScaleBarSettingsInterfaceCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ScaleBarSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ScaleBarSettings) {
        stream.write(128);
        writeValue(stream, ((ScaleBarSettings) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ScaleBarSettingsInterface {
    @NonNull ScaleBarSettings getSettings();
    void updateSettings(@NonNull ScaleBarSettings settings);

    /** The codec used by ScaleBarSettingsInterface. */
    static MessageCodec<Object> getCodec() {
      return ScaleBarSettingsInterfaceCodec.INSTANCE;
    }

    /** Sets up an instance of `ScaleBarSettingsInterface` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ScaleBarSettingsInterface api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScaleBarSettingsInterface.getSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ScaleBarSettings output = api.getSettings();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ScaleBarSettingsInterface.updateSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ScaleBarSettings settingsArg = (ScaleBarSettings)args.get(0);
              if (settingsArg == null) {
                throw new NullPointerException("settingsArg unexpectedly null.");
              }
              api.updateSettings(settingsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class CompassSettingsInterfaceCodec extends StandardMessageCodec {
    public static final CompassSettingsInterfaceCodec INSTANCE = new CompassSettingsInterfaceCodec();
    private CompassSettingsInterfaceCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CompassSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CompassSettings) {
        stream.write(128);
        writeValue(stream, ((CompassSettings) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CompassSettingsInterface {
    @NonNull CompassSettings getSettings();
    void updateSettings(@NonNull CompassSettings settings);

    /** The codec used by CompassSettingsInterface. */
    static MessageCodec<Object> getCodec() {
      return CompassSettingsInterfaceCodec.INSTANCE;
    }

    /** Sets up an instance of `CompassSettingsInterface` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CompassSettingsInterface api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CompassSettingsInterface.getSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              CompassSettings output = api.getSettings();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CompassSettingsInterface.updateSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CompassSettings settingsArg = (CompassSettings)args.get(0);
              if (settingsArg == null) {
                throw new NullPointerException("settingsArg unexpectedly null.");
              }
              api.updateSettings(settingsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class AttributionSettingsInterfaceCodec extends StandardMessageCodec {
    public static final AttributionSettingsInterfaceCodec INSTANCE = new AttributionSettingsInterfaceCodec();
    private AttributionSettingsInterfaceCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributionSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributionSettings) {
        stream.write(128);
        writeValue(stream, ((AttributionSettings) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AttributionSettingsInterface {
    @NonNull AttributionSettings getSettings();
    void updateSettings(@NonNull AttributionSettings settings);

    /** The codec used by AttributionSettingsInterface. */
    static MessageCodec<Object> getCodec() {
      return AttributionSettingsInterfaceCodec.INSTANCE;
    }

    /** Sets up an instance of `AttributionSettingsInterface` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AttributionSettingsInterface api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AttributionSettingsInterface.getSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              AttributionSettings output = api.getSettings();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AttributionSettingsInterface.updateSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              AttributionSettings settingsArg = (AttributionSettings)args.get(0);
              if (settingsArg == null) {
                throw new NullPointerException("settingsArg unexpectedly null.");
              }
              api.updateSettings(settingsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class LogoSettingsInterfaceCodec extends StandardMessageCodec {
    public static final LogoSettingsInterfaceCodec INSTANCE = new LogoSettingsInterfaceCodec();
    private LogoSettingsInterfaceCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return LogoSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof LogoSettings) {
        stream.write(128);
        writeValue(stream, ((LogoSettings) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface LogoSettingsInterface {
    @NonNull LogoSettings getSettings();
    void updateSettings(@NonNull LogoSettings settings);

    /** The codec used by LogoSettingsInterface. */
    static MessageCodec<Object> getCodec() {
      return LogoSettingsInterfaceCodec.INSTANCE;
    }

    /** Sets up an instance of `LogoSettingsInterface` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, LogoSettingsInterface api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.LogoSettingsInterface.getSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              LogoSettings output = api.getSettings();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.LogoSettingsInterface.updateSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              LogoSettings settingsArg = (LogoSettings)args.get(0);
              if (settingsArg == null) {
                throw new NullPointerException("settingsArg unexpectedly null.");
              }
              api.updateSettings(settingsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
