// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Settings.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLT_SETTINGSScreenCoordinate ()
+ (FLT_SETTINGSScreenCoordinate *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSScreenCoordinate *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLT_SETTINGSGesturesSettings ()
+ (FLT_SETTINGSGesturesSettings *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSGesturesSettings *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLT_SETTINGSLocationPuck2D ()
+ (FLT_SETTINGSLocationPuck2D *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSLocationPuck2D *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLT_SETTINGSLocationPuck3D ()
+ (FLT_SETTINGSLocationPuck3D *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSLocationPuck3D *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLT_SETTINGSLocationPuck ()
+ (FLT_SETTINGSLocationPuck *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSLocationPuck *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLT_SETTINGSLocationComponentSettings ()
+ (FLT_SETTINGSLocationComponentSettings *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSLocationComponentSettings *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLT_SETTINGSScaleBarSettings ()
+ (FLT_SETTINGSScaleBarSettings *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSScaleBarSettings *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLT_SETTINGSCompassSettings ()
+ (FLT_SETTINGSCompassSettings *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSCompassSettings *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLT_SETTINGSAttributionSettings ()
+ (FLT_SETTINGSAttributionSettings *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSAttributionSettings *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLT_SETTINGSLogoSettings ()
+ (FLT_SETTINGSLogoSettings *)fromMap:(NSDictionary *)dict;
+ (nullable FLT_SETTINGSLogoSettings *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLT_SETTINGSScreenCoordinate
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y {
  FLT_SETTINGSScreenCoordinate* pigeonResult = [[FLT_SETTINGSScreenCoordinate alloc] init];
  pigeonResult.x = x;
  pigeonResult.y = y;
  return pigeonResult;
}
+ (FLT_SETTINGSScreenCoordinate *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSScreenCoordinate *pigeonResult = [[FLT_SETTINGSScreenCoordinate alloc] init];
  pigeonResult.x = GetNullableObject(dict, @"x");
  NSAssert(pigeonResult.x != nil, @"");
  pigeonResult.y = GetNullableObject(dict, @"y");
  NSAssert(pigeonResult.y != nil, @"");
  return pigeonResult;
}
+ (nullable FLT_SETTINGSScreenCoordinate *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSScreenCoordinate fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"x" : (self.x ?: [NSNull null]),
    @"y" : (self.y ?: [NSNull null]),
  };
}
@end

@implementation FLT_SETTINGSGesturesSettings
+ (instancetype)makeWithRotateEnabled:(nullable NSNumber *)rotateEnabled
    pinchToZoomEnabled:(nullable NSNumber *)pinchToZoomEnabled
    scrollEnabled:(nullable NSNumber *)scrollEnabled
    simultaneousRotateAndPinchToZoomEnabled:(nullable NSNumber *)simultaneousRotateAndPinchToZoomEnabled
    pitchEnabled:(nullable NSNumber *)pitchEnabled
    scrollMode:(FLT_SETTINGSScrollMode)scrollMode
    doubleTapToZoomInEnabled:(nullable NSNumber *)doubleTapToZoomInEnabled
    doubleTouchToZoomOutEnabled:(nullable NSNumber *)doubleTouchToZoomOutEnabled
    quickZoomEnabled:(nullable NSNumber *)quickZoomEnabled
    focalPoint:(nullable FLT_SETTINGSScreenCoordinate *)focalPoint
    pinchToZoomDecelerationEnabled:(nullable NSNumber *)pinchToZoomDecelerationEnabled
    rotateDecelerationEnabled:(nullable NSNumber *)rotateDecelerationEnabled
    scrollDecelerationEnabled:(nullable NSNumber *)scrollDecelerationEnabled
    increaseRotateThresholdWhenPinchingToZoom:(nullable NSNumber *)increaseRotateThresholdWhenPinchingToZoom
    increasePinchToZoomThresholdWhenRotating:(nullable NSNumber *)increasePinchToZoomThresholdWhenRotating
    zoomAnimationAmount:(nullable NSNumber *)zoomAnimationAmount
    pinchPanEnabled:(nullable NSNumber *)pinchPanEnabled {
  FLT_SETTINGSGesturesSettings* pigeonResult = [[FLT_SETTINGSGesturesSettings alloc] init];
  pigeonResult.rotateEnabled = rotateEnabled;
  pigeonResult.pinchToZoomEnabled = pinchToZoomEnabled;
  pigeonResult.scrollEnabled = scrollEnabled;
  pigeonResult.simultaneousRotateAndPinchToZoomEnabled = simultaneousRotateAndPinchToZoomEnabled;
  pigeonResult.pitchEnabled = pitchEnabled;
  pigeonResult.scrollMode = scrollMode;
  pigeonResult.doubleTapToZoomInEnabled = doubleTapToZoomInEnabled;
  pigeonResult.doubleTouchToZoomOutEnabled = doubleTouchToZoomOutEnabled;
  pigeonResult.quickZoomEnabled = quickZoomEnabled;
  pigeonResult.focalPoint = focalPoint;
  pigeonResult.pinchToZoomDecelerationEnabled = pinchToZoomDecelerationEnabled;
  pigeonResult.rotateDecelerationEnabled = rotateDecelerationEnabled;
  pigeonResult.scrollDecelerationEnabled = scrollDecelerationEnabled;
  pigeonResult.increaseRotateThresholdWhenPinchingToZoom = increaseRotateThresholdWhenPinchingToZoom;
  pigeonResult.increasePinchToZoomThresholdWhenRotating = increasePinchToZoomThresholdWhenRotating;
  pigeonResult.zoomAnimationAmount = zoomAnimationAmount;
  pigeonResult.pinchPanEnabled = pinchPanEnabled;
  return pigeonResult;
}
+ (FLT_SETTINGSGesturesSettings *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSGesturesSettings *pigeonResult = [[FLT_SETTINGSGesturesSettings alloc] init];
  pigeonResult.rotateEnabled = GetNullableObject(dict, @"rotateEnabled");
  pigeonResult.pinchToZoomEnabled = GetNullableObject(dict, @"pinchToZoomEnabled");
  pigeonResult.scrollEnabled = GetNullableObject(dict, @"scrollEnabled");
  pigeonResult.simultaneousRotateAndPinchToZoomEnabled = GetNullableObject(dict, @"simultaneousRotateAndPinchToZoomEnabled");
  pigeonResult.pitchEnabled = GetNullableObject(dict, @"pitchEnabled");
  pigeonResult.scrollMode = [GetNullableObject(dict, @"scrollMode") integerValue];
  pigeonResult.doubleTapToZoomInEnabled = GetNullableObject(dict, @"doubleTapToZoomInEnabled");
  pigeonResult.doubleTouchToZoomOutEnabled = GetNullableObject(dict, @"doubleTouchToZoomOutEnabled");
  pigeonResult.quickZoomEnabled = GetNullableObject(dict, @"quickZoomEnabled");
  pigeonResult.focalPoint = [FLT_SETTINGSScreenCoordinate nullableFromMap:GetNullableObject(dict, @"focalPoint")];
  pigeonResult.pinchToZoomDecelerationEnabled = GetNullableObject(dict, @"pinchToZoomDecelerationEnabled");
  pigeonResult.rotateDecelerationEnabled = GetNullableObject(dict, @"rotateDecelerationEnabled");
  pigeonResult.scrollDecelerationEnabled = GetNullableObject(dict, @"scrollDecelerationEnabled");
  pigeonResult.increaseRotateThresholdWhenPinchingToZoom = GetNullableObject(dict, @"increaseRotateThresholdWhenPinchingToZoom");
  pigeonResult.increasePinchToZoomThresholdWhenRotating = GetNullableObject(dict, @"increasePinchToZoomThresholdWhenRotating");
  pigeonResult.zoomAnimationAmount = GetNullableObject(dict, @"zoomAnimationAmount");
  pigeonResult.pinchPanEnabled = GetNullableObject(dict, @"pinchPanEnabled");
  return pigeonResult;
}
+ (nullable FLT_SETTINGSGesturesSettings *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSGesturesSettings fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"rotateEnabled" : (self.rotateEnabled ?: [NSNull null]),
    @"pinchToZoomEnabled" : (self.pinchToZoomEnabled ?: [NSNull null]),
    @"scrollEnabled" : (self.scrollEnabled ?: [NSNull null]),
    @"simultaneousRotateAndPinchToZoomEnabled" : (self.simultaneousRotateAndPinchToZoomEnabled ?: [NSNull null]),
    @"pitchEnabled" : (self.pitchEnabled ?: [NSNull null]),
    @"scrollMode" : @(self.scrollMode),
    @"doubleTapToZoomInEnabled" : (self.doubleTapToZoomInEnabled ?: [NSNull null]),
    @"doubleTouchToZoomOutEnabled" : (self.doubleTouchToZoomOutEnabled ?: [NSNull null]),
    @"quickZoomEnabled" : (self.quickZoomEnabled ?: [NSNull null]),
    @"focalPoint" : (self.focalPoint ? [self.focalPoint toMap] : [NSNull null]),
    @"pinchToZoomDecelerationEnabled" : (self.pinchToZoomDecelerationEnabled ?: [NSNull null]),
    @"rotateDecelerationEnabled" : (self.rotateDecelerationEnabled ?: [NSNull null]),
    @"scrollDecelerationEnabled" : (self.scrollDecelerationEnabled ?: [NSNull null]),
    @"increaseRotateThresholdWhenPinchingToZoom" : (self.increaseRotateThresholdWhenPinchingToZoom ?: [NSNull null]),
    @"increasePinchToZoomThresholdWhenRotating" : (self.increasePinchToZoomThresholdWhenRotating ?: [NSNull null]),
    @"zoomAnimationAmount" : (self.zoomAnimationAmount ?: [NSNull null]),
    @"pinchPanEnabled" : (self.pinchPanEnabled ?: [NSNull null]),
  };
}
@end

@implementation FLT_SETTINGSLocationPuck2D
+ (instancetype)makeWithTopImage:(nullable FlutterStandardTypedData *)topImage
    bearingImage:(nullable FlutterStandardTypedData *)bearingImage
    shadowImage:(nullable FlutterStandardTypedData *)shadowImage
    scaleExpression:(nullable NSString *)scaleExpression {
  FLT_SETTINGSLocationPuck2D* pigeonResult = [[FLT_SETTINGSLocationPuck2D alloc] init];
  pigeonResult.topImage = topImage;
  pigeonResult.bearingImage = bearingImage;
  pigeonResult.shadowImage = shadowImage;
  pigeonResult.scaleExpression = scaleExpression;
  return pigeonResult;
}
+ (FLT_SETTINGSLocationPuck2D *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSLocationPuck2D *pigeonResult = [[FLT_SETTINGSLocationPuck2D alloc] init];
  pigeonResult.topImage = GetNullableObject(dict, @"topImage");
  pigeonResult.bearingImage = GetNullableObject(dict, @"bearingImage");
  pigeonResult.shadowImage = GetNullableObject(dict, @"shadowImage");
  pigeonResult.scaleExpression = GetNullableObject(dict, @"scaleExpression");
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLocationPuck2D *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSLocationPuck2D fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"topImage" : (self.topImage ?: [NSNull null]),
    @"bearingImage" : (self.bearingImage ?: [NSNull null]),
    @"shadowImage" : (self.shadowImage ?: [NSNull null]),
    @"scaleExpression" : (self.scaleExpression ?: [NSNull null]),
  };
}
@end

@implementation FLT_SETTINGSLocationPuck3D
+ (instancetype)makeWithModelUri:(nullable NSString *)modelUri
    position:(nullable NSArray<NSNumber *> *)position
    modelOpacity:(nullable NSNumber *)modelOpacity
    modelScale:(nullable NSArray<NSNumber *> *)modelScale
    modelScaleExpression:(nullable NSString *)modelScaleExpression
    modelTranslation:(nullable NSArray<NSNumber *> *)modelTranslation
    modelRotation:(nullable NSArray<NSNumber *> *)modelRotation {
  FLT_SETTINGSLocationPuck3D* pigeonResult = [[FLT_SETTINGSLocationPuck3D alloc] init];
  pigeonResult.modelUri = modelUri;
  pigeonResult.position = position;
  pigeonResult.modelOpacity = modelOpacity;
  pigeonResult.modelScale = modelScale;
  pigeonResult.modelScaleExpression = modelScaleExpression;
  pigeonResult.modelTranslation = modelTranslation;
  pigeonResult.modelRotation = modelRotation;
  return pigeonResult;
}
+ (FLT_SETTINGSLocationPuck3D *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSLocationPuck3D *pigeonResult = [[FLT_SETTINGSLocationPuck3D alloc] init];
  pigeonResult.modelUri = GetNullableObject(dict, @"modelUri");
  pigeonResult.position = GetNullableObject(dict, @"position");
  pigeonResult.modelOpacity = GetNullableObject(dict, @"modelOpacity");
  pigeonResult.modelScale = GetNullableObject(dict, @"modelScale");
  pigeonResult.modelScaleExpression = GetNullableObject(dict, @"modelScaleExpression");
  pigeonResult.modelTranslation = GetNullableObject(dict, @"modelTranslation");
  pigeonResult.modelRotation = GetNullableObject(dict, @"modelRotation");
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLocationPuck3D *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSLocationPuck3D fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"modelUri" : (self.modelUri ?: [NSNull null]),
    @"position" : (self.position ?: [NSNull null]),
    @"modelOpacity" : (self.modelOpacity ?: [NSNull null]),
    @"modelScale" : (self.modelScale ?: [NSNull null]),
    @"modelScaleExpression" : (self.modelScaleExpression ?: [NSNull null]),
    @"modelTranslation" : (self.modelTranslation ?: [NSNull null]),
    @"modelRotation" : (self.modelRotation ?: [NSNull null]),
  };
}
@end

@implementation FLT_SETTINGSLocationPuck
+ (instancetype)makeWithLocationPuck2D:(nullable FLT_SETTINGSLocationPuck2D *)locationPuck2D
    locationPuck3D:(nullable FLT_SETTINGSLocationPuck3D *)locationPuck3D {
  FLT_SETTINGSLocationPuck* pigeonResult = [[FLT_SETTINGSLocationPuck alloc] init];
  pigeonResult.locationPuck2D = locationPuck2D;
  pigeonResult.locationPuck3D = locationPuck3D;
  return pigeonResult;
}
+ (FLT_SETTINGSLocationPuck *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSLocationPuck *pigeonResult = [[FLT_SETTINGSLocationPuck alloc] init];
  pigeonResult.locationPuck2D = [FLT_SETTINGSLocationPuck2D nullableFromMap:GetNullableObject(dict, @"locationPuck2D")];
  pigeonResult.locationPuck3D = [FLT_SETTINGSLocationPuck3D nullableFromMap:GetNullableObject(dict, @"locationPuck3D")];
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLocationPuck *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSLocationPuck fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"locationPuck2D" : (self.locationPuck2D ? [self.locationPuck2D toMap] : [NSNull null]),
    @"locationPuck3D" : (self.locationPuck3D ? [self.locationPuck3D toMap] : [NSNull null]),
  };
}
@end

@implementation FLT_SETTINGSLocationComponentSettings
+ (instancetype)makeWithEnabled:(nullable NSNumber *)enabled
    pulsingEnabled:(nullable NSNumber *)pulsingEnabled
    pulsingColor:(nullable NSNumber *)pulsingColor
    pulsingMaxRadius:(nullable NSNumber *)pulsingMaxRadius
    showAccuracyRing:(nullable NSNumber *)showAccuracyRing
    accuracyRingColor:(nullable NSNumber *)accuracyRingColor
    accuracyRingBorderColor:(nullable NSNumber *)accuracyRingBorderColor
    layerAbove:(nullable NSString *)layerAbove
    layerBelow:(nullable NSString *)layerBelow
    puckBearingEnabled:(nullable NSNumber *)puckBearingEnabled
    puckBearingSource:(FLT_SETTINGSPuckBearingSource)puckBearingSource
    locationPuck:(nullable FLT_SETTINGSLocationPuck *)locationPuck {
  FLT_SETTINGSLocationComponentSettings* pigeonResult = [[FLT_SETTINGSLocationComponentSettings alloc] init];
  pigeonResult.enabled = enabled;
  pigeonResult.pulsingEnabled = pulsingEnabled;
  pigeonResult.pulsingColor = pulsingColor;
  pigeonResult.pulsingMaxRadius = pulsingMaxRadius;
  pigeonResult.showAccuracyRing = showAccuracyRing;
  pigeonResult.accuracyRingColor = accuracyRingColor;
  pigeonResult.accuracyRingBorderColor = accuracyRingBorderColor;
  pigeonResult.layerAbove = layerAbove;
  pigeonResult.layerBelow = layerBelow;
  pigeonResult.puckBearingEnabled = puckBearingEnabled;
  pigeonResult.puckBearingSource = puckBearingSource;
  pigeonResult.locationPuck = locationPuck;
  return pigeonResult;
}
+ (FLT_SETTINGSLocationComponentSettings *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSLocationComponentSettings *pigeonResult = [[FLT_SETTINGSLocationComponentSettings alloc] init];
  pigeonResult.enabled = GetNullableObject(dict, @"enabled");
  pigeonResult.pulsingEnabled = GetNullableObject(dict, @"pulsingEnabled");
  pigeonResult.pulsingColor = GetNullableObject(dict, @"pulsingColor");
  pigeonResult.pulsingMaxRadius = GetNullableObject(dict, @"pulsingMaxRadius");
  pigeonResult.showAccuracyRing = GetNullableObject(dict, @"showAccuracyRing");
  pigeonResult.accuracyRingColor = GetNullableObject(dict, @"accuracyRingColor");
  pigeonResult.accuracyRingBorderColor = GetNullableObject(dict, @"accuracyRingBorderColor");
  pigeonResult.layerAbove = GetNullableObject(dict, @"layerAbove");
  pigeonResult.layerBelow = GetNullableObject(dict, @"layerBelow");
  pigeonResult.puckBearingEnabled = GetNullableObject(dict, @"puckBearingEnabled");
  pigeonResult.puckBearingSource = [GetNullableObject(dict, @"puckBearingSource") integerValue];
  pigeonResult.locationPuck = [FLT_SETTINGSLocationPuck nullableFromMap:GetNullableObject(dict, @"locationPuck")];
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLocationComponentSettings *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSLocationComponentSettings fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"enabled" : (self.enabled ?: [NSNull null]),
    @"pulsingEnabled" : (self.pulsingEnabled ?: [NSNull null]),
    @"pulsingColor" : (self.pulsingColor ?: [NSNull null]),
    @"pulsingMaxRadius" : (self.pulsingMaxRadius ?: [NSNull null]),
    @"showAccuracyRing" : (self.showAccuracyRing ?: [NSNull null]),
    @"accuracyRingColor" : (self.accuracyRingColor ?: [NSNull null]),
    @"accuracyRingBorderColor" : (self.accuracyRingBorderColor ?: [NSNull null]),
    @"layerAbove" : (self.layerAbove ?: [NSNull null]),
    @"layerBelow" : (self.layerBelow ?: [NSNull null]),
    @"puckBearingEnabled" : (self.puckBearingEnabled ?: [NSNull null]),
    @"puckBearingSource" : @(self.puckBearingSource),
    @"locationPuck" : (self.locationPuck ? [self.locationPuck toMap] : [NSNull null]),
  };
}
@end

@implementation FLT_SETTINGSScaleBarSettings
+ (instancetype)makeWithEnabled:(nullable NSNumber *)enabled
    position:(FLT_SETTINGSOrnamentPosition)position
    marginLeft:(nullable NSNumber *)marginLeft
    marginTop:(nullable NSNumber *)marginTop
    marginRight:(nullable NSNumber *)marginRight
    marginBottom:(nullable NSNumber *)marginBottom
    textColor:(nullable NSNumber *)textColor
    primaryColor:(nullable NSNumber *)primaryColor
    secondaryColor:(nullable NSNumber *)secondaryColor
    borderWidth:(nullable NSNumber *)borderWidth
    height:(nullable NSNumber *)height
    textBarMargin:(nullable NSNumber *)textBarMargin
    textBorderWidth:(nullable NSNumber *)textBorderWidth
    textSize:(nullable NSNumber *)textSize
    isMetricUnits:(nullable NSNumber *)isMetricUnits
    refreshInterval:(nullable NSNumber *)refreshInterval
    showTextBorder:(nullable NSNumber *)showTextBorder
    ratio:(nullable NSNumber *)ratio
    useContinuousRendering:(nullable NSNumber *)useContinuousRendering {
  FLT_SETTINGSScaleBarSettings* pigeonResult = [[FLT_SETTINGSScaleBarSettings alloc] init];
  pigeonResult.enabled = enabled;
  pigeonResult.position = position;
  pigeonResult.marginLeft = marginLeft;
  pigeonResult.marginTop = marginTop;
  pigeonResult.marginRight = marginRight;
  pigeonResult.marginBottom = marginBottom;
  pigeonResult.textColor = textColor;
  pigeonResult.primaryColor = primaryColor;
  pigeonResult.secondaryColor = secondaryColor;
  pigeonResult.borderWidth = borderWidth;
  pigeonResult.height = height;
  pigeonResult.textBarMargin = textBarMargin;
  pigeonResult.textBorderWidth = textBorderWidth;
  pigeonResult.textSize = textSize;
  pigeonResult.isMetricUnits = isMetricUnits;
  pigeonResult.refreshInterval = refreshInterval;
  pigeonResult.showTextBorder = showTextBorder;
  pigeonResult.ratio = ratio;
  pigeonResult.useContinuousRendering = useContinuousRendering;
  return pigeonResult;
}
+ (FLT_SETTINGSScaleBarSettings *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSScaleBarSettings *pigeonResult = [[FLT_SETTINGSScaleBarSettings alloc] init];
  pigeonResult.enabled = GetNullableObject(dict, @"enabled");
  pigeonResult.position = [GetNullableObject(dict, @"position") integerValue];
  pigeonResult.marginLeft = GetNullableObject(dict, @"marginLeft");
  pigeonResult.marginTop = GetNullableObject(dict, @"marginTop");
  pigeonResult.marginRight = GetNullableObject(dict, @"marginRight");
  pigeonResult.marginBottom = GetNullableObject(dict, @"marginBottom");
  pigeonResult.textColor = GetNullableObject(dict, @"textColor");
  pigeonResult.primaryColor = GetNullableObject(dict, @"primaryColor");
  pigeonResult.secondaryColor = GetNullableObject(dict, @"secondaryColor");
  pigeonResult.borderWidth = GetNullableObject(dict, @"borderWidth");
  pigeonResult.height = GetNullableObject(dict, @"height");
  pigeonResult.textBarMargin = GetNullableObject(dict, @"textBarMargin");
  pigeonResult.textBorderWidth = GetNullableObject(dict, @"textBorderWidth");
  pigeonResult.textSize = GetNullableObject(dict, @"textSize");
  pigeonResult.isMetricUnits = GetNullableObject(dict, @"isMetricUnits");
  pigeonResult.refreshInterval = GetNullableObject(dict, @"refreshInterval");
  pigeonResult.showTextBorder = GetNullableObject(dict, @"showTextBorder");
  pigeonResult.ratio = GetNullableObject(dict, @"ratio");
  pigeonResult.useContinuousRendering = GetNullableObject(dict, @"useContinuousRendering");
  return pigeonResult;
}
+ (nullable FLT_SETTINGSScaleBarSettings *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSScaleBarSettings fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"enabled" : (self.enabled ?: [NSNull null]),
    @"position" : @(self.position),
    @"marginLeft" : (self.marginLeft ?: [NSNull null]),
    @"marginTop" : (self.marginTop ?: [NSNull null]),
    @"marginRight" : (self.marginRight ?: [NSNull null]),
    @"marginBottom" : (self.marginBottom ?: [NSNull null]),
    @"textColor" : (self.textColor ?: [NSNull null]),
    @"primaryColor" : (self.primaryColor ?: [NSNull null]),
    @"secondaryColor" : (self.secondaryColor ?: [NSNull null]),
    @"borderWidth" : (self.borderWidth ?: [NSNull null]),
    @"height" : (self.height ?: [NSNull null]),
    @"textBarMargin" : (self.textBarMargin ?: [NSNull null]),
    @"textBorderWidth" : (self.textBorderWidth ?: [NSNull null]),
    @"textSize" : (self.textSize ?: [NSNull null]),
    @"isMetricUnits" : (self.isMetricUnits ?: [NSNull null]),
    @"refreshInterval" : (self.refreshInterval ?: [NSNull null]),
    @"showTextBorder" : (self.showTextBorder ?: [NSNull null]),
    @"ratio" : (self.ratio ?: [NSNull null]),
    @"useContinuousRendering" : (self.useContinuousRendering ?: [NSNull null]),
  };
}
@end

@implementation FLT_SETTINGSCompassSettings
+ (instancetype)makeWithEnabled:(nullable NSNumber *)enabled
    position:(FLT_SETTINGSOrnamentPosition)position
    marginLeft:(nullable NSNumber *)marginLeft
    marginTop:(nullable NSNumber *)marginTop
    marginRight:(nullable NSNumber *)marginRight
    marginBottom:(nullable NSNumber *)marginBottom
    opacity:(nullable NSNumber *)opacity
    rotation:(nullable NSNumber *)rotation
    visibility:(nullable NSNumber *)visibility
    fadeWhenFacingNorth:(nullable NSNumber *)fadeWhenFacingNorth
    clickable:(nullable NSNumber *)clickable
    image:(nullable FlutterStandardTypedData *)image {
  FLT_SETTINGSCompassSettings* pigeonResult = [[FLT_SETTINGSCompassSettings alloc] init];
  pigeonResult.enabled = enabled;
  pigeonResult.position = position;
  pigeonResult.marginLeft = marginLeft;
  pigeonResult.marginTop = marginTop;
  pigeonResult.marginRight = marginRight;
  pigeonResult.marginBottom = marginBottom;
  pigeonResult.opacity = opacity;
  pigeonResult.rotation = rotation;
  pigeonResult.visibility = visibility;
  pigeonResult.fadeWhenFacingNorth = fadeWhenFacingNorth;
  pigeonResult.clickable = clickable;
  pigeonResult.image = image;
  return pigeonResult;
}
+ (FLT_SETTINGSCompassSettings *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSCompassSettings *pigeonResult = [[FLT_SETTINGSCompassSettings alloc] init];
  pigeonResult.enabled = GetNullableObject(dict, @"enabled");
  pigeonResult.position = [GetNullableObject(dict, @"position") integerValue];
  pigeonResult.marginLeft = GetNullableObject(dict, @"marginLeft");
  pigeonResult.marginTop = GetNullableObject(dict, @"marginTop");
  pigeonResult.marginRight = GetNullableObject(dict, @"marginRight");
  pigeonResult.marginBottom = GetNullableObject(dict, @"marginBottom");
  pigeonResult.opacity = GetNullableObject(dict, @"opacity");
  pigeonResult.rotation = GetNullableObject(dict, @"rotation");
  pigeonResult.visibility = GetNullableObject(dict, @"visibility");
  pigeonResult.fadeWhenFacingNorth = GetNullableObject(dict, @"fadeWhenFacingNorth");
  pigeonResult.clickable = GetNullableObject(dict, @"clickable");
  pigeonResult.image = GetNullableObject(dict, @"image");
  return pigeonResult;
}
+ (nullable FLT_SETTINGSCompassSettings *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSCompassSettings fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"enabled" : (self.enabled ?: [NSNull null]),
    @"position" : @(self.position),
    @"marginLeft" : (self.marginLeft ?: [NSNull null]),
    @"marginTop" : (self.marginTop ?: [NSNull null]),
    @"marginRight" : (self.marginRight ?: [NSNull null]),
    @"marginBottom" : (self.marginBottom ?: [NSNull null]),
    @"opacity" : (self.opacity ?: [NSNull null]),
    @"rotation" : (self.rotation ?: [NSNull null]),
    @"visibility" : (self.visibility ?: [NSNull null]),
    @"fadeWhenFacingNorth" : (self.fadeWhenFacingNorth ?: [NSNull null]),
    @"clickable" : (self.clickable ?: [NSNull null]),
    @"image" : (self.image ?: [NSNull null]),
  };
}
@end

@implementation FLT_SETTINGSAttributionSettings
+ (instancetype)makeWithEnabled:(nullable NSNumber *)enabled
    iconColor:(nullable NSNumber *)iconColor
    position:(FLT_SETTINGSOrnamentPosition)position
    marginLeft:(nullable NSNumber *)marginLeft
    marginTop:(nullable NSNumber *)marginTop
    marginRight:(nullable NSNumber *)marginRight
    marginBottom:(nullable NSNumber *)marginBottom
    clickable:(nullable NSNumber *)clickable {
  FLT_SETTINGSAttributionSettings* pigeonResult = [[FLT_SETTINGSAttributionSettings alloc] init];
  pigeonResult.enabled = enabled;
  pigeonResult.iconColor = iconColor;
  pigeonResult.position = position;
  pigeonResult.marginLeft = marginLeft;
  pigeonResult.marginTop = marginTop;
  pigeonResult.marginRight = marginRight;
  pigeonResult.marginBottom = marginBottom;
  pigeonResult.clickable = clickable;
  return pigeonResult;
}
+ (FLT_SETTINGSAttributionSettings *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSAttributionSettings *pigeonResult = [[FLT_SETTINGSAttributionSettings alloc] init];
  pigeonResult.enabled = GetNullableObject(dict, @"enabled");
  pigeonResult.iconColor = GetNullableObject(dict, @"iconColor");
  pigeonResult.position = [GetNullableObject(dict, @"position") integerValue];
  pigeonResult.marginLeft = GetNullableObject(dict, @"marginLeft");
  pigeonResult.marginTop = GetNullableObject(dict, @"marginTop");
  pigeonResult.marginRight = GetNullableObject(dict, @"marginRight");
  pigeonResult.marginBottom = GetNullableObject(dict, @"marginBottom");
  pigeonResult.clickable = GetNullableObject(dict, @"clickable");
  return pigeonResult;
}
+ (nullable FLT_SETTINGSAttributionSettings *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSAttributionSettings fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"enabled" : (self.enabled ?: [NSNull null]),
    @"iconColor" : (self.iconColor ?: [NSNull null]),
    @"position" : @(self.position),
    @"marginLeft" : (self.marginLeft ?: [NSNull null]),
    @"marginTop" : (self.marginTop ?: [NSNull null]),
    @"marginRight" : (self.marginRight ?: [NSNull null]),
    @"marginBottom" : (self.marginBottom ?: [NSNull null]),
    @"clickable" : (self.clickable ?: [NSNull null]),
  };
}
@end

@implementation FLT_SETTINGSLogoSettings
+ (instancetype)makeWithEnabled:(nullable NSNumber *)enabled
    position:(FLT_SETTINGSOrnamentPosition)position
    marginLeft:(nullable NSNumber *)marginLeft
    marginTop:(nullable NSNumber *)marginTop
    marginRight:(nullable NSNumber *)marginRight
    marginBottom:(nullable NSNumber *)marginBottom {
  FLT_SETTINGSLogoSettings* pigeonResult = [[FLT_SETTINGSLogoSettings alloc] init];
  pigeonResult.enabled = enabled;
  pigeonResult.position = position;
  pigeonResult.marginLeft = marginLeft;
  pigeonResult.marginTop = marginTop;
  pigeonResult.marginRight = marginRight;
  pigeonResult.marginBottom = marginBottom;
  return pigeonResult;
}
+ (FLT_SETTINGSLogoSettings *)fromMap:(NSDictionary *)dict {
  FLT_SETTINGSLogoSettings *pigeonResult = [[FLT_SETTINGSLogoSettings alloc] init];
  pigeonResult.enabled = GetNullableObject(dict, @"enabled");
  pigeonResult.position = [GetNullableObject(dict, @"position") integerValue];
  pigeonResult.marginLeft = GetNullableObject(dict, @"marginLeft");
  pigeonResult.marginTop = GetNullableObject(dict, @"marginTop");
  pigeonResult.marginRight = GetNullableObject(dict, @"marginRight");
  pigeonResult.marginBottom = GetNullableObject(dict, @"marginBottom");
  return pigeonResult;
}
+ (nullable FLT_SETTINGSLogoSettings *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FLT_SETTINGSLogoSettings fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"enabled" : (self.enabled ?: [NSNull null]),
    @"position" : @(self.position),
    @"marginLeft" : (self.marginLeft ?: [NSNull null]),
    @"marginTop" : (self.marginTop ?: [NSNull null]),
    @"marginRight" : (self.marginRight ?: [NSNull null]),
    @"marginBottom" : (self.marginBottom ?: [NSNull null]),
  };
}
@end

@interface FLT_SETTINGSGesturesSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSGesturesSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLT_SETTINGSGesturesSettings fromMap:[self readValue]];
    
    case 129:     
      return [FLT_SETTINGSScreenCoordinate fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLT_SETTINGSGesturesSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSGesturesSettingsInterfaceCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLT_SETTINGSGesturesSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLT_SETTINGSScreenCoordinate class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSGesturesSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSGesturesSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSGesturesSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSGesturesSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSGesturesSettingsInterfaceGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSGesturesSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSGesturesSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLT_SETTINGSGesturesSettingsInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSGesturesSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.GesturesSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSGesturesSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSGesturesSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSGesturesSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.GesturesSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSGesturesSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSGesturesSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSGesturesSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGSLocationComponentSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSLocationComponentSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLT_SETTINGSLocationComponentSettings fromMap:[self readValue]];
    
    case 129:     
      return [FLT_SETTINGSLocationPuck fromMap:[self readValue]];
    
    case 130:     
      return [FLT_SETTINGSLocationPuck2D fromMap:[self readValue]];
    
    case 131:     
      return [FLT_SETTINGSLocationPuck3D fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLT_SETTINGSLocationComponentSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSLocationComponentSettingsInterfaceCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLT_SETTINGSLocationComponentSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLT_SETTINGSLocationPuck class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLT_SETTINGSLocationPuck2D class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLT_SETTINGSLocationPuck3D class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSLocationComponentSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSLocationComponentSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSLocationComponentSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSLocationComponentSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSLocationComponentSettingsInterfaceGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSLocationComponentSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSLocationComponentSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLT_SETTINGSLocationComponentSettingsInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSLocationComponentSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.LocationComponentSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSLocationComponentSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSLocationComponentSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSLocationComponentSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.LocationComponentSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSLocationComponentSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSLocationComponentSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSLocationComponentSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGSScaleBarSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSScaleBarSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLT_SETTINGSScaleBarSettings fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLT_SETTINGSScaleBarSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSScaleBarSettingsInterfaceCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLT_SETTINGSScaleBarSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSScaleBarSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSScaleBarSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSScaleBarSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSScaleBarSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSScaleBarSettingsInterfaceGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSScaleBarSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSScaleBarSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLT_SETTINGSScaleBarSettingsInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSScaleBarSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ScaleBarSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSScaleBarSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSScaleBarSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSScaleBarSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ScaleBarSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSScaleBarSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSScaleBarSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSScaleBarSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGSCompassSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSCompassSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLT_SETTINGSCompassSettings fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLT_SETTINGSCompassSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSCompassSettingsInterfaceCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLT_SETTINGSCompassSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSCompassSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSCompassSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSCompassSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSCompassSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSCompassSettingsInterfaceGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSCompassSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSCompassSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLT_SETTINGSCompassSettingsInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSCompassSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CompassSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSCompassSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSCompassSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSCompassSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CompassSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSCompassSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSCompassSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSCompassSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGSAttributionSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSAttributionSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLT_SETTINGSAttributionSettings fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLT_SETTINGSAttributionSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSAttributionSettingsInterfaceCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLT_SETTINGSAttributionSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSAttributionSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSAttributionSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSAttributionSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSAttributionSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSAttributionSettingsInterfaceGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSAttributionSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSAttributionSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLT_SETTINGSAttributionSettingsInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSAttributionSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AttributionSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSAttributionSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSAttributionSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSAttributionSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AttributionSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSAttributionSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSAttributionSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSAttributionSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLT_SETTINGSLogoSettingsInterfaceCodecReader : FlutterStandardReader
@end
@implementation FLT_SETTINGSLogoSettingsInterfaceCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLT_SETTINGSLogoSettings fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLT_SETTINGSLogoSettingsInterfaceCodecWriter : FlutterStandardWriter
@end
@implementation FLT_SETTINGSLogoSettingsInterfaceCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLT_SETTINGSLogoSettings class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLT_SETTINGSLogoSettingsInterfaceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_SETTINGSLogoSettingsInterfaceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_SETTINGSLogoSettingsInterfaceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_SETTINGSLogoSettingsInterfaceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_SETTINGSLogoSettingsInterfaceGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLT_SETTINGSLogoSettingsInterfaceCodecReaderWriter *readerWriter = [[FLT_SETTINGSLogoSettingsInterfaceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLT_SETTINGSLogoSettingsInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_SETTINGSLogoSettingsInterface> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.LogoSettingsInterface.getSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSLogoSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSettingsWithError:)], @"FLT_SETTINGSLogoSettingsInterface api (%@) doesn't respond to @selector(getSettingsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLT_SETTINGSLogoSettings *output = [api getSettingsWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.LogoSettingsInterface.updateSettings"
        binaryMessenger:binaryMessenger
        codec:FLT_SETTINGSLogoSettingsInterfaceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSettingsSettings:error:)], @"FLT_SETTINGSLogoSettingsInterface api (%@) doesn't respond to @selector(updateSettingsSettings:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLT_SETTINGSLogoSettings *arg_settings = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateSettingsSettings:arg_settings error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
