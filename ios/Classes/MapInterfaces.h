// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, FLTGlyphsRasterizationMode) {
  FLTGlyphsRasterizationModeNO_GLYPHS_RASTERIZED_LOCALLY = 0,
  FLTGlyphsRasterizationModeIDEOGRAPHS_RASTERIZED_LOCALLY = 1,
  FLTGlyphsRasterizationModeALL_GLYPHS_RASTERIZED_LOCALLY = 2,
};

typedef NS_ENUM(NSUInteger, FLTContextMode) {
  FLTContextModeUNIQUE = 0,
  FLTContextModeSHARED = 1,
};

typedef NS_ENUM(NSUInteger, FLTConstrainMode) {
  FLTConstrainModeNONE = 0,
  FLTConstrainModeHEIGHT_ONLY = 1,
  FLTConstrainModeWIDTH_AND_HEIGHT = 2,
};

typedef NS_ENUM(NSUInteger, FLTViewportMode) {
  FLTViewportModeDEFAULT = 0,
  FLTViewportModeFLIPPED_Y = 1,
};

typedef NS_ENUM(NSUInteger, FLTNorthOrientation) {
  FLTNorthOrientationUPWARDS = 0,
  FLTNorthOrientationRIGHTWARDS = 1,
  FLTNorthOrientationDOWNWARDS = 2,
  FLTNorthOrientationLEFTWARDS = 3,
};

typedef NS_ENUM(NSUInteger, FLTMapDebugOptionsData) {
  FLTMapDebugOptionsDataTILE_BORDERS = 0,
  FLTMapDebugOptionsDataPARSE_STATUS = 1,
  FLTMapDebugOptionsDataTIMESTAMPS = 2,
  FLTMapDebugOptionsDataCOLLISION = 3,
  FLTMapDebugOptionsDataOVERDRAW = 4,
  FLTMapDebugOptionsDataSTENCIL_CLIP = 5,
  FLTMapDebugOptionsDataDEPTH_BUFFER = 6,
  FLTMapDebugOptionsDataRENDER_CACHE = 7,
  FLTMapDebugOptionsDataMODEL_BOUNDS = 8,
  FLTMapDebugOptionsDataTERRAIN_WIREFRAME = 9,
};

typedef NS_ENUM(NSUInteger, FLTViewAnnotationAnchor) {
  FLTViewAnnotationAnchorTOP = 0,
  FLTViewAnnotationAnchorLEFT = 1,
  FLTViewAnnotationAnchorBOTTOM = 2,
  FLTViewAnnotationAnchorRIGHT = 3,
  FLTViewAnnotationAnchorTOP_LEFT = 4,
  FLTViewAnnotationAnchorBOTTOM_RIGHT = 5,
  FLTViewAnnotationAnchorTOP_RIGHT = 6,
  FLTViewAnnotationAnchorBOTTOM_LEFT = 7,
  FLTViewAnnotationAnchorCENTER = 8,
};

typedef NS_ENUM(NSUInteger, FLTType) {
  FLTTypeSCREEN_BOX = 0,
  FLTTypeSCREEN_COORDINATE = 1,
  FLTTypeLIST = 2,
};

typedef NS_ENUM(NSUInteger, FLTStylePackErrorType) {
  FLTStylePackErrorTypeCANCELED = 0,
  FLTStylePackErrorTypeDOES_NOT_EXIST = 1,
  FLTStylePackErrorTypeDISK_FULL = 2,
  FLTStylePackErrorTypeOTHER = 3,
};

typedef NS_ENUM(NSUInteger, FLTResponseErrorReason) {
  FLTResponseErrorReasonNOT_FOUND = 0,
  FLTResponseErrorReasonSERVER = 1,
  FLTResponseErrorReasonCONNECTION = 2,
  FLTResponseErrorReasonRATE_LIMIT = 3,
  FLTResponseErrorReasonOTHER = 4,
};

typedef NS_ENUM(NSUInteger, FLTOfflineRegionDownloadState) {
  FLTOfflineRegionDownloadStateINACTIVE = 0,
  FLTOfflineRegionDownloadStateACTIVE = 1,
};

typedef NS_ENUM(NSUInteger, FLTTileStoreUsageMode) {
  FLTTileStoreUsageModeDISABLED = 0,
  FLTTileStoreUsageModeREAD_ONLY = 1,
  FLTTileStoreUsageModeREAD_AND_UPDATE = 2,
};

typedef NS_ENUM(NSUInteger, FLTStylePropertyValueKind) {
  FLTStylePropertyValueKindUNDEFINED = 0,
  FLTStylePropertyValueKindCONSTANT = 1,
  FLTStylePropertyValueKindEXPRESSION = 2,
  FLTStylePropertyValueKindTRANSITION = 3,
};

typedef NS_ENUM(NSUInteger, FLTHttpMethod) {
  FLTHttpMethodGET = 0,
  FLTHttpMethodHEAD = 1,
  FLTHttpMethodPOST = 2,
};

typedef NS_ENUM(NSUInteger, FLTNetworkRestriction) {
  FLTNetworkRestrictionNONE = 0,
  FLTNetworkRestrictionDISALLOW_EXPENSIVE = 1,
  FLTNetworkRestrictionDISALLOW_ALL = 2,
};

typedef NS_ENUM(NSUInteger, FLTHttpRequestErrorType) {
  FLTHttpRequestErrorTypeCONNECTION_ERROR = 0,
  FLTHttpRequestErrorTypeSSLERROR = 1,
  FLTHttpRequestErrorTypeREQUEST_CANCELLED = 2,
  FLTHttpRequestErrorTypeREQUEST_TIMED_OUT = 3,
  FLTHttpRequestErrorTypeRANGE_ERROR = 4,
  FLTHttpRequestErrorTypeOTHER_ERROR = 5,
};

typedef NS_ENUM(NSUInteger, FLTDownloadErrorCode) {
  FLTDownloadErrorCodeFILE_SYSTEM_ERROR = 0,
  FLTDownloadErrorCodeNETWORK_ERROR = 1,
};

typedef NS_ENUM(NSUInteger, FLTDownloadState) {
  FLTDownloadStatePENDING = 0,
  FLTDownloadStateDOWNLOADING = 1,
  FLTDownloadStateFAILED = 2,
  FLTDownloadStateFINISHED = 3,
};

typedef NS_ENUM(NSUInteger, FLTTileDataDomain) {
  FLTTileDataDomainMAPS = 0,
  FLTTileDataDomainNAVIGATION = 1,
  FLTTileDataDomainSEARCH = 2,
  FLTTileDataDomainADAS = 3,
};

typedef NS_ENUM(NSUInteger, FLTTileRegionErrorType) {
  FLTTileRegionErrorTypeCANCELED = 0,
  FLTTileRegionErrorTypeDOES_NOT_EXIST = 1,
  FLTTileRegionErrorTypeTILESET_DESCRIPTOR = 2,
  FLTTileRegionErrorTypeDISK_FULL = 3,
  FLTTileRegionErrorTypeOTHER = 4,
  FLTTileRegionErrorTypeTILE_COUNT_EXCEEDED = 5,
};

@class FLTMbxEdgeInsets;
@class FLTCameraOptions;
@class FLTCameraState;
@class FLTCameraBoundsOptions;
@class FLTCameraBounds;
@class FLTMapAnimationOptions;
@class FLTCoordinateBounds;
@class FLTMapDebugOptions;
@class FLTGlyphsRasterizationOptions;
@class FLTMapMemoryBudgetInMegabytes;
@class FLTMapMemoryBudgetInTiles;
@class FLTMapOptions;
@class FLTScreenCoordinate;
@class FLTScreenBox;
@class FLTCoordinateBoundsZoom;
@class FLTSize;
@class FLTRenderedQueryOptions;
@class FLTSourceQueryOptions;
@class FLTFeatureExtensionValue;
@class FLTLayerPosition;
@class FLTQueriedFeature;
@class FLTRenderedQueryGeometry;
@class FLTOfflineRegionGeometryDefinition;
@class FLTOfflineRegionTilePyramidDefinition;
@class FLTProjectedMeters;
@class FLTMercatorCoordinate;
@class FLTResourceOptions;
@class FLTStyleObjectInfo;
@class FLTMbxImage;
@class FLTImageStretches;
@class FLTImageContent;
@class FLTTransitionOptions;
@class FLTCanonicalTileID;
@class FLTStylePropertyValue;

@interface FLTMbxEdgeInsets : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithTop:(NSNumber *)top
    left:(NSNumber *)left
    bottom:(NSNumber *)bottom
    right:(NSNumber *)right;
@property(nonatomic, strong) NSNumber * top;
@property(nonatomic, strong) NSNumber * left;
@property(nonatomic, strong) NSNumber * bottom;
@property(nonatomic, strong) NSNumber * right;
@end

@interface FLTCameraOptions : NSObject
+ (instancetype)makeWithCenter:(nullable NSDictionary<NSString *, id> *)center
    padding:(nullable FLTMbxEdgeInsets *)padding
    anchor:(nullable FLTScreenCoordinate *)anchor
    zoom:(nullable NSNumber *)zoom
    bearing:(nullable NSNumber *)bearing
    pitch:(nullable NSNumber *)pitch;
@property(nonatomic, strong, nullable) NSDictionary<NSString *, id> * center;
@property(nonatomic, strong, nullable) FLTMbxEdgeInsets * padding;
@property(nonatomic, strong, nullable) FLTScreenCoordinate * anchor;
@property(nonatomic, strong, nullable) NSNumber * zoom;
@property(nonatomic, strong, nullable) NSNumber * bearing;
@property(nonatomic, strong, nullable) NSNumber * pitch;
@end

@interface FLTCameraState : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithCenter:(NSDictionary<NSString *, id> *)center
    padding:(FLTMbxEdgeInsets *)padding
    zoom:(NSNumber *)zoom
    bearing:(NSNumber *)bearing
    pitch:(NSNumber *)pitch;
@property(nonatomic, strong) NSDictionary<NSString *, id> * center;
@property(nonatomic, strong) FLTMbxEdgeInsets * padding;
@property(nonatomic, strong) NSNumber * zoom;
@property(nonatomic, strong) NSNumber * bearing;
@property(nonatomic, strong) NSNumber * pitch;
@end

@interface FLTCameraBoundsOptions : NSObject
+ (instancetype)makeWithBounds:(nullable FLTCoordinateBounds *)bounds
    maxZoom:(nullable NSNumber *)maxZoom
    minZoom:(nullable NSNumber *)minZoom
    maxPitch:(nullable NSNumber *)maxPitch
    minPitch:(nullable NSNumber *)minPitch;
@property(nonatomic, strong, nullable) FLTCoordinateBounds * bounds;
@property(nonatomic, strong, nullable) NSNumber * maxZoom;
@property(nonatomic, strong, nullable) NSNumber * minZoom;
@property(nonatomic, strong, nullable) NSNumber * maxPitch;
@property(nonatomic, strong, nullable) NSNumber * minPitch;
@end

@interface FLTCameraBounds : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithBounds:(FLTCoordinateBounds *)bounds
    maxZoom:(NSNumber *)maxZoom
    minZoom:(NSNumber *)minZoom
    maxPitch:(NSNumber *)maxPitch
    minPitch:(NSNumber *)minPitch;
@property(nonatomic, strong) FLTCoordinateBounds * bounds;
@property(nonatomic, strong) NSNumber * maxZoom;
@property(nonatomic, strong) NSNumber * minZoom;
@property(nonatomic, strong) NSNumber * maxPitch;
@property(nonatomic, strong) NSNumber * minPitch;
@end

@interface FLTMapAnimationOptions : NSObject
+ (instancetype)makeWithDuration:(nullable NSNumber *)duration
    startDelay:(nullable NSNumber *)startDelay;
@property(nonatomic, strong, nullable) NSNumber * duration;
@property(nonatomic, strong, nullable) NSNumber * startDelay;
@end

@interface FLTCoordinateBounds : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSouthwest:(NSDictionary<NSString *, id> *)southwest
    northeast:(NSDictionary<NSString *, id> *)northeast
    infiniteBounds:(NSNumber *)infiniteBounds;
@property(nonatomic, strong) NSDictionary<NSString *, id> * southwest;
@property(nonatomic, strong) NSDictionary<NSString *, id> * northeast;
@property(nonatomic, strong) NSNumber * infiniteBounds;
@end

@interface FLTMapDebugOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithData:(FLTMapDebugOptionsData)data;
@property(nonatomic, assign) FLTMapDebugOptionsData data;
@end

@interface FLTGlyphsRasterizationOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithRasterizationMode:(FLTGlyphsRasterizationMode)rasterizationMode
    fontFamily:(nullable NSString *)fontFamily;
@property(nonatomic, assign) FLTGlyphsRasterizationMode rasterizationMode;
@property(nonatomic, copy, nullable) NSString * fontFamily;
@end

@interface FLTMapMemoryBudgetInMegabytes : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSize:(NSNumber *)size;
@property(nonatomic, strong) NSNumber * size;
@end

@interface FLTMapMemoryBudgetInTiles : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSize:(NSNumber *)size;
@property(nonatomic, strong) NSNumber * size;
@end

@interface FLTMapOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithContextMode:(FLTContextMode)contextMode
    constrainMode:(FLTConstrainMode)constrainMode
    viewportMode:(FLTViewportMode)viewportMode
    orientation:(FLTNorthOrientation)orientation
    crossSourceCollisions:(nullable NSNumber *)crossSourceCollisions
    optimizeForTerrain:(nullable NSNumber *)optimizeForTerrain
    size:(nullable FLTSize *)size
    pixelRatio:(NSNumber *)pixelRatio
    glyphsRasterizationOptions:(nullable FLTGlyphsRasterizationOptions *)glyphsRasterizationOptions;
@property(nonatomic, assign) FLTContextMode contextMode;
@property(nonatomic, assign) FLTConstrainMode constrainMode;
@property(nonatomic, assign) FLTViewportMode viewportMode;
@property(nonatomic, assign) FLTNorthOrientation orientation;
@property(nonatomic, strong, nullable) NSNumber * crossSourceCollisions;
@property(nonatomic, strong, nullable) NSNumber * optimizeForTerrain;
@property(nonatomic, strong, nullable) FLTSize * size;
@property(nonatomic, strong) NSNumber * pixelRatio;
@property(nonatomic, strong, nullable) FLTGlyphsRasterizationOptions * glyphsRasterizationOptions;
@end

@interface FLTScreenCoordinate : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y;
@property(nonatomic, strong) NSNumber * x;
@property(nonatomic, strong) NSNumber * y;
@end

@interface FLTScreenBox : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithMin:(FLTScreenCoordinate *)min
    max:(FLTScreenCoordinate *)max;
@property(nonatomic, strong) FLTScreenCoordinate * min;
@property(nonatomic, strong) FLTScreenCoordinate * max;
@end

@interface FLTCoordinateBoundsZoom : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithBounds:(FLTCoordinateBounds *)bounds
    zoom:(NSNumber *)zoom;
@property(nonatomic, strong) FLTCoordinateBounds * bounds;
@property(nonatomic, strong) NSNumber * zoom;
@end

@interface FLTSize : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithWidth:(NSNumber *)width
    height:(NSNumber *)height;
@property(nonatomic, strong) NSNumber * width;
@property(nonatomic, strong) NSNumber * height;
@end

@interface FLTRenderedQueryOptions : NSObject
+ (instancetype)makeWithLayerIds:(nullable NSArray<NSString *> *)layerIds
    filter:(nullable NSString *)filter;
@property(nonatomic, strong, nullable) NSArray<NSString *> * layerIds;
@property(nonatomic, copy, nullable) NSString * filter;
@end

@interface FLTSourceQueryOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSourceLayerIds:(nullable NSArray<NSString *> *)sourceLayerIds
    filter:(NSString *)filter;
@property(nonatomic, strong, nullable) NSArray<NSString *> * sourceLayerIds;
@property(nonatomic, copy) NSString * filter;
@end

@interface FLTFeatureExtensionValue : NSObject
+ (instancetype)makeWithValue:(nullable NSString *)value
    featureCollection:(nullable NSArray<NSDictionary<NSString *, id> *> *)featureCollection;
@property(nonatomic, copy, nullable) NSString * value;
@property(nonatomic, strong, nullable) NSArray<NSDictionary<NSString *, id> *> * featureCollection;
@end

@interface FLTLayerPosition : NSObject
+ (instancetype)makeWithAbove:(nullable NSString *)above
    below:(nullable NSString *)below
    at:(nullable NSNumber *)at;
@property(nonatomic, copy, nullable) NSString * above;
@property(nonatomic, copy, nullable) NSString * below;
@property(nonatomic, strong, nullable) NSNumber * at;
@end

@interface FLTQueriedFeature : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithFeature:(NSDictionary<NSString *, id> *)feature
    source:(NSString *)source
    sourceLayer:(nullable NSString *)sourceLayer
    state:(NSString *)state;
@property(nonatomic, strong) NSDictionary<NSString *, id> * feature;
@property(nonatomic, copy) NSString * source;
@property(nonatomic, copy, nullable) NSString * sourceLayer;
@property(nonatomic, copy) NSString * state;
@end

@interface FLTRenderedQueryGeometry : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(NSString *)value
    type:(FLTType)type;
@property(nonatomic, copy) NSString * value;
@property(nonatomic, assign) FLTType type;
@end

@interface FLTOfflineRegionGeometryDefinition : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithStyleURL:(NSString *)styleURL
    geometry:(NSDictionary<NSString *, id> *)geometry
    minZoom:(NSNumber *)minZoom
    maxZoom:(NSNumber *)maxZoom
    pixelRatio:(NSNumber *)pixelRatio
    glyphsRasterizationMode:(FLTGlyphsRasterizationMode)glyphsRasterizationMode;
@property(nonatomic, copy) NSString * styleURL;
@property(nonatomic, strong) NSDictionary<NSString *, id> * geometry;
@property(nonatomic, strong) NSNumber * minZoom;
@property(nonatomic, strong) NSNumber * maxZoom;
@property(nonatomic, strong) NSNumber * pixelRatio;
@property(nonatomic, assign) FLTGlyphsRasterizationMode glyphsRasterizationMode;
@end

@interface FLTOfflineRegionTilePyramidDefinition : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithStyleURL:(NSString *)styleURL
    bounds:(FLTCoordinateBounds *)bounds
    minZoom:(NSNumber *)minZoom
    maxZoom:(NSNumber *)maxZoom
    pixelRatio:(NSNumber *)pixelRatio
    glyphsRasterizationMode:(FLTGlyphsRasterizationMode)glyphsRasterizationMode;
@property(nonatomic, copy) NSString * styleURL;
@property(nonatomic, strong) FLTCoordinateBounds * bounds;
@property(nonatomic, strong) NSNumber * minZoom;
@property(nonatomic, strong) NSNumber * maxZoom;
@property(nonatomic, strong) NSNumber * pixelRatio;
@property(nonatomic, assign) FLTGlyphsRasterizationMode glyphsRasterizationMode;
@end

@interface FLTProjectedMeters : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithNorthing:(NSNumber *)northing
    easting:(NSNumber *)easting;
@property(nonatomic, strong) NSNumber * northing;
@property(nonatomic, strong) NSNumber * easting;
@end

@interface FLTMercatorCoordinate : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithX:(NSNumber *)x
    y:(NSNumber *)y;
@property(nonatomic, strong) NSNumber * x;
@property(nonatomic, strong) NSNumber * y;
@end

@interface FLTResourceOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAccessToken:(NSString *)accessToken
    baseURL:(nullable NSString *)baseURL
    dataPath:(nullable NSString *)dataPath
    assetPath:(nullable NSString *)assetPath
    tileStoreUsageMode:(FLTTileStoreUsageMode)tileStoreUsageMode;
@property(nonatomic, copy) NSString * accessToken;
@property(nonatomic, copy, nullable) NSString * baseURL;
@property(nonatomic, copy, nullable) NSString * dataPath;
@property(nonatomic, copy, nullable) NSString * assetPath;
@property(nonatomic, assign) FLTTileStoreUsageMode tileStoreUsageMode;
@end

@interface FLTStyleObjectInfo : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithId:(NSString *)id
    type:(NSString *)type;
@property(nonatomic, copy) NSString * id;
@property(nonatomic, copy) NSString * type;
@end

@interface FLTMbxImage : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithWidth:(NSNumber *)width
    height:(NSNumber *)height
    data:(FlutterStandardTypedData *)data;
@property(nonatomic, strong) NSNumber * width;
@property(nonatomic, strong) NSNumber * height;
@property(nonatomic, strong) FlutterStandardTypedData * data;
@end

@interface FLTImageStretches : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithFirst:(NSNumber *)first
    second:(NSNumber *)second;
@property(nonatomic, strong) NSNumber * first;
@property(nonatomic, strong) NSNumber * second;
@end

@interface FLTImageContent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithLeft:(NSNumber *)left
    top:(NSNumber *)top
    right:(NSNumber *)right
    bottom:(NSNumber *)bottom;
@property(nonatomic, strong) NSNumber * left;
@property(nonatomic, strong) NSNumber * top;
@property(nonatomic, strong) NSNumber * right;
@property(nonatomic, strong) NSNumber * bottom;
@end

@interface FLTTransitionOptions : NSObject
+ (instancetype)makeWithDuration:(nullable NSNumber *)duration
    delay:(nullable NSNumber *)delay
    enablePlacementTransitions:(nullable NSNumber *)enablePlacementTransitions;
@property(nonatomic, strong, nullable) NSNumber * duration;
@property(nonatomic, strong, nullable) NSNumber * delay;
@property(nonatomic, strong, nullable) NSNumber * enablePlacementTransitions;
@end

@interface FLTCanonicalTileID : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithZ:(NSNumber *)z
    x:(NSNumber *)x
    y:(NSNumber *)y;
@property(nonatomic, strong) NSNumber * z;
@property(nonatomic, strong) NSNumber * x;
@property(nonatomic, strong) NSNumber * y;
@end

@interface FLTStylePropertyValue : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(NSString *)value
    kind:(FLTStylePropertyValueKind)kind;
@property(nonatomic, copy) NSString * value;
@property(nonatomic, assign) FLTStylePropertyValueKind kind;
@end

/// The codec used by FLT_AnimationManager.
NSObject<FlutterMessageCodec> *FLT_AnimationManagerGetCodec(void);

@protocol FLT_AnimationManager
- (void)easeToCameraOptions:(FLTCameraOptions *)cameraOptions mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)flyToCameraOptions:(FLTCameraOptions *)cameraOptions mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)pitchByPitch:(NSNumber *)pitch mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)scaleByAmount:(NSNumber *)amount screenCoordinate:(nullable FLTScreenCoordinate *)screenCoordinate mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)moveByScreenCoordinate:(FLTScreenCoordinate *)screenCoordinate mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)rotateByFirst:(FLTScreenCoordinate *)first second:(FLTScreenCoordinate *)second mapAnimationOptions:(nullable FLTMapAnimationOptions *)mapAnimationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)cancelCameraAnimationWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLT_AnimationManagerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_AnimationManager> *_Nullable api);

/// The codec used by FLT_CameraManager.
NSObject<FlutterMessageCodec> *FLT_CameraManagerGetCodec(void);

@protocol FLT_CameraManager
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)cameraForCoordinateBoundsBounds:(FLTCoordinateBounds *)bounds padding:(FLTMbxEdgeInsets *)padding bearing:(nullable NSNumber *)bearing pitch:(nullable NSNumber *)pitch error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)cameraForCoordinatesCoordinates:(NSArray<NSDictionary<NSString *, id> *> *)coordinates padding:(FLTMbxEdgeInsets *)padding bearing:(nullable NSNumber *)bearing pitch:(nullable NSNumber *)pitch error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)cameraForCoordinatesCameraOptionsCoordinates:(NSArray<NSDictionary<NSString *, id> *> *)coordinates camera:(FLTCameraOptions *)camera box:(FLTScreenBox *)box error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)cameraForGeometryGeometry:(NSDictionary<NSString *, id> *)geometry padding:(FLTMbxEdgeInsets *)padding bearing:(nullable NSNumber *)bearing pitch:(nullable NSNumber *)pitch error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCoordinateBounds *)coordinateBoundsForCameraCamera:(FLTCameraOptions *)camera error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCoordinateBounds *)coordinateBoundsForCameraUnwrappedCamera:(FLTCameraOptions *)camera error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCoordinateBoundsZoom *)coordinateBoundsZoomForCameraCamera:(FLTCameraOptions *)camera error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCoordinateBoundsZoom *)coordinateBoundsZoomForCameraUnwrappedCamera:(FLTCameraOptions *)camera error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTScreenCoordinate *)pixelForCoordinateCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, id> *)coordinateForPixelPixel:(FLTScreenCoordinate *)pixel error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSArray<FLTScreenCoordinate *> *)pixelsForCoordinatesCoordinates:(NSArray<NSDictionary<NSString *, id> *> *)coordinates error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSArray<NSDictionary<NSString *, id> *> *)coordinatesForPixelsPixels:(NSArray<FLTScreenCoordinate *> *)pixels error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setCameraCameraOptions:(FLTCameraOptions *)cameraOptions error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraState *)getCameraStateWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setBoundsOptions:(FLTCameraBoundsOptions *)options error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraBounds *)getBoundsWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)dragStartPoint:(FLTScreenCoordinate *)point error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTCameraOptions *)getDragCameraOptionsFromPoint:(FLTScreenCoordinate *)fromPoint toPoint:(FLTScreenCoordinate *)toPoint error:(FlutterError *_Nullable *_Nonnull)error;
- (void)dragEndWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLT_CameraManagerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_CameraManager> *_Nullable api);

/// The codec used by FLT_MapInterface.
NSObject<FlutterMessageCodec> *FLT_MapInterfaceGetCodec(void);

@protocol FLT_MapInterface
- (void)loadStyleURIStyleURI:(NSString *)styleURI completion:(void(^)(FlutterError *_Nullable))completion;
- (void)loadStyleJsonStyleJson:(NSString *)styleJson completion:(void(^)(FlutterError *_Nullable))completion;
- (void)clearDataWithCompletion:(void(^)(FlutterError *_Nullable))completion;
- (void)setMemoryBudgetMapMemoryBudgetInMegabytes:(nullable FLTMapMemoryBudgetInMegabytes *)mapMemoryBudgetInMegabytes mapMemoryBudgetInTiles:(nullable FLTMapMemoryBudgetInTiles *)mapMemoryBudgetInTiles error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTSize *)getSizeWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)triggerRepaintWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setGestureInProgressInProgress:(NSNumber *)inProgress error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isGestureInProgressWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setUserAnimationInProgressInProgress:(NSNumber *)inProgress error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isUserAnimationInProgressWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setPrefetchZoomDeltaDelta:(NSNumber *)delta error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getPrefetchZoomDeltaWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setNorthOrientationOrientation:(FLTNorthOrientation)orientation error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setConstrainModeMode:(FLTConstrainMode)mode error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setViewportModeMode:(FLTViewportMode)mode error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTMapOptions *)getMapOptionsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSArray<FLTMapDebugOptions *> *)getDebugWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setDebugDebugOptions:(NSArray<FLTMapDebugOptions *> *)debugOptions value:(NSNumber *)value error:(FlutterError *_Nullable *_Nonnull)error;
- (void)queryRenderedFeaturesGeometry:(FLTRenderedQueryGeometry *)geometry options:(FLTRenderedQueryOptions *)options completion:(void(^)(NSArray<FLTQueriedFeature *> *_Nullable, FlutterError *_Nullable))completion;
- (void)querySourceFeaturesSourceId:(NSString *)sourceId options:(FLTSourceQueryOptions *)options completion:(void(^)(NSArray<FLTQueriedFeature *> *_Nullable, FlutterError *_Nullable))completion;
- (void)getGeoJsonClusterLeavesSourceIdentifier:(NSString *)sourceIdentifier cluster:(NSDictionary<NSString *, id> *)cluster limit:(nullable NSNumber *)limit offset:(nullable NSNumber *)offset completion:(void(^)(FLTFeatureExtensionValue *_Nullable, FlutterError *_Nullable))completion;
- (void)getGeoJsonClusterChildrenSourceIdentifier:(NSString *)sourceIdentifier cluster:(NSDictionary<NSString *, id> *)cluster completion:(void(^)(FLTFeatureExtensionValue *_Nullable, FlutterError *_Nullable))completion;
- (void)getGeoJsonClusterExpansionZoomSourceIdentifier:(NSString *)sourceIdentifier cluster:(NSDictionary<NSString *, id> *)cluster completion:(void(^)(FLTFeatureExtensionValue *_Nullable, FlutterError *_Nullable))completion;
- (void)setFeatureStateSourceId:(NSString *)sourceId sourceLayerId:(nullable NSString *)sourceLayerId featureId:(NSString *)featureId state:(NSString *)state error:(FlutterError *_Nullable *_Nonnull)error;
- (void)getFeatureStateSourceId:(NSString *)sourceId sourceLayerId:(nullable NSString *)sourceLayerId featureId:(NSString *)featureId completion:(void(^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)removeFeatureStateSourceId:(NSString *)sourceId sourceLayerId:(nullable NSString *)sourceLayerId featureId:(NSString *)featureId stateKey:(nullable NSString *)stateKey error:(FlutterError *_Nullable *_Nonnull)error;
- (void)reduceMemoryUseWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTResourceOptions *)getResourceOptionsWithError:(FlutterError *_Nullable *_Nonnull)error;
- (nullable NSNumber *)getElevationCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLT_MapInterfaceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_MapInterface> *_Nullable api);

/// The codec used by FLTOfflineRegion.
NSObject<FlutterMessageCodec> *FLTOfflineRegionGetCodec(void);

@protocol FLTOfflineRegion
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getIdentifierWithError:(FlutterError *_Nullable *_Nonnull)error;
- (nullable FLTOfflineRegionTilePyramidDefinition *)getTilePyramidDefinitionWithError:(FlutterError *_Nullable *_Nonnull)error;
- (nullable FLTOfflineRegionGeometryDefinition *)getGeometryDefinitionWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FlutterStandardTypedData *)getMetadataWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setMetadataMetadata:(FlutterStandardTypedData *)metadata completion:(void(^)(FlutterError *_Nullable))completion;
- (void)setOfflineRegionDownloadStateState:(FLTOfflineRegionDownloadState)state error:(FlutterError *_Nullable *_Nonnull)error;
- (void)invalidateWithCompletion:(void(^)(FlutterError *_Nullable))completion;
- (void)purgeWithCompletion:(void(^)(FlutterError *_Nullable))completion;
@end

extern void FLTOfflineRegionSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTOfflineRegion> *_Nullable api);

/// The codec used by FLTOfflineRegionManager.
NSObject<FlutterMessageCodec> *FLTOfflineRegionManagerGetCodec(void);

@protocol FLTOfflineRegionManager
- (void)setOfflineMapboxTileCountLimitLimit:(NSNumber *)limit error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTOfflineRegionManagerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTOfflineRegionManager> *_Nullable api);

/// The codec used by FLTProjection.
NSObject<FlutterMessageCodec> *FLTProjectionGetCodec(void);

@protocol FLTProjection
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getMetersPerPixelAtLatitudeLatitude:(NSNumber *)latitude zoom:(NSNumber *)zoom error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTProjectedMeters *)projectedMetersForCoordinateCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, id> *)coordinateForProjectedMetersProjectedMeters:(FLTProjectedMeters *)projectedMeters error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTMercatorCoordinate *)projectCoordinate:(NSDictionary<NSString *, id> *)coordinate zoomScale:(NSNumber *)zoomScale error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, id> *)unprojectCoordinate:(FLTMercatorCoordinate *)coordinate zoomScale:(NSNumber *)zoomScale error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTProjectionSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTProjection> *_Nullable api);

/// The codec used by FLTSettings.
NSObject<FlutterMessageCodec> *FLTSettingsGetCodec(void);

@protocol FLTSettings
- (void)setKey:(NSString *)key value:(NSString *)value error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getKey:(NSString *)key error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTSettingsSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTSettings> *_Nullable api);

/// The codec used by FLTMapSnapshot.
NSObject<FlutterMessageCodec> *FLTMapSnapshotGetCodec(void);

@protocol FLTMapSnapshot
/// @return `nil` only when `error != nil`.
- (nullable FLTScreenCoordinate *)screenCoordinateCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, id> *)coordinateScreenCoordinate:(FLTScreenCoordinate *)screenCoordinate error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSArray<NSString *> *)attributionsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTMbxImage *)imageWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTMapSnapshotSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTMapSnapshot> *_Nullable api);

/// The codec used by FLTMapSnapshotter.
NSObject<FlutterMessageCodec> *FLTMapSnapshotterGetCodec(void);

@protocol FLTMapSnapshotter
- (void)setSizeSize:(FLTSize *)size error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FLTSize *)getSizeWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isInTileModeWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setTileModeSet:(NSNumber *)set error:(FlutterError *_Nullable *_Nonnull)error;
- (void)cancelWithError:(FlutterError *_Nullable *_Nonnull)error;
- (nullable NSNumber *)getElevationCoordinate:(NSDictionary<NSString *, id> *)coordinate error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTMapSnapshotterSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTMapSnapshotter> *_Nullable api);

/// The codec used by FLTStyleManager.
NSObject<FlutterMessageCodec> *FLTStyleManagerGetCodec(void);

@protocol FLTStyleManager
- (void)getStyleURIWithCompletion:(void(^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleURIUri:(NSString *)uri completion:(void(^)(FlutterError *_Nullable))completion;
- (void)getStyleJSONWithCompletion:(void(^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleJSONJson:(NSString *)json completion:(void(^)(FlutterError *_Nullable))completion;
- (void)getStyleDefaultCameraWithCompletion:(void(^)(FLTCameraOptions *_Nullable, FlutterError *_Nullable))completion;
- (void)getStyleTransitionWithCompletion:(void(^)(FLTTransitionOptions *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleTransitionTransitionOptions:(FLTTransitionOptions *)transitionOptions completion:(void(^)(FlutterError *_Nullable))completion;
- (void)addStyleLayerProperties:(NSString *)properties layerPosition:(nullable FLTLayerPosition *)layerPosition completion:(void(^)(FlutterError *_Nullable))completion;
- (void)addPersistentStyleLayerProperties:(NSString *)properties layerPosition:(nullable FLTLayerPosition *)layerPosition completion:(void(^)(FlutterError *_Nullable))completion;
- (void)isStyleLayerPersistentLayerId:(NSString *)layerId completion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)removeStyleLayerLayerId:(NSString *)layerId completion:(void(^)(FlutterError *_Nullable))completion;
- (void)moveStyleLayerLayerId:(NSString *)layerId layerPosition:(nullable FLTLayerPosition *)layerPosition completion:(void(^)(FlutterError *_Nullable))completion;
- (void)styleLayerExistsLayerId:(NSString *)layerId completion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)getStyleLayersWithCompletion:(void(^)(NSArray<FLTStyleObjectInfo *> *_Nullable, FlutterError *_Nullable))completion;
- (void)getStyleLayerPropertyLayerId:(NSString *)layerId property:(NSString *)property completion:(void(^)(FLTStylePropertyValue *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleLayerPropertyLayerId:(NSString *)layerId property:(NSString *)property value:(id)value completion:(void(^)(FlutterError *_Nullable))completion;
- (void)getStyleLayerPropertiesLayerId:(NSString *)layerId completion:(void(^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleLayerPropertiesLayerId:(NSString *)layerId properties:(NSString *)properties completion:(void(^)(FlutterError *_Nullable))completion;
- (void)addStyleSourceSourceId:(NSString *)sourceId properties:(NSString *)properties completion:(void(^)(FlutterError *_Nullable))completion;
- (void)getStyleSourcePropertySourceId:(NSString *)sourceId property:(NSString *)property completion:(void(^)(FLTStylePropertyValue *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleSourcePropertySourceId:(NSString *)sourceId property:(NSString *)property value:(id)value completion:(void(^)(FlutterError *_Nullable))completion;
- (void)getStyleSourcePropertiesSourceId:(NSString *)sourceId completion:(void(^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleSourcePropertiesSourceId:(NSString *)sourceId properties:(NSString *)properties completion:(void(^)(FlutterError *_Nullable))completion;
- (void)updateStyleImageSourceImageSourceId:(NSString *)sourceId image:(FLTMbxImage *)image completion:(void(^)(FlutterError *_Nullable))completion;
- (void)removeStyleSourceSourceId:(NSString *)sourceId completion:(void(^)(FlutterError *_Nullable))completion;
- (void)styleSourceExistsSourceId:(NSString *)sourceId completion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)getStyleSourcesWithCompletion:(void(^)(NSArray<FLTStyleObjectInfo *> *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleLightProperties:(NSString *)properties completion:(void(^)(FlutterError *_Nullable))completion;
- (void)getStyleLightPropertyProperty:(NSString *)property completion:(void(^)(FLTStylePropertyValue *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleLightPropertyProperty:(NSString *)property value:(id)value completion:(void(^)(FlutterError *_Nullable))completion;
- (void)setStyleTerrainProperties:(NSString *)properties completion:(void(^)(FlutterError *_Nullable))completion;
- (void)getStyleTerrainPropertyProperty:(NSString *)property completion:(void(^)(FLTStylePropertyValue *_Nullable, FlutterError *_Nullable))completion;
- (void)setStyleTerrainPropertyProperty:(NSString *)property value:(id)value completion:(void(^)(FlutterError *_Nullable))completion;
- (void)getStyleImageImageId:(NSString *)imageId completion:(void(^)(FLTMbxImage *_Nullable, FlutterError *_Nullable))completion;
- (void)addStyleImageImageId:(NSString *)imageId scale:(NSNumber *)scale image:(FLTMbxImage *)image sdf:(NSNumber *)sdf stretchX:(NSArray<FLTImageStretches *> *)stretchX stretchY:(NSArray<FLTImageStretches *> *)stretchY content:(nullable FLTImageContent *)content completion:(void(^)(FlutterError *_Nullable))completion;
- (void)removeStyleImageImageId:(NSString *)imageId completion:(void(^)(FlutterError *_Nullable))completion;
- (void)hasStyleImageImageId:(NSString *)imageId completion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)invalidateStyleCustomGeometrySourceTileSourceId:(NSString *)sourceId tileId:(FLTCanonicalTileID *)tileId completion:(void(^)(FlutterError *_Nullable))completion;
- (void)invalidateStyleCustomGeometrySourceRegionSourceId:(NSString *)sourceId bounds:(FLTCoordinateBounds *)bounds completion:(void(^)(FlutterError *_Nullable))completion;
- (void)isStyleLoadedWithCompletion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)getProjectionWithCompletion:(void(^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)setProjectionProjection:(NSString *)projection completion:(void(^)(FlutterError *_Nullable))completion;
@end

extern void FLTStyleManagerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTStyleManager> *_Nullable api);

/// The codec used by FLTCancelable.
NSObject<FlutterMessageCodec> *FLTCancelableGetCodec(void);

@protocol FLTCancelable
- (void)cancelWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTCancelableSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTCancelable> *_Nullable api);

/// The codec used by FLTOfflineSwitch.
NSObject<FlutterMessageCodec> *FLTOfflineSwitchGetCodec(void);

@protocol FLTOfflineSwitch
- (void)setMapboxStackConnectedConnected:(NSNumber *)connected error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isMapboxStackConnectedWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)resetWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTOfflineSwitchSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTOfflineSwitch> *_Nullable api);

/// The codec used by FLTTilesetDescriptor.
NSObject<FlutterMessageCodec> *FLTTilesetDescriptorGetCodec(void);

@protocol FLTTilesetDescriptor
@end

extern void FLTTilesetDescriptorSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTTilesetDescriptor> *_Nullable api);

NS_ASSUME_NONNULL_END
